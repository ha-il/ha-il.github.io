{"version":3,"file":"component---src-pages-index-js-5393b3134f480a48778c.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/constants.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            nickname\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  //const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          안녕하세요 개발자 <strong>{author.name}</strong>입니다. <br />\n          <strong>{author.nickname}</strong>이라는 닉네임을 사용하고 있습니다.\n          <br />\n          {author?.summary || null}\n          {` `}\n          {/* <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a> */}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","export const CATEGORIES = [\n  \"typescript\",\n  \"javascript\",\n  \"react\",\n  \"algorithm\",\n  \"project\",\n]\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport {\n  GatsbyImage,\n  getImage,\n  StaticImage,\n  withArtDirection,\n} from \"gatsby-plugin-image\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { CATEGORIES } from \"../constants\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <div className=\"slider\">\n        <div className=\"slider-content\">\n          <div className=\"slider-content-text\">\n            <div className=\"slider-content-text-title\">\n              하일의 작업실에 오신 걸 환영합니다!\n            </div>\n            <p>\n              안녕하세요, <strong>하일</strong>이라는 닉네임으로 활동하고 있는{\" \"}\n              <br /> <em>개발자</em>\n              <strong> 김형우</strong>입니다. <br />\n            </p>\n          </div>\n          <div className=\"slider-content-img\">\n            <StaticImage src=\"../images/ts-256x256.png\" alt=\"Slider picture\" />\n          </div>\n        </div>\n      </div>\n      <h2 className=\"categories-title\">카테고리</h2>\n      <ol className=\"categories-container\" style={{ listStyle: `none` }}>\n        <li className=\"category-container\" key=\"all-posts\" data-category=\"전체\">\n          <Link to={`/`} itemProp=\"url\">\n            <StaticImage\n              src=\"../images/category/all-post.png\"\n              alt=\"category-image\"\n            />\n            <span>all</span>\n          </Link>\n        </li>\n        {CATEGORIES.map(category => {\n          return (\n            <li\n              className=\"category-container\"\n              key={category}\n              data-category={category}\n            >\n              <Link to={`/categories/${category}`} itemProp=\"url\">\n                {category === \"typescript\" ? (\n                  <StaticImage\n                    src=\"../images/category/TypeScript.png\"\n                    alt=\"category-image\"\n                  />\n                ) : null}\n                {category === \"javascript\" ? (\n                  <StaticImage\n                    src=\"../images/category/JavaScript.png\"\n                    alt=\"category-image\"\n                  />\n                ) : null}\n                {category === \"react\" ? (\n                  <StaticImage\n                    src=\"../images/category/React.png\"\n                    alt=\"category-image\"\n                  />\n                ) : null}\n                {category === \"algorithm\" ? (\n                  <StaticImage\n                    src=\"../images/category/Algorithm.png\"\n                    alt=\"category-image\"\n                  ></StaticImage>\n                ) : null}\n                {category === \"project\" ? (\n                  <StaticImage\n                    src=\"../images/category/Project.png\"\n                    alt=\"category-image\"\n                  />\n                ) : null}\n                <span>{category}</span>\n              </Link>\n            </li>\n          )\n        })}\n      </ol>\n      <ol className=\"post-list\" style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n          const images = withArtDirection(\n            getImage(\n              post.frontmatter.featuredImage?.childImageSharp?.gatsbyImageData\n            ),\n            [\n              {\n                media: \"(max-width: 558px)\",\n                image: getImage(\n                  post.frontmatter.mobileImage?.childImageSharp?.gatsbyImageData\n                ),\n              },\n            ]\n          )\n\n          return (\n            <li key={post.fields.slug}>\n              <Link to={post.fields.slug} itemProp=\"url\">\n                <GatsbyImage\n                  className=\"art-directed\"\n                  image={images}\n                  alt=\"Art directed image\"\n                />\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                >\n                  <header>\n                    <h2>\n                      <span itemProp=\"headline\">{title}</span>\n                    </h2>\n                    <small>{post.frontmatter.date}</small>\n                  </header>\n                  <section>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: post.frontmatter.description || post.excerpt,\n                      }}\n                      itemProp=\"description\"\n                    />\n                  </section>\n                </article>\n              </Link>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          category\n          featuredImage {\n            childImageSharp {\n              gatsbyImageData(width: 128, height: 128, layout: CONSTRAINED)\n            }\n          }\n          mobileImage {\n            childImageSharp {\n              gatsbyImageData(width: 512, height: 256, layout: CONSTRAINED)\n            }\n          }\n        }\n      }\n      distinct(field: { frontmatter: { category: SELECT } })\n    }\n  }\n`\n"],"names":["author","useStaticQuery","site","siteMetadata","className","S","layout","formats","src","width","height","quality","alt","name","nickname","summary","CATEGORIES","data","location","siteTitle","title","posts","allMarkdownRemark","nodes","length","style","listStyle","key","Link","to","itemProp","category","map","post","frontmatter","fields","slug","images","withArtDirection","getImage","featuredImage","childImageSharp","gatsbyImageData","media","image","mobileImage","G","itemScope","itemType","date","dangerouslySetInnerHTML","__html","description","excerpt","Head"],"sourceRoot":""}