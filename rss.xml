<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[하일의 작업실]]></description><link>https://ha-il.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 28 Aug 2023 17:02:00 GMT</lastBuildDate><item><title><![CDATA[[CRA 환경설정] AWS S3로 배포한 사이트의 CI/CD 환경 구축하기 with GitHub Actions]]></title><description><![CDATA[이전 글 "[CRA 환경설정] Husky 환경 설정"에서 이어지는 글입니다. 들어가기 전에 지난 글에서는 Husky 설정을 끝으로, 개발 환경에서의 환경설정을 완료했다. 이번 글에서는 AWS S3로 배포한 정적 사이트의 CI/CD…]]></description><link>https://ha-il.github.io/configure/cra-configure/ci-cd/</link><guid isPermaLink="false">https://ha-il.github.io/configure/cra-configure/ci-cd/</guid><pubDate>Mon, 28 Aug 2023 15:46:00 GMT</pubDate><content:encoded>&lt;p&gt;이전 글 &lt;a href=&quot;https://ha-il.github.io/configure/cra-configure/husky-config/&quot;&gt;&quot;[CRA 환경설정] Husky 환경 설정&quot;&lt;/a&gt;에서 이어지는 글입니다.&lt;/p&gt;
&lt;h2&gt;들어가기 전에&lt;/h2&gt;
&lt;p&gt;지난 글에서는 Husky 설정을 끝으로, 개발 환경에서의 환경설정을 완료했다. 이번 글에서는 AWS S3로 배포한 정적 사이트의 CI/CD 환경 설정 과정을 다뤄보려고 한다. 배포를 자동화하는 과정을 중점적으로 정리하고 싶기 때문에, AWS S3에 정적 사이트를 배포하는 방법은 다루지 않는다.&lt;/p&gt;
&lt;h2&gt;1. 배포를 자동화해야하는 이유는?&lt;/h2&gt;
&lt;p&gt;AWS S3로 배포할 경우 아래와 같은 순서대로 배포가 진행된다.&lt;/p&gt;
&lt;p&gt;변경사항 푸쉬 → 빌드 → S3 버킷 비우기 → 빌드 파일 업로드 → 배포&lt;/p&gt;
&lt;p&gt;푸쉬와 빌드는 명령어만 입력하면 되니까 참고 넘어갈 수 있지만, 푸시하고 빌드할 때마다 S3 버킷을 비우러 AWS 웹사이트에 접속해야 한다면 정말 귀찮을 것이다. 일단 빌드와 동시에 배포가 이뤄질 수 있도록 빌드와 배포 과정을 자동화해야할 필요가 있다.&lt;/p&gt;
&lt;h2&gt;2. 배포를 자동화해보자.&lt;/h2&gt;
&lt;p&gt;배포 자동화 과정이 잘 이뤄지고 있는지 확인하기 위해, 먼저 현재 S3에 배포되고 있는 내 웹 사이트를 공개한다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ha-il/ha-il.github.io/assets/108077643/6c66af96-5d33-4f97-8820-6d5089905ea5&quot; alt=&quot;deploy-one&quot;&gt;&lt;/p&gt;
&lt;p&gt;(&lt;del&gt;짜잔!&lt;/del&gt;...)&lt;/p&gt;
&lt;p&gt;... 여기에 문장을 하나씩 추가해보면서 배포가 잘 진행되고 있는지 확인해보자.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 먼저, aws-cli를 설치하자.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AWS CLI는 &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/getting-started-install.html#getting-started-install-instructions&quot;&gt;AWS-Install or update the latest version of the AWS CLI&lt;/a&gt;에서 자신의 운영체제에 맞는 방법으로 설치하면 된다.&lt;/p&gt;
&lt;p&gt;설치가 잘 진행 됐다면, &lt;code class=&quot;language-text&quot;&gt;aws --version&lt;/code&gt; 명령어를 터미널에 입력했을 때 aws-cli 버전이 뜰 것이다.&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;&lt;strong&gt;2. aws에서 엑세스 키를 만든다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;aws-cli으로 자신의 인증 정보를 입력하기 위해 필요하다. 엑세스 키는 AWS 웹사이트에 접속하고 로그인을 하면 만들 수 있다. 자세한 과정은 &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/powershell/latest/userguide/pstools-appendix-sign-up.html&quot;&gt;AWS 계정 및 액세스 키&lt;/a&gt;를 참고하면 된다.&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;&lt;strong&gt;3. &lt;code class=&quot;language-text&quot;&gt;aws configure&lt;/code&gt; 명령어를 입력하여 보안 인증 정보, 리전 및 출력 형식을 빠르게 설정한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;명령어를 입력하고 나면 아래 항목이 순서대로 등장하는데, 자신의 상황에 맞게 입력하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;AWS Access Key ID [None]: # 자신의 액세스 키
AWS Secret Access Key [None]: # 자신의 시크릿 액세스 키
Default region name [None]: ap-northeast-2 # 내 기준으로 가장 가까운 리전 선택
Default output format [None]: # 생략해도 됨, 예시에는 json을 사용&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/br&gt;
&lt;p&gt;&lt;strong&gt;4. &lt;code class=&quot;language-text&quot;&gt;aws s3 ls&lt;/code&gt; 명령어를 입력한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;인증이 잘 진행됐다면, 명령어를 입력했을 때 인증 정보를 등록한 계정의 버킷 리스트가 나온다. 나의 경우 버킷의 이름인 cra-config가 나왔다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;2023-08-28 17:59:40 cra-config&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/br&gt;
&lt;p&gt;&lt;strong&gt;5. aws-cli로 내 빌드 폴더를 버킷에 업로드한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;버킷에 폴더를 업로드하는 명령어는 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;aws s3 sync 업로드할폴더/ 버킷이름 --delete&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;업로드할 폴더는 자신이 버킷에 업로드할 폴더 이름을 입력하면 된다. 버킷 이름은 &lt;code class=&quot;language-text&quot;&gt;s3://버킷이름&lt;/code&gt;의 형식으로 입력하면 된다. &lt;code class=&quot;language-text&quot;&gt;--delete&lt;/code&gt;는 기존 버킷의 내용을 삭제하고 업로드하는 것이다.&lt;/p&gt;
&lt;p&gt;명령어를 입력하기 전에! 배포가 잘 되고 있는지 확인하기 위해, 변경사항을 추가하고 다시 빌드를 진행했다.&lt;/p&gt;
&lt;p&gt;그리고 아래와 같이 명령어를 작성해서 실행했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;aws s3 sync build/ s3://cra-config --delete&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 배포 사이트를 다시 가보니 아래와 같이 변경사항이 잘 적용되었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ha-il/ha-il.github.io/assets/108077643/18174595-edc8-4804-bfc3-1410339f1fc2&quot; alt=&quot;deploy-two&quot;&gt;&lt;/p&gt;
&lt;p&gt;(&lt;del&gt;짜잔2&lt;/del&gt;...)&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;&lt;strong&gt;6. 빌드와 동시에 배포가 될 수 있도록 package.json 파일에 deploy라는 스크립트를 만든다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;aws-cli로 배포하는 방법을 알았으니, 이번에는 빌드와 배포가 동시에 진행될 수 있도록 스크립트를 작성해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react-scripts build&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;lint&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;eslint . --cache&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;prettier . --write --cache&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;prepare&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;husky install&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// deploy 추가!&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;deploy&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;npm run build &amp;amp;&amp;amp; aws s3 sync build/ s3://cra-config --delete&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;변경 사항을 만들고 &lt;code class=&quot;language-text&quot;&gt;npm run deploy&lt;/code&gt;를 실행했더니, 아래와 같이 변경 사항이 잘 적용되었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ha-il/ha-il.github.io/assets/108077643/ed0017fa-1444-4439-b21c-1e339379e032&quot; alt=&quot;deploy-three&quot;&gt;&lt;/p&gt;
&lt;p&gt;(&lt;del&gt;이쯤 되니 정든다&lt;/del&gt;)&lt;/p&gt;
&lt;p&gt;변경사항 푸쉬 → 빌드 → S3 버킷 비우기 → 빌드 파일 업로드 → 배포. 이렇게 총 5단계로 이뤄지던 배포 과정이 변경사항 푸쉬 → 빌드 → 배포, 이렇게 3단계로 줄었고 심지어 빌드 명령어 하나만 입력하면 배포까지 되도록 설정했다. 너무 좋다. 하지만 뭔가 부족한 점이 있다. 이 과정은 오직 내 컴퓨터에서만 실행된다는 점이다. 만약 이것이 팀 프로젝트라면 어떨까? 빌드와 배포가 동시에 진행되도록 만들기 위해 건너온 지난한 과정을 다른 팀원들도 그대로 겪어야 한다. 이런 과정을 팀원들이 겪지 않게 자동화하는 방법은 없을까? 이때 사용되는 개념이 CI/CD이다.&lt;/p&gt;
&lt;h2&gt;3. CI/CD&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CI&lt;/strong&gt;: Continuous Integration&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;코드를 테스트해서 유효한지 검증하고 통합하는 과정을 자동화하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CD&lt;/strong&gt;: Continuous Delivery/Deployment&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CI를 통해 통합된 코드들을 Production 환경에 배포하는 과정을 자동화하는 것&lt;/li&gt;
&lt;li&gt;Delivery: 개발환경까지의 배포를 자동화 된 것&lt;/li&gt;
&lt;li&gt;Deployment: Production 환경의까지의 배포를 자동화 한 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;즉, &lt;strong&gt;CI/CD&lt;/strong&gt;는 CI/CD 파이프라인을 구축해서 &lt;strong&gt;빌드, 테스트, 배포 등의 과정을 자동화하는 것&lt;/strong&gt;을 의미한다.&lt;/p&gt;
&lt;h3&gt;3.1 CI/CD 플랫폼&lt;/h3&gt;
&lt;p&gt;CI/CD 플랫폼은 &lt;strong&gt;설치형&lt;/strong&gt;과 &lt;strong&gt;클라우드형&lt;/strong&gt;으로 나뉜다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;설치형&lt;/strong&gt;은 CI/CD 파이프라인을 구축하는 개발자가 직접 특정 컴퓨터에 CI/CD 플랫폼을 설치해서 활용한다. 대표적인 설치형 CI/CD 플랫폼으로는 Jenkins가 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;클라우드형&lt;/strong&gt;은 서비스 제공자가 클라우드에서 CI/CD 플랫폼을 운영해주는 형태이다. 별도의 컴퓨팅 자원에 대한 관리 없이 CI/CD 파이프라인 구축에만 신경 쓸 수 있다. 대표적인 클라우드형 CI/CD 플랫폼으로는 GitHub Actions, Travis CI가 있다.&lt;/p&gt;
&lt;p&gt;이번 프로젝트에서는 &lt;strong&gt;GitHub Actions&lt;/strong&gt;를 사용해보려고 한다. 깃헙 저장소와의 연동이 간편하고 레퍼지토리 안에서 CI/CD를 함께 구축할 수 있다. 무엇보다 퍼블릭 레퍼지토리는 공짜다.&lt;/p&gt;
&lt;h3&gt;3.2 CI/CD 플랫폼을 사용하기 전에&lt;/h3&gt;
&lt;p&gt;CI/CD 플랫폼을 사용하기 전에 우선 무엇을 자동화할 것인지 생각해봐야 파이프라인을 구축할 수 있다.&lt;/p&gt;
&lt;p&gt;일단, 나의 경우 이번에는 배포의 자동화를 중점적으로 다루고 싶다. 그래서 deploy 스크립트로 빌드와 배포과정을 통합했다. 하지만 그 조차도 입력하지 않고, &lt;strong&gt;main 브랜치에 푸쉬하기만 하면 빌드와 배포가 자동으로 진행&lt;/strong&gt;되었으면 좋겠다. 이 과정을 CI/CD 파이프라인으로 GitHub Actions을 통해 구축해보자.&lt;/p&gt;
&lt;h2&gt;4. GitHub Actions&lt;/h2&gt;
&lt;p&gt;GitHub Actions를 사용하기 전에 기본적인 용어를 알고가면 이해하기 쉽다. 아래 이미지는 &lt;a href=&quot;https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#the-components-of-github-actions&quot;&gt;GitHub Docs-Understanding GitHub Actions&lt;/a&gt;에서 가져왔다.&lt;/p&gt;
&lt;img src=&quot;https://docs.github.com/assets/cb-25535/mw-1440/images/help/actions/overview-actions-simple.webp&quot; width=&quot;100%&quot; alt=&quot;The components of GitHub Actions&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Workflow&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHun Actions상에서 실행될 자동화된 일련의 작업 흐름을 의미&lt;/li&gt;
&lt;li&gt;YAML 형식의 파일을 통해서 Workflow를 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Event&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;레파지토리에서 발생하는 push, pull request open, issue open등의 특정한 활동을 의미&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Runner&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;workflow를 실행할 서버를 의미&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jobs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 runner에서 실행될 여러 step의 모음을 의미&lt;/li&gt;
&lt;li&gt;job안의 step들은 순차적으로 실행&lt;/li&gt;
&lt;li&gt;workflow의 job들은 기본적으로 병렬로 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;step&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실행가능한 하나의 shell script 또는 action을 의미&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4.1 GitHub Actions 초기 설정&lt;/h3&gt;
&lt;p&gt;본격적으로 GitHub Actions를 이용해 CI/CD 파이프라인을 구축해보자. 참고로 이 과정은 &lt;a href=&quot;https://docs.github.com/en/actions/quickstart&quot;&gt;GitHun Docs-GitHub Actions-Quickstart&lt;/a&gt;를 참고했다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 먼저, 루트 디렉터리에 .github/workflows 폴더를 생성한다.&lt;/strong&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;2. .github/workflows 폴더에 github-actions-demo.yml 파일을 만든다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;yml 파일의 이름은 마음대로 지어도 된다.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;3. github-actions-demo.yml 파일에 아래와 같이 작성한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; GitHub Actions Demo
&lt;span class=&quot;token key atrule&quot;&gt;run-name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; github.actor &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; is testing out GitHub Actions 🚀
&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;push&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;Explore-GitHub-Actions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; echo &quot;🎉 The job was automatically triggered by a $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; github.event_name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; event.&quot;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; echo &quot;🐧 This job is now running on a $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; runner.os &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; server hosted by GitHub&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt;&quot;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; echo &quot;🔎 The name of your branch is $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; github.ref &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; and your repository is $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; github.repository &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;.&quot;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Check out repository code
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v3
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; echo &quot;💡 The $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; github.repository &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; repository has been cloned to the runner.&quot;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; echo &quot;🖥️ The workflow is now ready to test your code on the runner.&quot;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; List files in the repository
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;
          ls ${{ github.workspace }}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; echo &quot;🍏 This job&apos;s status is $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; job.status &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;.&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;4. git push 이벤트를 발생시키고 깃헙 저장소의 actions 탭에서 action 실행 결과를 확인한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;아래 링크에는 깃헙 저장소에서 GitHub Actions의 워크플로우 결과를 확인하는 방법이 나와있다. 아래 링크를 참고하길 바란다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/actions/quickstart#viewing-your-workflow-results&quot;&gt;GitHub Actions-QuickStart-Viewing your workflow results&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;4.2 워크플로우 문법 살펴보기&lt;/h3&gt;
&lt;p&gt;위에서 다룬 워크플로우 파일은 어디까지나 작동이 되나 확인하는 용도이다. 프로젝트의 배포를 위해서는 조금 더 세부적인 설정이 필요하다. 워크플로우 파일을 세부적으로 설정하려면 문법을 알아야 하는데, 문법의 양도 방대하고 실제로 다 쓰일지도 잘 모르기 때문에, 일단 내가 실제 프로젝트에서 사용해봤던 문법 위주로 정리하려고 한다. 만약 모든 문법 사항이 궁금하다면 &lt;a href=&quot;https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#about-yaml-syntax-for-workflows&quot;&gt;GitHub Actions-Workflow syntax for GitHub Actions&lt;/a&gt;를 참고하기를 바란다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; GitHub Actions Demo &lt;span class=&quot;token comment&quot;&gt;# 워크 플로우 이름&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;run-name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; github.actor &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; is testing out GitHub Actions 🚀
&lt;span class=&quot;token comment&quot;&gt;# run-name: 깃헙 저장소 actions 탭을 클릭하면 나오는 리스트에 표시되는 이름&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 워크플로우를 실행할 이벤트를 정의&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# push 이벤트 감지&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 특정 branch만 지정할 수도 있음&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; main
&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;Explore-GitHub-Actions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# job 이름&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest &lt;span class=&quot;token comment&quot;&gt;# runner의 운영체제&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Check out repository code  &lt;span class=&quot;token comment&quot;&gt;# name: 깃헙에 표시되는 step의 이름&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v3 &lt;span class=&quot;token comment&quot;&gt;# uses: job에 사용할 actions를 step으로 추가&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm install &lt;span class=&quot;token comment&quot;&gt;# run: 운영체제의 셸을 사용하여 명령어를 실행&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run test
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참고로 &lt;code class=&quot;language-text&quot;&gt;uses: actions/checkout@v3&lt;/code&gt;에서 의미하는 &lt;strong&gt;action&lt;/strong&gt;은 워크플로우에서 자주 사용되는 기능들을 모아둔 일종의 커스텀 애플리케이션이다. &lt;a href=&quot;https://github.com/marketplace?type=&quot;&gt;GitHub Marketplace&lt;/a&gt;에서 action을 검색하고 워크플로우에서 활용할 수 있다.&lt;/p&gt;
&lt;h3&gt;4.3 GitHub Actions로 CI/CD 파이프라인 구축하기&lt;/h3&gt;
&lt;p&gt;Github Actions로 워크플로우를 작성하고 실행하는 방법을 알아봤으니, 본격적으로 CI/CD 파이프라인을 구축해보려 한다. 파이프라인은 아래와 같은 순서로 구성하려 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;main 브랜치에 푸쉬 하면&lt;/li&gt;
&lt;li&gt;의존성을 설치하고(내 깃헙 저장소에는 node-modules가 없으니까)&lt;/li&gt;
&lt;li&gt;테스트를 실행하고(아직 기본 테스트 코드지만 CI 과정에 필수적이므로)&lt;/li&gt;
&lt;li&gt;빌드하고&lt;/li&gt;
&lt;li&gt;S3로 배포한다&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;사실 내가 위에서 문법을 살펴보는 용도로 작성했던 워크플로우 파일은 이미 네번쩨 순서인 빌드 과정까지 설정된 것이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; GitHub Actions Demo 
&lt;span class=&quot;token key atrule&quot;&gt;run-name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; github.actor &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; is testing out GitHub Actions 🚀

&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; main &lt;span class=&quot;token comment&quot;&gt;# 1. main 브랜치에 푸쉬하면&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;Explore-GitHub-Actions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest 
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Check out repository code  
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v3 
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm install &lt;span class=&quot;token comment&quot;&gt;# 2. 의존성을 설치하고&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run test &lt;span class=&quot;token comment&quot;&gt;# 3. 테스트를 실행하고&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run build &lt;span class=&quot;token comment&quot;&gt;# 4. 빌드하고&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# 5. S3로 배포한다... 는 어딨어?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;어려운 부분은 배포 과정에 대한 워크플로우 설정이다. 왜냐면 이 부분에는 aws의 엑세스 키가 필요하기 때문이다. aws s3처럼 자주 사용되는 서비스에 대한 step을 정의해야 할 때는 이미 만들어진 action이 있는지 확인해보면 좋다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/marketplace?type=&quot;&gt;GitHub Marketplace&lt;/a&gt;에서 s3 관련 action을 검색해보니 &lt;a href=&quot;https://github.com/marketplace/actions/s3-sync&quot;&gt;S3 Sync&lt;/a&gt;라는 action이 나왔다. 사용법을 잘 읽어보고 워크플로우 파일에 적용해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; GitHub Actions Demo 
&lt;span class=&quot;token key atrule&quot;&gt;run-name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; github.actor &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; is testing out GitHub Actions 🚀

&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; main &lt;span class=&quot;token comment&quot;&gt;# 1. main 브랜치에 푸쉬하면&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;Explore-GitHub-Actions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest 
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Check out repository code  
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v3 
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm install &lt;span class=&quot;token comment&quot;&gt;# 2. 의존성을 설치하고&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run test &lt;span class=&quot;token comment&quot;&gt;# 3. 테스트를 실행하고&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run build &lt;span class=&quot;token comment&quot;&gt;# 4. 빌드하고&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; jakejarvis/s3&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;sync&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;action@master &lt;span class=&quot;token comment&quot;&gt;# 5. S3로 배포한다.&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;delete &lt;span class=&quot;token comment&quot;&gt;# aws s3 cli에 넘겨줄 옵션&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;AWS_S3_BUCKET&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.AWS_S3_BUCKET &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# s3 버킷 이름&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;# 절대 여기에 aws 엑세스 키를 직접 입력하면 안 된다!!!!!!!!!!!!!!!!!!!&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.AWS_ACCESS_KEY_ID &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# aws 액세스 키&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;# 절대 여기에 aws 시크릿 엑세스 키를 직접 입력하면 안 된다!!!!!!!!!!!!!!!!!!!&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.AWS_SECRET_ACCESS_KEY &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# aws 시크릿 액세스 키 &lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;AWS_REGION&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ap-northeast-2&apos;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# aws 리전&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;SOURCE_DIR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;public&apos;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 업로드할 폴더&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;🚨 절대 워크플로우 파일에 직접 aws 엑세스 키와 시크릿 엑세스 키를 입력하면 안 된다! 🚨&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;${{ secrets. }}&lt;/code&gt;형식의 값들은 워크플로우 파일이 아니라 깃헙 저장소 페이지의 &lt;code class=&quot;language-text&quot;&gt;settings&lt;/code&gt;탭에서 설정해줘야 한다. 설정하는 방법은 &lt;a href=&quot;https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository&quot;&gt;GitHub Actions - Creating encrypted secrets for a repository&lt;/a&gt;를 따라하면 된다.&lt;/p&gt;
&lt;p&gt;위와 같이 설정했으면 내가 의도했던 CI/CD 파이프라인 구축은 완성이다. 실제로 테스트를 해보자.&lt;/p&gt;
&lt;h2&gt;4.5 GitHub Actions로 구축한 CI/CD 파이프라인 테스트&lt;/h2&gt;
&lt;p&gt;현재 aws s3를 통해 배포되고 있는 내 웹사이트는 아래와 같은 상태이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ha-il/ha-il.github.io/assets/108077643/ed0017fa-1444-4439-b21c-1e339379e032&quot; alt=&quot;deploy-three&quot;&gt;&lt;/p&gt;
&lt;p&gt;(&lt;del&gt;또 너냐&lt;/del&gt;...)&lt;/p&gt;
&lt;p&gt;여기에 4번째 문장을 추가하고 커밋한 다음 깃헙 저장소에 푸쉬하면, GitHub Actions가 내 워크플로우 파일을 실행시켜서 자동으로 테스트, 빌드, 배포가 이뤄져야 한다. 확인을 위해서 아래와 같은 과정을 거쳤다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 변경 사항을 저장하고 깃헙 저장소에 푸쉬한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 깃헙 저장소 페이지의 actions 탭을 확인한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ha-il/cra-config/assets/108077643/775ac44f-ce46-43bb-b6b8-d0b6e7860886&quot; alt=&quot;github-actions&quot;&gt;&lt;/p&gt;
&lt;p&gt;actions 탭을 보니 사전에 정의한 워크플로우가 잘 진행되었음을 확인할 수 있었다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. AWS S3로 배포되고 있는 정적 사이트에 접속해본다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;과연 내가 입력한 네번째 문장은 잘 배포되었을까...?&lt;/p&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ha-il/cra-config/assets/108077643/1c1d1b2d-9d84-4694-acf5-f35013bdc4a0&quot; alt=&quot;deploy-four&quot;&gt;&lt;/p&gt;
&lt;p&gt;(&lt;del&gt;짜잔!&lt;/del&gt;...)&lt;/p&gt;
&lt;p&gt;이렇게 깃 푸쉬만으로 테스트, 빌드, 배포를 자동으로 진행할 수 있는 CI/CD 파이프라인을 Github Actions로 구축해봤다.&lt;/p&gt;
&lt;h2&gt;마치며&lt;/h2&gt;
&lt;p&gt;글 제목은 &quot;CI/CD 환경 구축하기&quot;라고 했지만 사실 절반 정도만 구축한 것이다. 왜냐면 CI에 해당하는 테스트 과정이 너무 간소화된 상태로 파이프라인을 구축했기 때문이다. 아직 테스트 코드를 작성해 본 경험이 없기 때문에 이번에는 제대로 다루지 못 했지만, 테스트 코드를 학습하게 되면 CI 과정을 중점으로 새로운 글을 다시 올리겠다.&lt;/p&gt;
&lt;p&gt;그동안 타입스크립트, ESLint, Prettier, Husky, AWS, Github Actions 등 생각보다 많은 것을 다뤘다. 이번 시리즈를 작성하면서 느낀 점은 환경 설정이 꽤 재미있다는 것이다. 파고들면 파고들수록 내가 커스텀할 수 있는 요소들이 나오고, 또 그것을 바로 설정해서 프로젝트에 적용시켜 볼 수 있으니 꽤 재미있게 느껴졌다. 그리고 늘 지나가듯이 들어봤던 용어와 기술들을 이번 기회에 제대로 다뤄봐서 속이 좀 시원하다.&lt;/p&gt;
&lt;p&gt;아무튼 CRA 환경설정 시리즈는 여기서 마무리 짓겠다.&lt;/p&gt;
&lt;p&gt;그럼, 안녕히~👋&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[CRA 환경설정] Husky 환경 설정]]></title><description><![CDATA[이전 글 "[CRA 환경설정] ESLint와 Prettier 환경 설정"에서 이어지는 글입니다. 들어가기 전에 지난 글에서는 ESLint와 Prettier…]]></description><link>https://ha-il.github.io/configure/cra-configure/husky-config/</link><guid isPermaLink="false">https://ha-il.github.io/configure/cra-configure/husky-config/</guid><pubDate>Mon, 28 Aug 2023 15:27:00 GMT</pubDate><content:encoded>&lt;p&gt;이전 글 &lt;a href=&quot;https://ha-il.github.io/configure/cra-configure/eslint/&quot;&gt;&quot;[CRA 환경설정] ESLint와 Prettier 환경 설정&quot;&lt;/a&gt;에서 이어지는 글입니다.&lt;/p&gt;
&lt;h2&gt;들어가기 전에&lt;/h2&gt;
&lt;p&gt;지난 글에서는 ESLint와 Prettier를 설정해봤다. 이번에는 린팅과 포맷팅을 커밋 또는 푸쉬 전에 자동으로 수행할 수 있도록 husky를 설정하는 과정을 다뤄보려고 한다.&lt;/p&gt;
&lt;h2&gt;1. git hook&lt;/h2&gt;
&lt;p&gt;이번 설정의 목적은 커밋과 푸쉬 전에 린팅과 포맷팅을 자동화하기 위함이다. 그렇다면 커밋과 푸쉬 전에 특정한 동작을 수행할 수 있도록 설정해야 하는데, 그 설정을 git hook이라 부른다. git hook 설정 과정은 사전 과정이 필요한데 이 과정이 강제되지 않기 때문에, 사전 설정을 개인의 자율로 맡기게 된다. 이렇게 되면 git hook 설정이 모든 팀원들에게 적용되어 있다는 것을 보장할 수 없기 때문에, 자동으로 git hook을 설정하는 방법이 필요하다. 이 때 필요한 것이 바로 &lt;code class=&quot;language-text&quot;&gt;Husky&lt;/code&gt;라는 패키지이다.&lt;/p&gt;
&lt;h2&gt;2. Husky 🐶&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Modern native git hooks made easy&lt;/p&gt;
&lt;p&gt;Husky improves your commits and more 🐶 woof! (귀여워...😭)&lt;/p&gt;
&lt;p&gt;You can use it to lint your commit messages, run tests, lint code, etc... when you commit or push. Husky supports all Git hooks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://typicode.github.io/husky/&quot;&gt;Husky&lt;/a&gt;는 git hook 설정을 도와주는 패키지이다. 가장 큰 장점은 git hook 설정을 npm install만으로 가능하게 해준다는 것이다. 팀 프로젝트를 할 때, 저장소에서 클론한 후 npm install을 하지 않는 경우는 거의 없다. 이렇게 프로젝트 진행 과정 중에서 반드시 들어가는 npm install 과정에 git hook 설정 과정을 포함시키면서, 모든 팀원이 일관된 git hook 설정을 가질 수 있도록 한다.&lt;/p&gt;
&lt;h3&gt;2.1 Husky 설치 과정&lt;/h3&gt;
&lt;p&gt;설치 과정은 &lt;a href=&quot;https://typicode.github.io/husky/getting-started.html&quot;&gt;husky-Getting started&lt;/a&gt;를 참고했다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. husky를 설치한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install husky --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;2. 아래 명령어를 실행시켜 git hook을 사용할 수 있게 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npx husky install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;3. npm install 할 때 자동으로 git hook을 설정하기 위해 아래와 같이 스크립트를 작성한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// package.json&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;prepare&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;husky install&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;h3&gt;2.2 Husky로 hook 만들기&lt;/h3&gt;
&lt;p&gt;hook을 만들기 전에 생각해봐야할 부분이 있다. 바로 커밋 전(pre-commit), 푸쉬 전(pre-push)에 어떤 행동을 하게 할 것인지를 생각해봐야 한다. 당연히 커밋 전이든 푸쉬 전이든 린팅하는 것이 가장 좋지 않느냐라고 말할 수 있지만, 이 또한 팀원들의 작업 스타일에 따라 다르다.&lt;/p&gt;
&lt;p&gt;예를 들어, eslint 규칙으로 console을 금지했다고 가정해보자. console은 확인 차원에서 많이 쓰기도 하고, 그날 푸쉬 할만큼 작업을 완료하지는 못해서 console을 포함한 채로 커밋을 해야하는 경우가 생길지도 모른다. 이런 상황이 팀에서 자주 발생한다면 커밋 전에는 포맷팅만 체크하고, 푸쉬할 때는 린팅을 체크하는 방식으로 유연하게 훅을 적용할 수도 있다. 이처럼 팀원 또는 개인의 스타일에 따라 어떤 훅을 만들 것인지 결정하면 된다.&lt;/p&gt;
&lt;p&gt;나의 경우 일단 코드 스타일 자체를 좀 빡빡하게 유지시키고 싶다는 생각이 있어서 커밋 전, 푸쉬 전 모두 린팅과 포맷팅을 적용하는 방식으로 훅을 만들어 보려고 한다.&lt;/p&gt;
&lt;p&gt;훅을 만드는 Husky의 명령어는 &lt;code class=&quot;language-text&quot;&gt;husky add &amp;lt;file&gt; [cmd]&lt;/code&gt;의 형식을 가진다. 이 형식으로 hook을 만들어보자.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 먼저 커밋 전(pre-commit) 상황에서 사용할 훅을 만든다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npx husky add .husky/pre-commit &quot;npm run format &amp;amp;&amp;amp; npm run lint&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설치가 잘 진행됐다면 .husky 폴더와 그 안에 pre-commit이라는 파일이 만들어졌을 것이다. 만약 훅의 내용을 바꾸고 싶다면 해당 파일에 들어가서 코드를 수정하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;#!/usr/bin/env sh
. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;

npm run format &amp;amp;&amp;amp; npm run lint  # 여기를 수정하면 된다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;git commit을 통해 hook이 잘 적용되었는지 확인해보자. 잘 적용되었다면 터미널에 훅으로 설정한 명령어들(format, lint)이 실행될 것이다.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;2. 그 다음으로 푸쉬 전(pre-push) 상황에서 사용할 훅을 만든다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npx husky add .husky/pre-push &quot;npm run format &amp;amp;&amp;amp; npm run lint&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마찬가지로 git push를 통해 hook이 잘 적용되었는지 확인해보자.&lt;/p&gt;
&lt;h2&gt;3. lint-staged 적용하기&lt;/h2&gt;
&lt;p&gt;Husky와 더불어 자주 사용되는 패키지가 있어서 소개한다. 바로 &lt;code class=&quot;language-text&quot;&gt;lint-staged&lt;/code&gt;라는 패키지이다. 이 패키지는 이름 그대로 staged된 파일에 대해서만 lint를 실행하기 위해 만들어졌다. 린팅은 많은 과정을 포함한 작업으로 적지 않은 시간이 소요되는데, 전체 파일에 대해서 린팅을 수행할 경우 많은 시간이 든다. 따라서 커밋할 예정인, 즉 staged 상태인 파일에 대해서만 린팅을 수행하는 편이 효율적이다. 한 번 설치해서 사용해보자.&lt;/p&gt;
&lt;p&gt;참고로 이번처럼 CRA를 사용하는 경우라면 &lt;a href=&quot;https://github.com/okonet/lint-staged&quot;&gt;lint-staged 깃헙 저장소&lt;/a&gt;보다 CRA 공식 문서에서 &lt;a href=&quot;https://create-react-app.dev/docs/setting-up-your-editor/&quot;&gt;Create React App-Formatting Code Automatically&lt;/a&gt;를 참고하는 편이 더 이해하기 쉬울 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. lint-staged를 설치한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install --save-dev lint-staged&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;2. package.json 파일에 &quot;lint-staged&quot;를 추가해준다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;주의!: &quot;lint-staged&quot;를 &quot;scripts&quot;에 추가하는 것이 아니다. scripts 밖에 추가한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;lint&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;eslint . --cache&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;prettier . --write --cache&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;prepare&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;husky install&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// scripts 밖에 추가&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;lint-staged&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;src/**/*.{js,jsx,ts,tsx,json,css,scss,md}&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;npm run format&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;npm run lint&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;3. .husky/pre-commit 파일을 수정한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;#!/usr/bin/env sh
. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;

npx lint-staged &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;4. git commit 명령어로 테스트해보자.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;이 구간에서 많은 오류가 발생했는데 전부 명령어를 잘 못 작성해서 발생했다. 내가 에러를 경험한 상황은 이러했다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&quot;lint-staged&quot;에 명령어를 &amp;#x26;&amp;#x26;로 묶어서 작성했을 때 =&gt; &amp;#x26;&amp;#x26;를 인식하지 못한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;lint-staged&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;src/**/*.{js,jsx,ts,tsx,json,css,scss,md}&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;format &amp;amp;&amp;amp; eslint&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&quot;lint-staged&quot;에 명령어를 npm run 없이 작성했을 때 =&gt; 명령어 실행이 안 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;lint-staged&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;src/**/*.{js,jsx,ts,tsx,json,css,scss,md}&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;lint&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아래와 같이 작성하면 오류없이 실행됐다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;lint-staged&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;src/**/*.{js,jsx,ts,tsx,json,css,scss,md}&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;npm run format&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;npm run lint&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;마치며&lt;/h2&gt;
&lt;p&gt;여기까지 설정했다면 내가 계획했던 개발 단계에서의 환경 설정은 끝이다. 이제는 배포 단계에서 적용시킬 CI/CD에 대한 환경 설정이 필요하다. 다음 글에서는 배포와 CI/CD에 대해서 다루겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[CRA 환경설정] ESLint와 Prettier 환경 설정]]></title><description><![CDATA[이전 글 "[CRA 환경설정] 타입스크립트 환경 설정
"에서 이어지는 글입니다. 들어가기 전에 지난 글에서는 타입스크립트 기반으로 CRA 프로젝트를 작성하고 타입스크립트 컴파일러 설정까지 했다. 이번에는 ESLint와 Prettier…]]></description><link>https://ha-il.github.io/configure/cra-configure/eslint/</link><guid isPermaLink="false">https://ha-il.github.io/configure/cra-configure/eslint/</guid><pubDate>Sun, 27 Aug 2023 17:22:00 GMT</pubDate><content:encoded>&lt;p&gt;이전 글 &lt;a href=&quot;https://ha-il.github.io/configure/cra-configure/tsconfig/&quot;&gt;&quot;[CRA 환경설정] 타입스크립트 환경 설정
&quot;&lt;/a&gt;에서 이어지는 글입니다.&lt;/p&gt;
&lt;h2&gt;들어가기 전에&lt;/h2&gt;
&lt;p&gt;지난 글에서는 타입스크립트 기반으로 CRA 프로젝트를 작성하고 타입스크립트 컴파일러 설정까지 했다. 이번에는 ESLint와 Prettier를 설정해보려 한다.&lt;/p&gt;
&lt;h2&gt;1. ESLint와 Prettier란?&lt;/h2&gt;
&lt;p&gt;ESLint와 Prettier를 설명하기 전에 린터와 포맷터에 대해서 알고 갈 필요가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;린터&lt;/strong&gt;: 코드에서 틀린 문법 사항이나 사전에 정의한 코드 스타일을 준수하고 있는지 알려주는 도구&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;포맷터&lt;/strong&gt;: 사전에 정의한 코드 스타일에 맞게 코드를 변환시켜주는 도구&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;린터와 포맷터 모두 코드 스타일 일치에 도움을 주는 도구지만, &lt;strong&gt;린터&lt;/strong&gt;는 스타일에서 벗어난 코드에 대해 에러나 경고 등으로 알려주는 &lt;strong&gt;정적인 방식&lt;/strong&gt;을 취한다면, &lt;strong&gt;포맷터&lt;/strong&gt;는 스타일에서 벗어난 코드를 자동으로 스타일에 맞는 코드로 변환시켜주는 &lt;strong&gt;직접적인 방식&lt;/strong&gt;을 취한다.&lt;/p&gt;
&lt;p&gt;여러 사람이 같이 작업하는 경우 자신의 코딩 방식과 작업 환경에 따라서 코드 스타일이 천차만별인데, 린터와 프리티어를 사용하면 여러 사람이 같이 작업하더라도 &lt;strong&gt;코드 스타일을 일관되게 유지&lt;/strong&gt;할 수 있다는 장점이 있다. 코드 스타일이 일관되면 프로젝트 코드를 읽을 때 &lt;strong&gt;가독성도 상승&lt;/strong&gt;하고, 사전에 미리 코드 스타일을 정의해두면 작업할 때에는 코드 스타일에 대해서 일일히 신경쓰지 않고 작업할 수 있어서 &lt;strong&gt;작업 효율도 상승&lt;/strong&gt;한다.&lt;/p&gt;
&lt;p&gt;자바스크립트 진영에서 자주 사용되는 린터와 포맷터가 바로 &lt;strong&gt;ESLint&lt;/strong&gt;와 &lt;strong&gt;Prettier&lt;/strong&gt;이다.&lt;/p&gt;
&lt;h2&gt;2. ESLint&lt;/h2&gt;
&lt;h3&gt;2.1 ESLint 설치 과정&lt;/h3&gt;
&lt;p&gt;이제 ESLint를 설치해보자. 참고로 이번 설치 과정은 &lt;a href=&quot;https://typescript-eslint.io/getting-started&quot;&gt;typescript-eslint의 getting-started&lt;/a&gt;를 참고해서 진행했다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 아래 명령어로 eslint와 타입스크립트, 플러그인 등을 설치한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;참고로, 타입스크립트 기반으로 CRA 프로젝트를 생성했다면 이미 설치되어 있기 때문에 이 과정은 생략해도 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install --save-dev @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint typescript&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;2. 루트 디렉터리에 ESLint 설정 파일인 &lt;code class=&quot;language-text&quot;&gt;.eslintrc.cjs&lt;/code&gt; 파일을 생성하고 아래 코드를 입력한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;참고로, ESM(ECMAScript Modules)를 사용하지 않는 경우 .eslintrc 파일의 확장자를 &lt;code class=&quot;language-text&quot;&gt;.eslintrc.js&lt;/code&gt;로 해도 괜찮다. 자세한 내용은 &lt;a href=&quot;https://eslint.org/docs/latest/use/configure/configuration-files&quot;&gt;ESLint - Configuration Files&lt;/a&gt;을 참조하기 바란다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// `.eslintrc.cjs` &lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* eslint-env node */&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;eslint:recommended&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;plugin:@typescript-eslint/recommended&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// &apos;eslint:recommended&apos;: ESLint에 내장된 권장 구성 설정.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// &apos;plugin:@typescript-eslint/recommended&apos;: eslint:recommended와 비슷하지만 플러그인에서 타입스크립트 관련 규칙을 사용한다는 점이 다름&lt;/span&gt;
  
  &lt;span class=&quot;token literal-property property&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@typescript-eslint/parser&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;token comment&quot;&gt;// parser: 위와 같이 설정하지 않을 경우, ESLint가 TypeScript 코드를 일반 JavaScript처럼 구문 분석하려고 시도할 때 오류가 발생.&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;@typescript-eslint&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;token comment&quot;&gt;// 코드베이스 내에서 typescript-eslint 규칙을 사용할 수 있게 설정&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ESLint가 이 루트 디렉터리 밖에서 구성 파일을 검색하면 안 된다는 것을 명시적으로 표시&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;3. ESLint를 실행하기 위해 아래 명령어를 입력한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npx eslint .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 이 상태로 입력하면 실행은 되지만 아무런 메시지가 뜨지 않아서 설치가 잘 되었는지 알 수가 없다. 테스트를 위해 일부러 ESLint 규칙을 어기는 코드를 입력해보자. 아래와 같이 변수를 var로 선언하고 참조하지 않으면 에디터 상에서 에러 1개와 경고 1개가 뜬다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// App.tsx&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Unexpected var, use let or const instead. eslint(no-var)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//&apos;a&apos; is assigned a value but never used. eslint(@typescript-eslint/no-unused-vars)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 상태로 &lt;code class=&quot;language-text&quot;&gt;npx eslint .&lt;/code&gt; 명령어를 입력하면 아래와 같은 에러 메시지가 나온다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;../cra-config/src/App.tsx
  error    Unexpected var, use let or const instead  no-var
  warning  &apos;a&apos; is assigned a value but never used    @typescript-eslint/no-unused-vars

✖ 2 problems (1 error, 1 warning)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 결과가 나오면 ESLint가 규칙 위반을 잘 잡아내고 있다는 것으로, ESLint가 잘 작동하고 있음을 확인할 수 있다.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;팁!: 혹시 VSCode에서 파일을 저장할 때 ESLint 규칙에 따라 자동 변환 된다면?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;VSCode에서 var로 변수를 선언하고 저장할 때마다 자동으로 const로 바뀐다면, settings.json 파일에서 아래와 같이 옵션의 값을 false로 바꿔주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// settings.json&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;editor.codeActionsOnSave&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;source.fixAll.eslint&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;반대로, 파일 저장시 자동으로 ESLint 규칙에 맞게 자동으로 코드를 수정하고 싶다면 해당 옵션을 true로 바꾸면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// settings.json&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;editor.codeActionsOnSave&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;source.fixAll.eslint&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.2 ESLint 규칙(rules) 설정하기&lt;/h3&gt;
&lt;p&gt;위에서 생성했던 &lt;code class=&quot;language-text&quot;&gt;.eslintrc.cjs&lt;/code&gt; 파일을 확인해보면 아무런 규칙도 설정되어 있지 않다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// `.eslintrc.cjs` &lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* eslint-env node */&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;eslint:recommended&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;plugin:@typescript-eslint/recommended&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  
  &lt;span class=&quot;token literal-property property&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@typescript-eslint/parser&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;@typescript-eslint&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;token literal-property property&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 eslint 명령어를 돌렸을 때 &apos;no-var&apos;와 &apos;@typescript-eslint/no-unused-vars&apos; 규칙에 위반됐다는 메시지를 받았다. 이 규칙들은 &apos;extends&apos;에 추가된 &lt;code class=&quot;language-text&quot;&gt;&apos;eslint:recommended&apos;&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;&apos;plugin:@typescript-eslint/recommended&apos;&lt;/code&gt;라는 설정에서 나온 것이다. 이 설정들은 자주 사용되는 규칙들을 모아뒀기 때문에 그대로 사용해도 무리는 없지만, 내 맘대로 바꾸고 싶은 규칙도 있을 수 있다. 그럴 때는 .eslintrc.cjs에서 &lt;code class=&quot;language-text&quot;&gt;rules&lt;/code&gt; 속성을 추가해주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// `.eslintrc.cjs` &lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* eslint-env node */&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;eslint:recommended&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;plugin:@typescript-eslint/recommended&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@typescript-eslint/parser&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;@typescript-eslint&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string-property property&quot;&gt;&apos;no-var&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;warn&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// var는 경고만!&lt;/span&gt;
    &lt;span class=&quot;token string-property property&quot;&gt;&apos;@typescript-eslint/no-unused-vars&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;off&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 선언했지만 참조 안 하는 변수는 허용!&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 설정하고 아래 코드를 입력해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// App.tsx&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 &lt;code class=&quot;language-text&quot;&gt;npx eslint .&lt;/code&gt; 명령어를 입력해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;../cra-config/src/App.tsx
warning  Unexpected var, use let or const instead  no-var

✖ 1 problem (0 errors, 1 warning)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;rules에서 설정한대로 var를 사용하면 경고만 뜨고, 참조하지 않은 변수의 경우 아무런 메시지도 뜨지 않는다. 이렇게 rules를 이용해서 세부적인 규칙을 설정할 수 있다.&lt;/p&gt;
&lt;p&gt;하지만 &lt;a href=&quot;https://eslint.org/docs/latest/rules/&quot;&gt;ESLint-Rules Reference&lt;/a&gt;를 보면 규칙이 정말 많다. 이 모든 규칙을 전부 수동으로 설정하는 것보다, 이미 규칙들이 설정되어 있는 설정 파일을 다운 받아서 사용하고, 맘에 들지 않는 규칙만 rules를 이용해서 수정하는 방식을 추천한다.&lt;/p&gt;
&lt;p&gt;스타일 가이드를 검색해보면 에어비엔비 스타일 가이드(Airbnb Style Guide)가 가장 많이 나온다. 대기업의 개발팀에서는 어떤 스타일로 코딩하는지 궁금하기도 하고, 개인이 설정한 파일보다 기업에서 여러명이 합의해서 만들어낸 스타일 규칙이 더 믿을만 하다고 생각해서 이번 프로젝트에 도입해보려고 한다. 에어비엔비 스타일 가이드의 규칙이 궁금하다면 &lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;Airbnb Style Guide 깃헙 저장소&lt;/a&gt;를 확인해보자.&lt;/p&gt;
&lt;h3&gt;2.3 eslint-config-airbnb&lt;/h3&gt;
&lt;p&gt;npm으로 eslint-config-airbnb를 설치하면 에어비엔비 스타일 가이드를 설치하여 프로젝트에 적용시킬 수 있다. 이번 프로젝트는 타입스크립트를 적용할 예정이기 때문에, 타입스크립트 가이드까지 같이 설치해보자.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 먼저 eslint-config-airbnb를 설치한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npx install-peerdeps --dev eslint-config-airbnb
# -peerdeps는 다른 패키지와 호환 가능한 버전으로 패키지를 설치하는 옵션&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;2. 다음으로 eslint-config-airbnb-typescript를 설치한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install eslint-config-airbnb-typescript --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;3. .eslintrc.cjs 파일에서 extends에 &apos;airbnb&apos;와 &apos;airbnb-typescript&apos;를 추가한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// `.eslintrc.cjs` &lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* eslint-env node */&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 추가!&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;eslint:recommended&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;plugin:@typescript-eslint/recommended&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;airbnb&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;airbnb-typescript&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@typescript-eslint/parser&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;@typescript-eslint&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;4. .eslintrc.cjs 파일에서 아래와 같이 parserOptions을 추가한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// `.eslintrc.cjs` &lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* eslint-env node */&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;eslint:recommended&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;plugin:@typescript-eslint/recommended&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;airbnb&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;airbnb-typescript&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@typescript-eslint/parser&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 추가!&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;parserOptions&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./tsconfig.json&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// tsconfig.json 파일 위치에 따라 다를 수 있음&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;@typescript-eslint&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 때 .eslintrc.cjs 파일에서 &apos;Parsing error: ESLint was configured to run on ...&apos; 에러가 발생할 수 있다. 이러한 오류는 TypeScript 구성에 포함되지 않은 파일에 대한 타입 정보를 생성하도록 ESLint 구성이 요청하기 때문에 발생한다.&lt;/p&gt;
&lt;p&gt;이럴 때는 .eslintrc.cjs 파일만 린팅을 적용하지 않으면 된다. 이럴 때 사용할 수 있는 방법은 &lt;code class=&quot;language-text&quot;&gt;.eslintignore&lt;/code&gt; 파일을 생성하거나 .eslintrc.cjs파일에 &lt;code class=&quot;language-text&quot;&gt;ignorePatterns&lt;/code&gt; 속성을 추가하는 것이다.&lt;/p&gt;
&lt;p&gt;나는 &lt;code class=&quot;language-text&quot;&gt;.eslintignore&lt;/code&gt; 파일을 따로 생성했다. ESLint 파일의 코드가 지금은 얼마 안 되지만, 속성이나 룰을 추가하면 할 수록 양이 많아진다. 린팅하고 싶지 않은 파일을 추가하기 위해서 긴 코드를 뒤적이는 것보다, 다른 파일로 분리할 수 있다면 분리해서 관리하는 것이 더 효율적이라 판단했다.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;5. &lt;code class=&quot;language-text&quot;&gt;.eslintignore&lt;/code&gt; 파일을 생성하고 아래와 같이 작성한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.eslintrc.cjs
node_modules &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;node_modules의 경우에도 린팅이 필요없기 때문에 같이 추가해줬다.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;6. 아래 명령어를 실행해서 린팅이 잘 되는지 확인하자.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npx eslint . --ext .js,.jsx,.ts,.tsx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CRA 초기 설정을 한 상태에서 아무런 수정없이 에어비엔비 스타일 가이드를 적용해서 린팅하면 에러 메시지가 몇 개 뜰 것이다. 에러메시지가 떴다면 에어비엔비 스타일 가이드가 잘 적용된 것이다.&lt;/p&gt;
&lt;h3&gt;2.4 ESLint CLI&lt;/h3&gt;
&lt;p&gt;바로 위의 eslint 명령어를 보면 &lt;code class=&quot;language-text&quot;&gt;--ext&lt;/code&gt;라는 명령어 옵션을 확인할 수 있다. 이렇게 eslint 명령어에도 다양한 옵션이 있다. 이번에는 실제 프로젝트에서 사용했던 옵션만 소개하겠다. 나머지 옵션은 &lt;a href=&quot;https://eslint.org/docs/latest/use/command-line-interface&quot;&gt;ESLint - Command Line Interface Reference&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;--ext&lt;/strong&gt;: 이 옵션을 사용하면 지정한 디렉터리에서 대상 파일을 검색할 때 ESLint가 사용하는 파일 확장명을 지정할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;--fix&lt;/strong&gt;: 이 옵션은 ESLint가 가능한 한 많은 문제를 수정하도록 지시한다. 실제 파일 자체에 대한 수정이 이루어지며 수정되지 않은 나머지 문제만 출력된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;--cache&lt;/strong&gt;: 변경된 파일에 대해서만 작업할 수 있도록 처리된 파일에 대한 정보를 저장한다. 이 옵션을 활성화하면 변경된 파일만 린팅되도록 하여 ESLint의 런타임 성능을 크게 향상시킬 수 있다. 캐시는 기본적으로 .eslintcache에 저장된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;참고로, --cache 옵션을 사용한다면, .gitignore 파일에 .eslintcache를 추가해줘야 한다. 내가 돌린 eslint에 대한 캐싱 정보는 다른 사람에게 필요 없기 때문이다.&lt;/p&gt;
&lt;h3&gt;2.5 ESLint 스크립트 만들기&lt;/h3&gt;
&lt;p&gt;자신이 원하는 ESLint CLI 옵션을 추가해서 package.json 파일에 lint 스크립트를 추가해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;lint&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;eslint . --cache&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 설정하면 &lt;code class=&quot;language-text&quot;&gt;npm run lint&lt;/code&gt; 명령어로 린팅을 진행할 수 있다.&lt;/p&gt;
&lt;h2&gt;3. Prettier&lt;/h2&gt;
&lt;h3&gt;3.1 ESLint가 있는데 굳이 Prettier를 써야 할까?&lt;/h3&gt;
&lt;p&gt;사실, ESLint에 각종 규칙을 넣고, VSCode 익스텐션을 쓰거나, --fix 옵션 등을 쓰면 Prettier가 필요 없지 않을까라는 생각도 든다. 하지만 Prettier 같은 포맷터를 쓰기를 추천한다.&lt;/p&gt;
&lt;p&gt;포맷터의 경우 코드에서 문법, 로직, 이름 지정 등에 관여하지 않고, 공백이나 줄바꿈 등의 문제에만 관여하기 때문에 일반적으로는 매우 빠르게 실행된다. 반면 린터는 검사해야할 규칙이 많고, 중간 작업(분석, 검사, 보고, 수정)이 많기 때문에 포맷터에 비해 느리다.&lt;/p&gt;
&lt;p&gt;따라서, 공백이나 줄바꿈 등의 서식에 대한 규칙은 포맷터에 맡기고, 로직이나 이름 지정 등에 대한 규칙은 린터에게 맡기는 것이 작업 효율성을 높일 수 있다. 이에 대한 자세한 내용은 &lt;a href=&quot;https://typescript-eslint.io/linting/troubleshooting/formatting/&quot;&gt;typescript-eslint: What About Formatting?&lt;/a&gt;에서 살펴볼 수 있다.&lt;/p&gt;
&lt;h3&gt;3.2 Prettier 설치하기&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. &lt;code class=&quot;language-text&quot;&gt;prettier&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;eslint-config-prettier&lt;/code&gt;를 설치한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install --save-dev prettier eslint-config-prettier&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;eslint-config-prettier는 왜 설치할까? extends에는 많은 eslint 규칙들이 들어가는데, 간혹 eslint 규칙 중에 서식에 대한 규칙이 포함된 경우가 있다. 그 상태에서 Prettier를 같이 사용하면 Prettier의 규칙과 ESLint의 규칙이 충돌할 수 있다. eslint-config-prettier를 설치하고 적용하면 ESLint의 규칙 중에서 서식과 관련된 규칙을 비활성화한다. 따라서 Prettier와 ESLint의 역할을 확실하게 나눌 수 있게 된다.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;2. &lt;code class=&quot;language-text&quot;&gt;.eslintrc.cjs&lt;/code&gt; 파일의 extends에 &apos;prettier&apos;를 추가한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// `.eslintrc.cjs` &lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* eslint-env node */&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;eslint:recommended&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;plugin:@typescript-eslint/recommended&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;airbnb&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;airbnb-typescript&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 추가!&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;prettier&apos;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@typescript-eslint/parser&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;parserOptions&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./tsconfig.json&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;@typescript-eslint&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;3. 루트 디렉터리에 &lt;code class=&quot;language-text&quot;&gt;.prettierrc.cjs&lt;/code&gt; 파일을 생성하고 아래와 같이 코드를 작성한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// prettier.config.js, .prettierrc.js, prettier.config.cjs, or .prettierrc.cjs&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/** @type {import(&quot;prettier&quot;).Config} */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;tabWidth&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 들여쓰기 수준당 공백 개수를 지정.&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;semi&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 문 끝 &lt;span class=&quot;token comment&quot;&gt;// 문 끝에 세미콜론을 인쇄.&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;singleQuote&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 큰따옴표 대신 작은따옴표를 사용.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;나의 경우 eslint 설정 파일도 확장자를 cjs로 했기 때문에 Prettier 설정 파일도 cjs로 생성했으나, 프로젝트에 따라서 확장자를 달리할 수 있다. 자세한 내용은 &lt;a href=&quot;https://prettier.io/docs/en/configuration&quot;&gt;Prettier-Configuration File&lt;/a&gt;을 참고하기 바란다.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;&lt;strong&gt;4. Prettier가 잘 적용되었는지 확인해보자.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;확인을 위해 App.tsx 파일의 코드를 아래와 같이 바꿔봤다. return문 끝에 세미콜론을 제거하고 말도 안되는 공백을 넣어봤다.&lt;/p&gt;
&lt;p&gt;(참고로 에디터 설장 때문에 저장할 때마다 자동으로 포맷팅된다면, VSCode의 경우 settings.json 파일에서 &lt;code class=&quot;language-text&quot;&gt;&quot;editor.formatOnSave&quot;&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;editor.codeActionsOnSave&lt;/code&gt; 기능을 잠시 꺼보자.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;App&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Hello Prettier!&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 상태로 아래 명령어를 돌려보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npx prettier . --write &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Prettier가 잘 적용됐다면 아래와 같이 코드가 포맷팅 될 것이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;App&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Hello Prettier!&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3.3 Prettier 규칙&lt;/h3&gt;
&lt;p&gt;Prettier는 ESLint에 비해 규칙이 많지 않아서 공식 문서를 한 번 읽어보고 맘에 드는 규칙을 골라보는 것도 괜찮다. 아래 항목은 내가 공식문서를 읽고 실제로 쓸 것 같은 규칙들을 추린 것이며, 모든 규칙이 궁금하다면 &lt;a href=&quot;https://prettier.io/docs/en/options&quot;&gt;Prettier-Options&lt;/a&gt;를 확인해보자.&lt;/p&gt;
&lt;p&gt;참고로 아래 옵션에 값으로 설정된 모든 값들은 Prettier 기본 값이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;PrintWidth&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 프린터가 래핑할 줄 길이를 지정합니다.&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;tabWidth&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 들여쓰기 수준당 공백 개수를 지정합니다.&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;useTabs&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 공백 대신 탭으로 줄을 들여쓰기합니다.&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;semi&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 문 끝에 세미콜론을 인쇄합니다.&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;singleQuote&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 큰따옴표 대신 작은따옴표를 사용합니다.&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;quoteProps&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;as-needed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 객체의 프로퍼티가 따옴표로 묶일 때 변경합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/*
      as-needed - 필요한 경우에만 개체 속성 주위에 따옴표를 추가합니다.
      consistent- 객체에서 하나 이상의 프로퍼티에 따옴표가 필요한 경우 모든 프로퍼티를 따옴표로 묶습니다.
      preserve - 객체 속성에서 따옴표의 입력 사용을 존중합니다.
    */&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;jsxSingleQuote&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// JSX에서는 큰따옴표 대신 작은따옴표를 사용합니다.&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;trailingComma&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;all&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 여러 줄로 쉼표로 구분된 구문 구조에서는 가능한 한 후행 쉼표를 인쇄합니다. (예를 들어 한 줄 배열에는 후행 쉼표가 표시되지 않습니다.)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/*
      all - 가능한 경우 후행 쉼표 사용
      es5 - ES5에서 유효한 경우 후행 쉼표(객체, 배열 등). TypeScript의 유형 매개변수에는 후행 쉼표가 없습니다.
      none - 후행 쉼표가 없습니다.
    */&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;bracketSpacing&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 객체 리터럴의 괄호 사이에 공백을 인쇄합니다.&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;bracketSameLine&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 여러 줄로 된 HTML(HTML, JSX, Vue, Angular) 요소의 &gt;를 다음 줄에 단독으로 두지 않고 마지막 줄 끝에 배치합니다(자체 닫는 요소에는 적용되지 않음).&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;arrowParens&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;always&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 단독 화살표 함수 매개변수 주위에 괄호를 넣습니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/*
      always - 항상 포함
      avoid - 가능하면 생략
    */&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;singleAttributePerLine&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HTML, Vue 및 JSX에서 한 줄당 단일 속성을 적용합니다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3.4 Prettier CLI&lt;/h3&gt;
&lt;p&gt;Prettier가 잘 적용되었는지 확인하기 위해 사용했던 명령어를 보면 &lt;code class=&quot;language-text&quot;&gt;--write&lt;/code&gt;라는 옵션을 확인할 수 있다. 이처럼 Prettier에도 다양한 CLI가 있는데, 내가 실제로 사용해봤던 옵션 위주로 설명하겠다. 나머지 옵션이 궁금하다면 &lt;a href=&quot;https://prettier.io/docs/en/cli&quot;&gt;Prettier-CLI&lt;/a&gt;를 참고하기 바란다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;--write&lt;/strong&gt;: Prettier 규칙에 따라 모든 파일을 제자리에 다시 작성. (Prettier를 실행하면 자동으로 코드를 고쳐준다는 의미.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;--cache&lt;/strong&gt;: 변경 사항이 있는 파일에 대해서만 포맷팅. (캐시 파일은 node_modules 안에 있기 때문에 ESLint와 달리 캐시 파일을 .gitignore에 추가할 필요가 없음)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.5 Prettier 스크립트 만들기&lt;/h3&gt;
&lt;p&gt;ESLint처럼 Prettier 또한 스크립트를 만들어 두려고 한다. 자신이 원하는 Prettier CLI 옵션을 추가해서 package.json 파일에 format 스크립트를 추가해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;lint&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;eslint . --cache&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;prettier . --write --cache&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 설정하면 &lt;code class=&quot;language-text&quot;&gt;npm run format&lt;/code&gt; 명령어로 포맷팅을 진행할 수 있다.&lt;/p&gt;
&lt;h2&gt;4. VSCode 익스텐션 쓰면되는데 왜 이렇게 까지 해야하나요?&lt;/h2&gt;
&lt;p&gt;사실 VSCode를 사용하는 사람 중에 Prettier나 ESLint 익스텐션을 사용하지 않는 사람은 거의 없을 것이다. 이 글에서 다룬 것처럼 힘들게 ESLint와 Prettier를 설정해주지 않아도 작업에도 문제없고, 코드 포맷팅에도 문제가 없을 것이다. 하지만 프로젝트가 팀 단위로 가게 되면 이러한 환경설정이 필요해진다. 모든 팀원의 컴퓨터가 나와 같은 로컬 환경이 아니기 때문에 얼마든지 변수가 발생할 수 있다. 따라서 코드 에디터의 익스텐션이 아니라 설정 파일을 따로 만들어서 공유하면 로컬 환경이 다르더라도 동일한 규칙을 가져갈 수 있다. 하지만 이런 의문이 생길 수도 있다.&lt;/p&gt;
&lt;p&gt;&quot;규칙을 파일로 설정하는 것까지는 오케이. 그런데 왜 스크립트까지 설정하나요?&quot;&lt;/p&gt;
&lt;p&gt;스크립트를 설정하는 이유는 린팅과 포맷팅을 자동화하기 위해서다. 혼자 작업할 경우 파일을 저장할 때마다 린팅과 포맷팅이 이뤄지도록 VSCode 익스텐션을 쓰면 되기 때문에 자동화의 필요성을 느끼지 못할 수 있다. 하지만 이게 팀 프로젝트라고 생각했을 때, 린팅과 포맷팅이 되지 않은 코드의 커밋 또는 푸쉬가 팀 레포지토리로 들어온다고 생각해보자. 스타일이 일치되지 않은 코드를 허가하고 싶지는 않을 것이다. 바로 그 때, 커밋을 하고 푸쉬를 하는 바로 그 때 린팅과 포맷팅을 자동으로 처리하기 위해서 굳이 스크립트를 작성한 것이다.&lt;/p&gt;
&lt;p&gt;이렇게 커밋과 푸쉬 전에 린팅와 포맷팅을 강제할 수 있는 방법은 &lt;code class=&quot;language-text&quot;&gt;git hook&lt;/code&gt;을 이용하는 것이다. 이에 대해서는 다음 글에서 다루겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[CRA 환경설정] 타입스크립트 환경 설정]]></title><description><![CDATA[작성 계기 원티드 프리온보딩 프론트엔드 과정에서 ESLint, Prettier, Husky로 프로젝트 환경 설정하는 방법을 배웠다. 해당 과정에서는 JavaScript…]]></description><link>https://ha-il.github.io/configure/cra-configure/tsconfig/</link><guid isPermaLink="false">https://ha-il.github.io/configure/cra-configure/tsconfig/</guid><pubDate>Sat, 26 Aug 2023 16:47:00 GMT</pubDate><content:encoded>&lt;h2&gt;작성 계기&lt;/h2&gt;
&lt;p&gt;원티드 프리온보딩 프론트엔드 과정에서 ESLint, Prettier, Husky로 프로젝트 환경 설정하는 방법을 배웠다. 해당 과정에서는 JavaScript 기반으로 환경을 설정했지만, 사실 요즘 타입스크립트를 쓰지 않는 경우가 거의 없다. 앞으로의 프로젝트도 타입스크립트로 진행할 확률이 높기 때문에, 우선 타입스크립트 환경 설정을 먼저 하려고 한다.&lt;/p&gt;
&lt;p&gt;환경 설정 이후에 정적 페이지를 AWS S3에 올리는 연습도 할 예정이라, 빠르게 정적페이지를 빌드할 수 있는 CRA를 선택했고, CRA 초기 환경에서부터 다른 설정들을 조금씩 더해볼 것이다.&lt;/p&gt;
&lt;h2&gt;1. 타입스크립트 기반의 CRA 프로젝트 생성하기&lt;/h2&gt;
&lt;p&gt;우선 &lt;a href=&quot;https://create-react-app.dev/docs/adding-typescript&quot;&gt;CRA 공식문서&lt;/a&gt;를 보면 CRA 프로젝트에 타입스크립트를 추가하는 방법을 설명하고 있다. 이번 글에서는 처음부터 타입스크립트 기반으로 CRA를 설치하는 방법으로 진행하지만, 이미 존재하는 CRA 프로젝트에 타입스크립트를 추가하는 방법도 있으니 공식문서를 확인해보기 바란다.&lt;/p&gt;
&lt;p&gt;일단 아래의 명령어를 실행한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npx create-react-app my-app --template typescript&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실행하고 CRA 프로젝트를 확인해보면 &lt;code class=&quot;language-text&quot;&gt;tsconfig.json&lt;/code&gt;이라는 파일을 확인할 수 있다. 이 파일은 타입스크립트 프로젝트가 어떻게 컴파일될지 세부적인 옵션을 정의하는 파일이다. (타입스크립트로 컴파일하면 자바스크립트 파일이 생성된다.)&lt;/p&gt;
&lt;h2&gt;2. tsconfig.json 파일 살펴보기&lt;/h2&gt;
&lt;p&gt;tsconfig.json 파일은 처음에는 아래와 같이 작성되어있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// tsconfig.json&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 컴파일러 옵션&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;es5&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 컴파일 결과물에 적용시킬 자바스크립트 스펙.&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;lib&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dom&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dom.iterable&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;esnext&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 브라우저 DOM API, 자바스크립트 내장 API의 타입 선언 파일.&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;allowJs&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 자바스크립트 파일을 함께 사용하는 것을 허용,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;skipLibCheck&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 타입 정의 파일의 타입 체크를 스킵.&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;esModuleInterop&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 컴파일러의 동작을 변경하여 타입스크립트가 CommonJS/AMD/UMD를 ES6 모듈과 유사하게 취급해서 발생하는 문제를 해결.&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;allowSyntheticDefaultImports&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;strict&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 엄격한 체크 여부.&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;forceConsistentCasingInFileNames&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 파일 이름에 일관된 대소문자 사용 강제.&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;noFallthroughCasesInSwitch&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 스위치 문 안에 비어 있지 않은 모든 케이스에 break, return 또는 throw가 포함되어 있는지 확인&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;esnext&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 프로그램의 모듈 시스템을 설정. 최신 노드 프로젝트에는 &quot;nodeNext&quot;도 고려 가능.&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;moduleResolution&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 모듈 해석(각 import가 어떤 모듈을 가리키는지 해석하는 과정) 전략 설정.&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;resolveJsonModule&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// JSON을 가져오고 해당 JSON 파일의 유형의 유효성 검사 가능&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;isolatedModules&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 트랜스파일러(ex.바벨)을 사용할 때, 단일 파일 트랜스파일 프로세스에서 올바르게 해석할 수 없는 특정 코드를 작성하는 경우 TypeScript에서 경고하도록 지시.&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;noEmit&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 컴파일러 출력 파일(ex.자바스크립트 파일)을 내보내지 않음.&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;jsx&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react-jsx&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 컴파일 결과물에 적용시킬 jsx 변환 형식.&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/* CRA 초기 설정에는 없지만 알아두면 좋은 옵션들
    &quot;sourceMap&quot;: true, // 컴파일된 자바스크립트 파일의 에러를 타입스크립트 파일에 표시해줌. 디버깅에 도움.
    &quot;baseUrl&quot;: &quot;src&quot;, //모듈 해석 기준 경로 지정. 다른 폴더의 파일 임포트 시 baseUrl 기준으로 경로 설정. 경로 간결해짐.
    &quot;paths&quot;: {
      &quot;api&quot;: [&quot;api/*&quot;] // paths 속성의 경로는 baseUrl로 시작하게 됨. 경로 간결해짐.
    },
    &quot;noUnusedParameters&quot;: true // 함수에서 사용하지 않는 매개변수에 대한 오류 표시. */&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 루트 옵션&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;include&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 타입스크립트 컴파일 대상 파일의 패턴을 지정하는 속성.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;별도로 지정하고 싶은 옵션이 없다면, 처음 CRA 생성 시 만들어진 tsconfig.json의 옵션을 그대로 따르면 된다. 하지만 개인적으로 바꾸고 싶은 옵션이나, 팀원 간 상의를 통해 수정하고 싶은 옵션이 있다면 위 예시를 참고하여 tsconfig.json 파일에서 옵션을 수정하면 된다. 위 예시에서는 실전에서 쓸만 할 것이라 판단되는 옵션만 작성했다. 다른 옵션을 알고 싶다면 타입스크립트 &lt;a href=&quot;https://www.typescriptlang.org/tsconfig&quot;&gt;공식 문서&lt;/a&gt;를 확인하기 바란다.&lt;/p&gt;
&lt;h3&gt;2.1 질문: strict 속성을 true 설정하고 하위 속성 중 하나를 false로 하면 적용될까?&lt;/h3&gt;
&lt;p&gt;tsconfig.json 파일을 보면, 컴파일러 옵션에 strict 속성이 있다. strict 속성을 true로 설정하면 아래의 속성들도 true로 설정된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// tsconfig.json&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;strict&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;token comment&quot;&gt;/*
    &quot;alwaysStrict&quot;: true // use strict 모드로 파일을 컴파일하고, 컴파일한 파일 위에 &apos;use strict&apos; 코드를 추가.
    &quot;noImplicitAny&quot;: true // 타입 정의가 안 된 코드에서 경고를 표시하는 옵션. any 타입으로라도 명시해야 함.
    &quot;noImplicitThis&quot;: true // this 타입이 암묵적으로 any 타입을 가리키면 에러를 표시.
    &quot;strictBindCallApply&quot;: true // 자바스크립트의 call(), bind(), apply() API를 사용할 때 인자 타입이 적절한지 검사하는 옵션.
    &quot;strictFunctionTypes&quot;: true // 함수의 파라미터 타입을 엄격하게 검사하는 옵션.
    &quot;strictNullChecks&quot;: true // null과 undefined 값이 모두 타입으로 취급되도록 타입 검사 수준을 높이는 옵션.
    &quot;strictPropertyInitialization&quot;: true // 클래스 안에서 속성 타입이 정의되고 생성자에서 초기화까지 되어 있는지 검사하는 옵션.
    &quot;useUnknownInCatchVariables&quot;: true // try catch 구문에서 catch err 파라미터 타입을 unknown으로 변환해주는 옵션.
    */&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;stirct 속성은 true로 설정하되, noImplicitAny 속성만 false로 설정하는 것이 가능할까?&lt;/p&gt;
&lt;p&gt;먼저, stirct 속성만 true 설정해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// tsconfig.json&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;strict&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그러면 아래 코드는 에러가 발생한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arg &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; arg&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Error: Parameter &apos;arg&apos; implicitly has an &apos;any&apos; type.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번에는, stirct 속성은 true, noImplicitAny 속성은 false로 해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// tsconfig.json&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;strict&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;token property&quot;&gt;&quot;noImplicitAny&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그러면 에러 또는 경고가 발생하지 않는다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ts&quot;&gt;&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arg &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; arg&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 에러나 경고는 발생하지 않지만 메시지를 확인할 수 있음&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Parameter &apos;arg&apos; implicitly has an &apos;any&apos; type, but a better type may be inferred from usage.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 strict 속성의 하위 속성 중에서 원하지 않는 옵션은 개별적으로 끌 수 있다.&lt;/p&gt;
&lt;h2&gt;3. 타입스크립트 프로젝트에서 외부 라이브러리 사용하기&lt;/h2&gt;
&lt;p&gt;타입스크립트 프로젝트에서 외부 라이브러리를 사용하려면 해당 라이브러리의 &lt;strong&gt;타입 선언 파일&lt;/strong&gt;이 필요하다. 타입 선언 파일이란 &lt;strong&gt;d.ts&lt;/strong&gt; 확장자를 갖는 타입스크립트 파일을 말한다. 프로젝트에서 자주 사용되는 공통 타입이나 프로젝트 전반에 걸쳐 사용하는 라이브러리 타입을 정의하는 파일이다.&lt;/p&gt;
&lt;p&gt;외부 라이브러리의 타입 선언 파일에 대해서는 다음과 같은 3가지 경우가 있을 수 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;타입 선언 파일이 &lt;strong&gt;DefinitelyTyped&lt;/strong&gt; 깃헙 저장소에 있는 경우.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;타입 선언 파일이 &lt;strong&gt;라이브러리에 내장&lt;/strong&gt;되어 있는 경우.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;타입 선언 파일을 &lt;strong&gt;직접 작성&lt;/strong&gt;해야 하는 경우.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;3.1 DefinitelyTyped&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped&quot;&gt;DefinitelyTyped&lt;/a&gt; 깃헙 저장소는, 각종 자바스크립트 라이브러리의 타입 정의 파일을 보관하는 곳이다. 내가 사용하는 라이브러리의 이름을 검색하면 타입 정의 파일 찾을 수 있다.&lt;/p&gt;
&lt;p&gt;DefinitelyTyped에 내가 원하는 라이브러리의 타입 정의 파일이 있다면, 아래의 명령어를 입력해서 쉽게 설치할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install --save-dev @types/라이브러리이름

# ex. npm install --save-dev @types/node
# ex. npm install --save-dev @types/jquery&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;내가 사용할 라이브러리의 타입 정의 파일이 DefinitelyTyped에 존재하는 지 알 수 있는 더 쉬운 방법은 &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;에 라이브러리를 검색해보는 것이다. 만약 DefinitelyTyped에 존재한다면 라이브러리 이름 옆에 &lt;strong&gt;DT&lt;/strong&gt;라는 문자가 표시되어 있다.&lt;/p&gt;
&lt;h3&gt;3.2 라이브러리에 내장&lt;/h3&gt;
&lt;p&gt;라이브러리에 따라서 타입 정의 파일이 내장되어 있는 경우도 있다. &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;에 검색했을 때, 라이브러리 이름 옆에 &lt;strong&gt;TS&lt;/strong&gt;라는 문자가 표시되어 있다면 타입 정의 파일이 내장되어 있다는 의미이다.&lt;/p&gt;
&lt;h3&gt;3.3 직접 작성&lt;/h3&gt;
&lt;p&gt;DefinitelyTyped에도 없고, 라이브러리에 내장되어 있지 않다면 타입 정의 파일을 직접 입력해야 한다. 만약 규모가 큰 라이브러리를 사용한다면, 타입 정의 파일 전체를 작성하기는 어렵다. 그럴 때는 해당 라이브러리에서 사용할 API나 코드 먼저 타입을 작성하는 방식으로 진행하면 된다. 루트 디렉터리에 &lt;code class=&quot;language-text&quot;&gt;global.d.ts&lt;/code&gt; 파일을 만들어 필요한 부분만 타입을 정의하면 된다. 물론 프로젝트에 따라서 파일명과 위치는 달라질 수 있다.&lt;/p&gt;
&lt;h2&gt;마치며&lt;/h2&gt;
&lt;p&gt;이번 글에서는 CRA 프로젝트를 타입스크립트 기반으로 생성하고, tsconfig.json 파일을 통해 컴파일러 옵션을 설정하는 방법을 중점적으로 다뤘다. 다음 글에서는 ESLint와 Prettier, Husky 설정하는 방법을 다뤄보겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[당신의 작업실] 번외. 리팩터링과 기능 추가]]></title><description><![CDATA[당신의 작업실 프로젝트 링크: https://pixel-workroom.herokuapp.com/ 프로젝트 깃허브 저장소 링크 : https://github.com/ha-il/project-pixel…]]></description><link>https://ha-il.github.io/side-project/project-pixel/11-refactoring/</link><guid isPermaLink="false">https://ha-il.github.io/side-project/project-pixel/11-refactoring/</guid><pubDate>Thu, 22 Jun 2023 22:50:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;당신의 작업실 프로젝트 링크: &lt;a href=&quot;https://pixel-workroom.herokuapp.com/&quot;&gt;https://pixel-workroom.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;프로젝트 깃허브 저장소 링크 : &lt;a href=&quot;https://github.com/ha-il/project-pixel&quot;&gt;https://github.com/ha-il/project-pixel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;들어가기 전에&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/10-ending/&quot;&gt;지난 글&lt;/a&gt;에서 &quot;앞으로 하고 싶은 일&quot;의 첫 번째로 &lt;strong&gt;프로젝트 리팩터링&lt;/strong&gt;을 꼽기도 했고, 배포 후에도 &quot;당신의 작업실&quot;을 개인적으로 이용해보면서 여러 불편한 점을 발견했기 때문에, &quot;당신의 작업실&quot;의 기능 추가와 리팩터링을 진행했습니다.&lt;/p&gt;
&lt;p&gt;이번 글은 그 리팩터링 과정과 새롭게 추가한 기능을 소개하도록 하겠습니다.&lt;/p&gt;
&lt;h2&gt;1. 플레이리스트 페이지 리팩터링&lt;/h2&gt;
&lt;p&gt;먼저, 저의 플레이리스트 페이지는 &lt;code class=&quot;language-text&quot;&gt;Playlist&lt;/code&gt; 컴포넌트를 렌더링한 것입니다. 리팩터링 전에 &lt;code class=&quot;language-text&quot;&gt;Playlist&lt;/code&gt; 컴포넌트는 여기에 소개하기도 부끄러울 정도로 지저분한 상태였습니다. 하지만, 보여드리지 않고서는 리팩터링 과정을 보여드릴 설명하기가 어려우니 아래 코드로 공개하겠습니다. (매우 깁니다! 빠르게 넘기셔도 됩니다!)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Playlist&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &amp;lt;div class=&quot;playlist-container&quot;&gt;
        &amp;lt;button type=&quot;button&quot; class=&quot;back-button&quot;&gt;↩&amp;lt;/button&gt;
        &amp;lt;div class=&quot;info-container&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist
              &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;img class=&quot;image&quot; src=&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imageUrl&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;div class=&quot;image&quot;&gt;&amp;lt;i class=&quot;fa-solid fa-music&quot;&gt;&amp;lt;/i&gt;&amp;lt;/div&gt;&apos;&lt;/span&gt;
              &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;div class=&quot;image&quot;&gt;&amp;lt;i class=&quot;fa-solid fa-music&quot;&gt;&amp;lt;/i&gt;&amp;lt;/div&gt;&apos;&lt;/span&gt;
          &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
          &amp;lt;div class=&quot;info&quot;&gt;
            &amp;lt;div class=&quot;name&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
              &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist
                &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name
                &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;플레이리스트를 불러오고 있습니다...&quot;&lt;/span&gt;
            &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
            &amp;lt;div class=&quot;profileName&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
              &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist
                &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;owner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;profileName
                &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;...&quot;&lt;/span&gt;
            &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
            &amp;lt;div class=&quot;duration&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
              &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;
            &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;곡&amp;lt;/div&gt;
            &amp;lt;div class=&quot;description&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
              &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;description &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;...&quot;&lt;/span&gt;
            &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
            &amp;lt;button type=&quot;button&quot; class=&quot;play-button&quot;&gt;재생&amp;lt;/button&gt;
          &amp;lt;/div&gt;
        &amp;lt;/div&gt;
        &amp;lt;div class=&quot;current-music-list music-list-container&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist
              &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;div&gt;음악을 추가해보세요!&amp;lt;/div&gt;&quot;&lt;/span&gt;
                &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics
                    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;music&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
                      &amp;lt;div class=&quot;music-container&quot;&gt;
                        &amp;lt;img class=&quot;image&quot; src=&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imageUrl&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&gt;
                        &amp;lt;div class=&quot;title&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
                        &amp;lt;div class=&quot;artist&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;artist&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
                        &amp;lt;div class=&quot;duration&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;convertMillisecondsToTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                          &lt;span class=&quot;token function&quot;&gt;convertTimeToMilliseconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;duration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
                      &amp;lt;/div&gt;
                    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;플레이리스트의 음악을 불러오는 중입니다...&quot;&lt;/span&gt;
          &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
        &amp;lt;/div&gt;
        &amp;lt;div class=&quot;search-container&quot;&gt;
          &amp;lt;form method=&quot;get&quot; id=&quot;music-search-form&quot;&gt;
            &amp;lt;div class=&quot;form-input&quot;&gt;
              &amp;lt;label for=&quot;searchWord&quot;&gt;검색하기: &amp;lt;/label&gt;
              &amp;lt;input
                id=&quot;searchWord&quot;
                name=&quot;searchWord&quot;
                type=&quot;text&quot;
                placeholder=&quot;검색하고 싶은 곡의 제목을 입력해주세요&quot;
                maxlength=&quot;30&quot;
                required
              /&gt;
            &amp;lt;/div&gt;
            &amp;lt;input type=&quot;submit&quot; value=&quot;검색&quot; /&gt;
          &amp;lt;/form&gt;
        &amp;lt;/div&gt;
        &amp;lt;div class=&quot;music-list-title&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listTitle &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listTitle &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;인기차트 곡 추가하기&quot;&lt;/span&gt;
        &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
        &amp;lt;div class=&quot;recommended-music-list music-list-container&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;chartMusics
              &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;chartMusics
                  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;music&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
                      &amp;lt;div class=&quot;music-container&quot;&gt;
                        &amp;lt;img class=&quot;image&quot; src=&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imageUrl&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&gt;
                        &amp;lt;div class=&quot;title&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
                        &amp;lt;div class=&quot;artist&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;artist&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
                        &amp;lt;button type=&quot;button&quot; class=&quot;add-music-button&quot; data-musicid=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
                          music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_id
                        &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&gt;+&amp;lt;/button&gt;
                        &amp;lt;div class=&quot;duration&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;convertMillisecondsToTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                          &lt;span class=&quot;token function&quot;&gt;convertTimeToMilliseconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;duration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
                      &amp;lt;/div&gt;
                    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;인기 차트 음악을 불러오는 중입니다...&quot;&lt;/span&gt;
          &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
        &amp;lt;/div&gt;
      &amp;lt;/div&gt;
    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;매우 길죠? 부끄럽습니다. 심지어 이것은 플레이리스트 페이지의 뼈대만 보여드리기 위해서 &lt;code class=&quot;language-text&quot;&gt;template()&lt;/code&gt;만 가져온 것이기 때문에 데이터를 가져오거나 이벤트를 추가하는 메서드의 코드는 빠진 상태입니다. 누가봐도 리팩터링이 필요해보입니다.&lt;/p&gt;
&lt;p&gt;위의 코드가 렌더링되면 아래와 같은 상세 페이지가 나오는데, 상세 페이지는 아래 이미지와 같이 크게 &lt;strong&gt;네 영역&lt;/strong&gt;으로 나뉘어집니다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/5c70ca9d-2278-4c6a-84a0-87757d9d6373&quot; width=&quot;100%&quot; alt=&quot;playlist-area&quot;&gt;
&lt;p&gt;이 네 가지 영역을 각각의 컴포넌트로 만드는 것이 좋을 것 같았습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;현재 플레이리스트 정보: &lt;code class=&quot;language-text&quot;&gt;CurrentPlaylist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;플레이리스트 곡 목록: &lt;code class=&quot;language-text&quot;&gt;CurrentMusicList&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;곡 검색 영역: &lt;code class=&quot;language-text&quot;&gt;SearchArea&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;인기차트 OR 검색 곡 목록: &lt;code class=&quot;language-text&quot;&gt;RecommendedMusicList&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;1.1 각각의 컴포넌트 만들기&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;현재 플레이리스트 정보: &lt;code class=&quot;language-text&quot;&gt;CurrentPlaylist&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CurrentPlaylist&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; playlist &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
        playlist
          &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;img class=&quot;image&quot; src=&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imageUrl&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;div class=&quot;image&quot;&gt;&amp;lt;i class=&quot;fa-solid fa-music&quot;&gt;&amp;lt;/i&gt;&amp;lt;/div&gt;&apos;&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;div class=&quot;image&quot;&gt;&amp;lt;i class=&quot;fa-solid fa-music&quot;&gt;&amp;lt;/i&gt;&amp;lt;/div&gt;&apos;&lt;/span&gt;
      &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &amp;lt;div class=&quot;info&quot;&gt;
        &amp;lt;div class=&quot;name&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
          playlist &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;플레이리스트를 불러오고 있습니다...&quot;&lt;/span&gt;
        &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
        &amp;lt;div class=&quot;profileName&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
          playlist &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;owner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;profileName &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;...&quot;&lt;/span&gt;
        &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
        &amp;lt;div class=&quot;duration&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;playlist &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;곡&amp;lt;/div&gt;
        &amp;lt;div class=&quot;description&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
          playlist &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;description &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;...&quot;&lt;/span&gt;
        &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
        &amp;lt;div class=&quot;playlist-buttons&quot;&gt;
          &amp;lt;button type=&quot;button&quot; class=&quot;play-button&quot;&gt;재생&amp;lt;/button&gt;
          &amp;lt;button type=&quot;button&quot; class=&quot;edit-button&quot;&gt;편집&amp;lt;/button&gt;
        &amp;lt;/div&gt;
      &amp;lt;/div&gt;
    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; CurrentPlaylist&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;플레이리스트 곡 목록: &lt;code class=&quot;language-text&quot;&gt;CurrentMusicList&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CurrentMusicList&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; playlist &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
        playlist
          &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;div&gt;음악을 추가해보세요!&amp;lt;/div&gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;music&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
                  &amp;lt;div class=&quot;music-container&quot;&gt;
                    &amp;lt;img class=&quot;image&quot; src=&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imageUrl&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&gt;
                    &amp;lt;div class=&quot;title&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
                    &amp;lt;div class=&quot;artist&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;artist&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
                    &amp;lt;button type=&quot;button&quot; class=&quot;remove-music-button&quot; data-musicid=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
                      music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_id
                    &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&gt;-&amp;lt;/button&gt;
                    &amp;lt;div class=&quot;duration&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;convertMillisecondsToTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                      &lt;span class=&quot;token function&quot;&gt;convertTimeToMilliseconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;duration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
                  &amp;lt;/div&gt;
                &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;플레이리스트의 음악을 불러오는 중입니다...&quot;&lt;/span&gt;
      &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; CurrentMusicList&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;곡 검색 영역: &lt;code class=&quot;language-text&quot;&gt;SearchArea&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SearchArea&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; isSearched&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; listTitle &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &amp;lt;div class=&quot;search-container&quot;&gt;
      &amp;lt;form method=&quot;get&quot; id=&quot;music-search-form&quot;&gt;
        &amp;lt;div class=&quot;form-input&quot;&gt;
          &amp;lt;label for=&quot;searchWord&quot;&gt;검색하기: &amp;lt;/label&gt;
          &amp;lt;input
            id=&quot;searchWord&quot;
            name=&quot;searchWord&quot;
            type=&quot;text&quot;
            placeholder=&quot;검색하고 싶은 곡의 제목을 입력해주세요&quot;
            maxlength=&quot;30&quot;
            required
          /&gt;
        &amp;lt;/div&gt;
        &amp;lt;input type=&quot;submit&quot; value=&quot;검색&quot; /&gt;
        &amp;lt;input type=&quot;button&quot; id=&quot;backChartBtn&quot; value=&quot;인기차트&quot; class=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
          isSearched &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hidden&quot;&lt;/span&gt;
        &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; /&gt;
      &amp;lt;/form&gt;
      &amp;lt;/div&gt;
      &amp;lt;div class=&quot;music-list-title&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
        listTitle &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; listTitle &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;인기차트 곡 추가하기&quot;&lt;/span&gt;
      &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; SearchArea&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;인기차트 OR 검색 곡 목록: &lt;code class=&quot;language-text&quot;&gt;RecommendedMusicList&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RecommendedMusicList&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; recommendMusics &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
        recommendMusics
          &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; recommendMusics
              &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;music&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
                  &amp;lt;div class=&quot;music-container&quot;&gt;
                    &amp;lt;img class=&quot;image&quot; src=&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imageUrl&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&gt;
                    &amp;lt;div class=&quot;title&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
                    &amp;lt;div class=&quot;artist&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;artist&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
                    &amp;lt;button type=&quot;button&quot; class=&quot;add-music-button&quot; data-musicid=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
                      music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_id
                    &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&gt;+&amp;lt;/button&gt;
                    &amp;lt;div class=&quot;duration&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;convertMillisecondsToTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                      &lt;span class=&quot;token function&quot;&gt;convertTimeToMilliseconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;duration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
                  &amp;lt;/div&gt;
                &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;인기 차트 음악을 불러오는 중입니다...&quot;&lt;/span&gt;
      &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; RecommendedMusicList&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.2 Playlist 컴포넌트에 각각의 컴포넌트 추가하기&lt;/h3&gt;
&lt;p&gt;생성한 컴포넌트를 Playlist 컴포넌트에 추가하기 위해서, 먼저 각 컴포넌트가 추가될 영역을 &lt;code class=&quot;language-text&quot;&gt;template()&lt;/code&gt;에 작성합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Playlist&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &amp;lt;div class=&quot;playlist-container&quot;&gt;
        &amp;lt;button type=&quot;button&quot; class=&quot;back-button&quot;&gt;↩&amp;lt;/button&gt;
        &amp;lt;div id=&quot;info-container&quot; class=&quot;info-container&quot;&gt;&amp;lt;/div&gt;
        &amp;lt;div id=&quot;current-music-list&quot; class=&quot;current-music-list music-list-container&quot;&gt;&amp;lt;/div&gt;
        &amp;lt;div id=&quot;search-area&quot;&gt;&amp;lt;/div&gt;
        &amp;lt;div id=&quot;recommended-music-list&quot; class=&quot;recommended-music-list music-list-container&quot;&gt;&amp;lt;/div&gt;
      &amp;lt;/div&gt;
    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 다음은, &lt;code class=&quot;language-text&quot;&gt;addComponent()&lt;/code&gt;에 각 컴포넌트를 생성하는데, 이 때 각 컴포넌트가 추가될 영역을 타겟으로 전달합니다.&lt;/p&gt;
&lt;p&gt;그리고 각 컴포넌트에서 필요로하는 &lt;code class=&quot;language-text&quot;&gt;prop&lt;/code&gt;도 빠짐없이 전달합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Playlist&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &amp;lt;div class=&quot;playlist-container&quot;&gt;
        &amp;lt;button type=&quot;button&quot; class=&quot;back-button&quot;&gt;↩&amp;lt;/button&gt;
        &amp;lt;div id=&quot;info-container&quot; class=&quot;info-container&quot;&gt;&amp;lt;/div&gt;
        &amp;lt;div id=&quot;current-music-list&quot; class=&quot;current-music-list music-list-container&quot;&gt;&amp;lt;/div&gt;
        &amp;lt;div id=&quot;search-area&quot;&gt;&amp;lt;/div&gt;
        &amp;lt;div id=&quot;recommended-music-list&quot; class=&quot;recommended-music-list music-list-container&quot;&gt;&amp;lt;/div&gt;
      &amp;lt;/div&gt;
    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; playerSetState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CurrentPlaylist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#info-container&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;playlist&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      playerSetState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CurrentMusicList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#current-music-list&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;playlist&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;playlistSetState&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RecommendedMusicList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#recommended-music-list&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;playlist&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;recommendMusics&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;recommendMusics&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;playlistSetState&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SearchArea&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#search-area&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;isSearched&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isSearched&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;listTitle&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listTitle&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;chartMusics&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;chartMusics&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;playlistSetState&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Playlist&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;최종적으로 정리된 코드를 보면, 처음에 소개드렸던 아주 긴 코드에 비해서 상당히 간결해진 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이렇게 작성했을 때의 장점은 코드가 깔끔해진 것도 있지만, 플레이리스트 페이지에서 발생하는 많은 이벤트를 각 컴포넌트에 따로 작성할 수 있어서, 코드를 수정할 때 빠르게 해당 코드를 찾아갈 수 있었습니다.&lt;/p&gt;
&lt;h2&gt;2. 추가 기능&lt;/h2&gt;
&lt;p&gt;코드를 정리하는 리팩터링 작업 외에도, 구현하지 못 해서 아쉬웠던 기능들을 추가해봤습니다. 특히, 음악이나 플레이리스트를 &lt;strong&gt;추가&lt;/strong&gt;하는 것만 생각해서 제대로된 CRUD 기능을 구현하지 못 했던 것이 마음에 많이 걸렸는데 이번 기회에 플레이리스트의 &lt;strong&gt;CRUD&lt;/strong&gt;를 중점적으로 구현해봤습니다.&lt;/p&gt;
&lt;h3&gt;2.1 플레이리스트 편집&lt;/h3&gt;
&lt;p&gt;플레이리스트의 제목과 설명을 편집할 수 있습니다. 편집을 완료해도 새로고침은 발생하지 않기 때문에 음악도 끊기지 않습니다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/71fde65b-21c4-4309-a211-3185ce78ae50&quot; width=&quot;100%&quot; alt=&quot;edit-playlist&quot;&gt;
&lt;h3&gt;2.2 플레이리스트 삭제&lt;/h3&gt;
&lt;p&gt;플레이리스트 전체를 삭제할 수 있습니다. 플레이리스트를 삭제하면 홈 화면으로 이동합니다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/fa300550-c953-4bd4-b59c-7aefb1ac0328&quot; width=&quot;100%&quot; alt=&quot;remove-playlist&quot;&gt;
&lt;h3&gt;2.3 플레이리스트의 곡 삭제&lt;/h3&gt;
&lt;p&gt;현재 플레이리스트에 들어있는 곡을 삭제할 수 있습니다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/9dd9c8fd-8766-4868-9171-6202940cf6f7&quot; width=&quot;100%&quot; alt=&quot;remove-music&quot;&gt;
&lt;h3&gt;2.4 플레이리스트에서 음악 검색 후 인기차트 곡 다시 띄우기&lt;/h3&gt;
&lt;p&gt;플레이리스트 페이지 하단에서는 인기차트 곡을 띄워서 유저에게 곡을 추천합니다.&lt;/p&gt;
&lt;p&gt;검색을 할 경우 인기차트 곡들이 사라지고 검색어와 관련된 곡들이 뜨는데, 다시 인기차트를 확인하고 싶은 경우가 있어서 추가했습니다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/13cb86bd-50ce-49f1-8378-0ca9aa29d505&quot; width=&quot;100%&quot; alt=&quot;back-to-chart&quot;&gt;
&lt;h3&gt;2.5 스마트폰 오브젝트 앱 설명 추가&lt;/h3&gt;
&lt;p&gt;기존 앱 아이콘만으로는 기능을 제대로 안내하지 못 하는 것 같아 메시지와 애니메이션을 추가했습니다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/372ead3a-ab9c-49b2-9455-9a40d1b65f78&quot; width=&quot;100%&quot; alt=&quot;phone-animation&quot;&gt;
&lt;h2&gt;마치며&lt;/h2&gt;
&lt;p&gt;사실 이번 리팩터링과 추가 기능 작업을 마지막으로 이 프로젝트는 완전히 종료하려고 했습니다. &quot;당신의 작업실&quot;이라는 정체성을 계속 가져가려면 홈 화면에 있는 가구 오브젝트들을 유저가 원하는 디자인으로 바꿀 수 있어야 한다고 생각합니다. 그러나 그 작업에는 프로그래밍 작업이 필요한 것이 아니라 픽셀아트 작업이 필요한데, 요즘은 개발 공부에 많은 시간을 할애하고 있어서 픽셀아트 작업을 따로 시간내서 하기가 너무 어려웠습니다.&lt;/p&gt;
&lt;p&gt;하지만 이번에 추가 기능 작업을 하면서 뭔가 계속 추가되고 발전되가는 모습이 이 프로젝트에서 보여지니까 재미도 있고, 더 완성시키고 싶다는 생각도 들었습니다. 무엇보다 여태껏 학습을 목적으로 만들었던 개인 프로젝트는 학습이 끝남과 동시에 거의 들어가보지도 않았는데, 이번에 제작한 &quot;당신의 작업실&quot;은 지금 이 시점까지도 종종 들어가서 음악을 듣기도 하는 걸 보니, 이 프로젝트에 꽤 애착이 생긴 것 같습니다.&lt;/p&gt;
&lt;p&gt;당장 업데이트를 하기는 어렵겠지만, 픽셀아트를 다시 할 수 있게되거나, &quot;당신의 작업실&quot;을 이용하면서 아이디어가 또 생기면 기능을 추가해볼 생각입니다. 지금 운영하고 있는 이 블로그처럼 &quot;당신의 작업실&quot; 또한 긴 호흡으로 운영해볼 생각입니다.&lt;/p&gt;
&lt;p&gt;이것으로 &quot;당신의 작업실&quot; 프로젝트 관련 포스팅은 정말 마지막입니다.&lt;/p&gt;
&lt;p&gt;지금까지 읽어주셔서 정말 감사합니다!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[당신의 작업실] 10. 프로젝트를 마치며]]></title><description><![CDATA[당신의 작업실 프로젝트 링크: https://pixel-workroom.herokuapp.com/ 프로젝트 깃허브 저장소 링크 : https://github.com/ha-il/project-pixel…]]></description><link>https://ha-il.github.io/side-project/project-pixel/10-ending/</link><guid isPermaLink="false">https://ha-il.github.io/side-project/project-pixel/10-ending/</guid><pubDate>Tue, 20 Jun 2023 05:20:10 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;당신의 작업실 프로젝트 링크: &lt;a href=&quot;https://pixel-workroom.herokuapp.com/&quot;&gt;https://pixel-workroom.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;프로젝트 깃허브 저장소 링크 : &lt;a href=&quot;https://github.com/ha-il/project-pixel&quot;&gt;https://github.com/ha-il/project-pixel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;들어가기 전에&lt;/h2&gt;
&lt;p&gt;이번 글에서는 프로젝트를 통해 무엇을 얻었고 어떤 점이 아쉬웠는지 이야기해보고, 그것을 기반으로 다음에는 무엇을 하면 좋을지에 대해서 이야기해보려 합니다.&lt;/p&gt;
&lt;h2&gt;1.프로젝트를 통해 얻은 것&lt;/h2&gt;
&lt;h3&gt;1.1 SPA에 대한 이해&lt;/h3&gt;
&lt;p&gt;제가 SPA를 처음 접했던 것은 리액트 강의를 들었을 때였습니다. 당시 저는 Express와 Pug를 이용해서 서버 측 렌더링을 하는 작은 프로젝트를 완성한 상태였고 리액트에 대해서 막 공부를 시작하려던 참이었습니다. 당시 저에게 페이지를 이동하면 새로고침이 일어나는 것은 너무 당연한 일이었습니다.&lt;/p&gt;
&lt;p&gt;리액트 강의를 들으면서 &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt;라는 훅을 접했을 때, 새로고침 없이 페이지가 갱신되는 것을 보고 정말 마법 같은 기술이라고 생각했습니다. &lt;strong&gt;상태에 따라서 새로고침 없이 렌더링을 한다니&lt;/strong&gt;, 그것도 페이지 전체를 렌더링하는 것이 아니라 &lt;strong&gt;필요한 부분만을 렌더링하다니&lt;/strong&gt;. 정말 신기했습니다.&lt;/p&gt;
&lt;p&gt;하지만 리액트로 코드를 작성할 때마다 찜찜한 부분이 있었습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&quot;내가 SPA를 이 useState라는 훅 하나로 구현해도 괜찮은 걸까? 이걸로 내가 SPA를 구현할 수 있다고 할 수 있을까?&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;이런 생각이 조금씩 들기 시작했습니다.&lt;/p&gt;
&lt;p&gt;그 뒤로부터는 &lt;a href=&quot;http://localhost:8000/side-project/project-pixel/1-motive/&quot;&gt;이 글(이 프로젝트를 시작한 이유)&lt;/a&gt;에서 설명한 것처럼 바닐라 자바스크립트로 SPA를 구현해봐야겠다는 생각이 들었고 이 프로젝트를 시작하게 되었습니다.&lt;/p&gt;
&lt;p&gt;그렇게 SPA를 구현하면서 아래와 같은 내용을 공부할 수 있었습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;앱 전체가 아니라 원하는 컴포넌트만 렌더링 되어야 했으므로 &lt;strong&gt;파일을 컴포넌트 단위로 구성&lt;/strong&gt;해야 했고, 그 과정에서 &lt;strong&gt;객체지향 프로그래밍&lt;/strong&gt;과 &lt;strong&gt;class&lt;/strong&gt;에 대해서 공부할 수 있었습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴포넌트의 메서드를 구성하면서 &lt;strong&gt;컴포넌트의 생명주기&lt;/strong&gt;에 대해서 고려할 수 있었습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴포넌트 간의 prop을 전달하는 경우 this 바인딩을 고려해야 하기 때문에 t&lt;strong&gt;his와 this 바인딩을 유지하는 방법&lt;/strong&gt;을 공부할 수 있었습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;렌더링되는 화면에 따라서 라우팅도 설정해줘야 했기 때문에 &lt;strong&gt;History API와 Location API&lt;/strong&gt;에 대해서 공부할 수 있었습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이렇게 굳이 바닐라 자바스크립트로 SPA를 구현하면서 많은 것들을 공부할 수 있었고, 추후에 리액트를 공부할 때도 좋은 배경이 되지 않을까 생각됩니다.&lt;/p&gt;
&lt;h3&gt;1.2 객체지향 프로그래밍에 대한 이해&lt;/h3&gt;
&lt;p&gt;이번 프로젝트를 하기 전까지 &lt;strong&gt;객체 지향 프로그래밍&lt;/strong&gt;은 저에게 미지의 영역이었습니다.&lt;/p&gt;
&lt;p&gt;리액트 강의를 들었을 때도 class를 활용하기 보다는 hook을 사용해서 프로그래밍 하거나 함수 위주로 프로그래밍하는 경우가 더 많았습니다. 그런 이유로 (좀 부끄러운 이야기지만) 저는 &apos;&lt;strong&gt;객체지향으로 프로그래밍을 할 일이 없을지도 모르겠다&lt;/strong&gt;&apos;라고 생각한 적도 있었습니다.&lt;/p&gt;
&lt;p&gt;하지만 이번 프로젝트를 통해 객체지향 프로그래밍을 사용하는 것이 꽤 이해가 가고 심지어 꽤 재미있다고 느꼈습니다. Component라는 클래스를 만들고 그것을 바탕으로 다른 컴포넌트들을 작성하면서 &apos;&lt;strong&gt;클래스로 만들어서 미리 정의해두니까 정말 편하구나&lt;/strong&gt;&apos;라는 생각이 들었습니다.&lt;/p&gt;
&lt;p&gt;그냥 코드를 적게 작성해도 돼서 편한 것도 있었지만, 모든 컴포넌트가 하나의 클래스를 따르기 때문에 각기 다른 컴포넌트에서 프로그래밍을 해도, 그 &lt;strong&gt;프로그래밍 경험이 일관되게 유지가 된다&lt;/strong&gt;는 점이 편리했습니다.&lt;/p&gt;
&lt;p&gt;물론 어려운 점도 있었습니다. 모든 컴포넌트가 Component 클래스를 따르는 상황에서, 기&lt;strong&gt;준이 되는 Component 클래스의 생명주기를 변경하면 모든 컴포넌트의 생명주기가 변경되기 때문에&lt;/strong&gt; 작업을 진행할 수록 Component 클래스에는 손을 댈 수가 없었습니다.&lt;/p&gt;
&lt;p&gt;아직 이것으로 객체지향 프로그래밍을 이해했다고 말하기는 어렵겠지만, 객체지향 프로그래밍의 컨셉과, 장점과 단점에 대해서 대략적으로 파악할 수 있었던 좋은 기회였던 것 같습니다.&lt;/p&gt;
&lt;p&gt;그리고 덤으로 자바스크립트의 &lt;strong&gt;class와 this 바인딩&lt;/strong&gt;에 대해서 많이 공부할 수 있었습니다.&lt;/p&gt;
&lt;h3&gt;1.3 유저, 클라이언트, 서버 간의 통신 과정에 대한 이해&lt;/h3&gt;
&lt;p&gt;예전에 Express와 Pug를 이용해서 프로젝트를 만들었을 때는 서버 측에서 렌더링했기 때문에 클라이언트 측에서 데이터에 대한 요청을 보낼 일이 거의 없었고, 요청을 보내봤자 화면 렌더링과는 관계없는 api 요청이 전부였습니다. 리액트를 학습하면서부터는 클라이언트 측에서 데이터를 요청하여 화면을 렌더링하는 법을 배우긴 했지만 실제 프로젝트에 적용해 본 적은 없었습니다.&lt;/p&gt;
&lt;p&gt;특히 이번 프로젝트는 하나의 폴더에서 자바스크립트로 백엔드와 프론트엔드를 둘 다 다뤘기 때문에, 저에게는 그 영역의 경계가 특히 모호하게 느껴졌습니다. 그래서 이번 프로젝트를 할 때 &lt;strong&gt;유저, 클라이언트, 서버 간의 통신 과정을 머릿 속으로 정리하는 것에 어려움을 많이 느꼈습니다&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;그런 어려움을 가장 크게 느꼈을 때가 유튜브 API를 활용할 때였습니다. 유저, 클라이언트, 서버 뿐만 아니라 유튜브 API 서버와도 통신해야 하는 상황이 오자 머리가 굉장히 복잡해졌습니다. 평소 프로그래밍을 하면서 뭔가를 생각해야 할 때가 오면 저는 보통 텍스트로 정리를 해왔지만, 이번에는 텍스트로는 부족해서 아래와 같이 &lt;strong&gt;그림&lt;/strong&gt;을 그려보게 됐습니다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/ha-il/ha-il.github.io/assets/108077643/2fe7d2b2-4e47-45a1-9f55-c475ed531e95&quot; width=&quot;100%&quot; alt=&quot;diagram&quot;&gt;
&lt;p&gt;(블로그에 올릴 줄 알았으면 글씨를 더 이쁘게 썼을 텐데요...😅)&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;한눈에 봐도 어설픈 그림이지만, 이 그림을 그리고나니 &lt;strong&gt;유저, 클라이언트, 서버 사이의 통신 과정이 머릿속에 잘 그려졌습니다&lt;/strong&gt;. 그 이후로 유저가 이벤트를 발생시켜 클라이언트에서 fetch로 요청을 보내야 할 때마다 이런 식으로 그림을 그렸습니다.&lt;/p&gt;
&lt;p&gt;그때는 잘 몰랐으나 지금 와서 생각해보니 제가 이런 형태의 그림을 어디서 봤던 기억이 있습니다. 바로 카카오 로그인 구현 방법에 대한 문서에 나왔던 &lt;strong&gt;시퀀스 다이어그램&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;img src=&quot;https://developers.kakao.com/docs/latest/ko/assets/style/images/kakaologin/kakaologin_sequence.png&quot; width=&quot;100%&quot; alt=&quot;diagram&quot;&gt;
&lt;p&gt;(출처 - &lt;a href=&quot;https://developers.kakao.com/docs/latest/ko/kakaologin/rest-api&quot;&gt;kakao developers 카카오 로그인 REST API&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;제 어설픈 그림을 전문가가 만든 시퀀스 다이어그램에 비교하자니 조금 민망하지만, 이 경험을 통해 뭔가를 이해해야 할 때 &lt;strong&gt;다이어그램&lt;/strong&gt;을 통해 대상이나 과정을 이해하는 것이 좋은 방법이 될 수 있겠다는 것을 배웠습니다.&lt;/p&gt;
&lt;p&gt;그리고 제가 급조해서 그린 그림이 시퀀스 다이어그램과 비슷한 형태를 띄고 있다는 사실에서 &lt;strong&gt;제 자신이 클라이언트와 서버 사이의 관계를 나름 잘 이해하고 표현했다&lt;/strong&gt;는 자신감을 얻었습니다.&lt;/p&gt;
&lt;p&gt;생각해보니 시퀀스 다이어그램을 카카오 로그인 문서에서 처음 본 것도 아니었습니다. 정보처리기사를 준비하면서 여러 종류의 다이어그램을 암기했었는데 그때도 봤던 기억이 있습니다. 그때는 이게 뭔 줄도 모르고 암기했습니다. &apos;이걸 내가 쓸 일이 있을까?&apos; 싶었지만, 지금은 누가 시키지 않아도 시퀀스 다이어그램 비슷한 것을 그리고 있는 제 자신을 보니, &apos;전부 다 쓸 일이 있으니까 시험에 나오는 것이구나&apos;라는 생각도 들었습니다.&lt;/p&gt;
&lt;h2&gt;2. 아쉬웠던 점&lt;/h2&gt;
&lt;h3&gt;2.1 검색 기능을 제대로 구현하지 못했던 것&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/9-dev-regexp/&quot;&gt;이전 글&lt;/a&gt;에서도 다뤘듯이 이 프로젝트의 음악 검색 기능은 매우 부실했습니다. 검색 기능을 업데이트하기 전에 프로젝트의 첫 번째 버전을 배포했었는데요. 감사하게도 몇몇분이 프로젝트를 이용해주시고 피드백도 남겨주셨는데, 이때 &apos;내가 추가한 음악을 검색할 수 없어요&apos;라는 피드백을 받았습니다.&lt;/p&gt;
&lt;p&gt;그 피드백을 받고 굉장히 후회를 많이 했었습니다. 제가 예상했던 부분이 아니라 안심하고 있었던 부분에서 버그가 발생해서 더욱 뼈아팠던 것 같습니다.&lt;/p&gt;
&lt;p&gt;&apos;&lt;strong&gt;정규 표현식 조금만 더 검색하면 나오는 건데 왜 그걸 안 했을까&lt;/strong&gt;&apos;,&lt;/p&gt;
&lt;p&gt;&apos;&lt;strong&gt;우선 개발해야 하는 주요 기능이 있다고 해도, 검색 기능도 못지 않게 중요한데 왜 그걸 소홀히 했을까&lt;/strong&gt;&apos;&lt;/p&gt;
&lt;p&gt;여러가지 생각이 밀려왔습니다.&lt;/p&gt;
&lt;p&gt;나름 완성됐다는 생각으로 배포했지만 여전히 부족한 점이 있는 것을 보고, &apos;&lt;strong&gt;언제나 100% 완성이라는 것은 없다&lt;/strong&gt;&apos;는 사실을 깨달았습니다.&lt;/p&gt;
&lt;p&gt;그리고 &lt;strong&gt;테스트&lt;/strong&gt;에 관심을 갖게 되었습니다. 검색 기능을 제대로 테스트했다면 이런 일이 없지 않았을까 싶습니다. 테스트를 설계하는 방법, 테스트 케이스를 구성하는 방법, 테스트를 진행하는 방법 등을 배워보고 싶다는 생각이 들었습니다.&lt;/p&gt;
&lt;h3&gt;2.2 상태관리를 제대로 하지 못 했던 것&lt;/h3&gt;
&lt;p&gt;프로젝트 기획을 시작할 때는 상태관리의 필요성을 특별히 느끼지 못했습니다. 프로젝트에서 사용할 컴포넌트 수가 그렇게 많지 않을 것 같고, 컴포넌트 사이의 깊이도 그렇게 깊지 않을 것 같았습니다. 그저 prop을 전달하는 것으로 충분할 것이라 생각했습니다.&lt;/p&gt;
&lt;p&gt;하지만 본격적으로 개발에 들어가니 prop을 전달할 일이 상당히 빈번하게 발생했습니다. &lt;strong&gt;심지어 해당 prop이 필요하지 않은 컴포넌트에도 오직 다른 컴포넌트로 전달하기 위해 prop을 전달하기도 했습니다&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/8-dev-prop-this/&quot;&gt;&apos;prop과 this 바인딩&apos;&lt;/a&gt;에서 MusicPlayer 클래스의 setState 메서드를 &lt;code class=&quot;language-text&quot;&gt;playerSetState&lt;/code&gt;에 담아서 prop으로 전달하는 과정을 설명한 적이 있습니다. &lt;code class=&quot;language-text&quot;&gt;playerSetState&lt;/code&gt;는 prop에 담겨서 &lt;strong&gt;플레이리스트 페이지&lt;/strong&gt;로 전달됩니다.&lt;/p&gt;
&lt;p&gt;여기서 문제가 발생했습니다. &lt;strong&gt;플레이리스트 페이지로 진입할 수 있는 모든 곳에 &lt;code class=&quot;language-text&quot;&gt;playerSetState&lt;/code&gt;를 prop으로 전달해주어야 했습니다.&lt;/strong&gt; 홈페이지, 스마트폰 오브젝트, 장식장 오브젝트에서 플레이리스트 페이지로 진입하는 경우 플레이리스트 페이지로 &lt;code class=&quot;language-text&quot;&gt;playerSetState&lt;/code&gt;를 prop으로 넘겨줘야 했습니다.&lt;/p&gt;
&lt;p&gt;예시를 통해 &lt;code class=&quot;language-text&quot;&gt;playerSetState&lt;/code&gt;가 어떤 과정으로 전달되고 있는지 소개하겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// playerSetState의 여행 과정&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; musicPlayer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MusicPlayer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#music-player&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// App 에서 Home 출발 ~&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;playerSetState&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; musicPlayer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.home-container&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; playerSetState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Home 에서 Phone으로 출발 ~&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 어라? 근데 Phone에서는 playerSetState 쓸일 없는데?&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Phone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#phone&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token literal-property property&quot;&gt;$main&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          playerSetState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Phone&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $main&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; playerSetState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Phone에서 PhoneHome으로 출발...&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PhoneHome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.phone-container&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $main&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; playerSetState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PhoneHome&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#playlist-creation&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $main&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; playerSetState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// PhoneHome에서 PlaylistCreation으로 출발...&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PlaylistCreation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.phone-container&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $main&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; playerSetState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PlaylistCreation&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#playlist-creation-form&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $main&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; playerSetState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// PlaylistCreation에서 Playlist로 출발...&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 아.. 여기서 Playlist로 playerSetState를 전달해줘야 해서,&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 이 먼 길을 왔구나...&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Playlist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$main&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $main&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; playerSetState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Playlist&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.play-button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; playerSetState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 드디어 도착 ㅜㅜ&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;playerSetState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;musics&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;currentMusic&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;검색해보니 이런 상황을 &lt;strong&gt;prop drilling&lt;/strong&gt;이라고 부르는 것 같습니다. 그리고 이에 대한 해결책으로 상태관리 라이브러리가 등장했다고 하니, 이번 프로젝트를 통해 상태관리 라이브러리의 필요성을 절실히 느끼게 되었습니다.&lt;/p&gt;
&lt;p&gt;prop에 대한 전달을 고려하지 않고 컴포넌트 간의 깊이를 너무 깊게 설정한 저의 설계 부족도 있는 것 같아서 더 아쉽습니다.&lt;/p&gt;
&lt;h3&gt;2.3 플레이리스트 컴포넌트에 너무 많은 코드를 작성했던 것&lt;/h3&gt;
&lt;p&gt;플레이리스트 컴포넌트 안에 너무 많은 코드를 작성해서 컴포넌트 방식의 이점을 살리지 못한 것이 아쉬웠습니다.&lt;/p&gt;
&lt;p&gt;플레이리스트 컴포넌트는 플레이리스트 상세 페이지를 렌더링하는 컴포넌트로, 단일 컴포넌트로 사용하기에는 기능도 많고 불러오는 데이터도 많은 컴포넌트입니다.&lt;/p&gt;
&lt;p&gt;사실 분리가 불가능한 것은 아니었습니다만, 분리가 필요하다고 느꼈을 때는 이미 너무 많은 코드를 해당 컴포넌트에 작성을 해버린 상태였습니다.&lt;/p&gt;
&lt;p&gt;개인 프로젝트라 마감 기한을 무시하고 진행할 수도 있었지만, &apos;&lt;strong&gt;기한에 맞춰서 기능을 개발하는 것&lt;/strong&gt;&apos;과 &apos;&lt;strong&gt;기한에 맞추지 못해도 더 좋은 코드로 개발하는 것&lt;/strong&gt;&apos; 중에 뭐가 더 중요할까 라는 고민에 &apos;&lt;code class=&quot;language-text&quot;&gt;일단 기한을 맞추는 것이 중요하다&lt;/code&gt;&apos;라는 결론을 내습니다.&lt;/p&gt;
&lt;p&gt;다행히 마감 기한으로 정해뒀던 1차 배포 날까지 프로젝트를 완성시킬 수 있었고, 기능도 대부분 제대로 동작했습니다. 하지만 코드에 대한 아쉬움은 여전히 남아있습니다.&lt;/p&gt;
&lt;h2&gt;3. 앞으로 하고 싶은 일&lt;/h2&gt;
&lt;p&gt;배웠던 것도 많고 아쉬웠던 것도 많은 프로젝트였기에 앞으로 해보고 싶은 일들도 많이 생겼습니다.&lt;/p&gt;
&lt;h3&gt;3.1 프로젝트 리팩터링&lt;/h3&gt;
&lt;p&gt;사실 이 글을 쓰고 있는 순간에도 타입스크립트와 리액트를 배우러 가고 싶다는 마음이 굴뚝 같지만, 지금 머릿속에 당장 떠오르는 수정 사항만 해도 적지 않기 때문에, 프로젝트에 대한 최소한의 리팩터링은 해야할 것 같습니다.&lt;/p&gt;
&lt;p&gt;마감기간을 맞추느라 &lt;strong&gt;구현하지 못했던 기능들을 추가&lt;/strong&gt;할 예정이고, 아쉬운 점으로 꼽았던 &lt;strong&gt;플레이리스트 컴포넌트&lt;/strong&gt;를 리팩터링을 해보고 싶습니다.&lt;/p&gt;
&lt;h3&gt;3.2 함수형 프로그래밍에 대한 공부&lt;/h3&gt;
&lt;p&gt;사실 이 프로젝트가 끝나고 프로그래머스에서 진행하는 프론트엔드 데브매칭이라는 채용 프로그램에 참가했습니다. 이 프로그램에서는 과제 테스트를 보게 되는데, 바닐라 자바스크립트로만 진행됩니다. 이번을 포함해서 총 3번 참가했는데 여태 이력은 이렇습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1차: 기능 구현도 제대로 못하고 탈락&lt;/li&gt;
&lt;li&gt;2차: 기능은 어느정도 구현했지만 그저 그런 코드로 턱걸이 합격&lt;/li&gt;
&lt;li&gt;3차: 기능도 대부분 구현했고 class 활용하여 SPA로 구현 =&gt; 현재 결과 기다리는 중&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 얘기를 왜 굳이 꺼냈냐면, 이번 데브매칭의 과제 테스트를 볼 때 속으로 이렇게 생각했습니다.&lt;/p&gt;
&lt;p&gt;&quot;&lt;strong&gt;이젠 class를 안 쓰면 바닐라 자바스크립트로 어떻게 코딩을 해야 할 지 모르겠네&lt;/strong&gt;&quot;&lt;/p&gt;
&lt;p&gt;class에 익숙해졌으니 오히려 좋아해야 하려나요? 다만 저는 &lt;strong&gt;특정 방식에 익숙해지고 있는 제 자신이 좀 걱정됐습니다&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;이번 프로젝트를 통해서 객체지향 프로그래밍의 맛을 알 수 있었듯이, 다음에는 &lt;strong&gt;함수형 프로그래밍&lt;/strong&gt;을 배워보면 좀 더 다양한 방식으로 코딩을 할 수 있을 것 같다는 생각이 들었습니다.&lt;/p&gt;
&lt;h3&gt;3.3 HTTP에 대한 공부&lt;/h3&gt;
&lt;p&gt;HTTP에 대한 공부를 마음 먹은 이유는 제가 SPA를 구현해야겠다고 마음 먹은 이유와 비슷한 것 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&quot;내가 fetch로 요청 몇 번 보내봤다고, 클라이언트와 서버 간의 통신을 이해했다고 말할 수 있을까?&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;클라이언트와 서버 간의 통신을 하는 것을 넘어서 &lt;strong&gt;제대로 이해하고 싶다&lt;/strong&gt;는 생각이 들었습니다.&lt;/p&gt;
&lt;h2&gt;마치며&lt;/h2&gt;
&lt;p&gt;기획부터 개발 그리고 배포까지. 처음부터 끝까지 혼자서 했던 작업이라 힘들기도 힘들었지만 그만큼 뿌듯한 프로젝트였습니다.  그리고 &lt;strong&gt;그 뿌듯함의 크기는 이 프로젝트를 하면서 만났던 문제의 양과 비례하는 것 같습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;혼자서 하는 프로젝트는 강의를 따라서 만든 프로젝트와 너무나도 달랐습니다. 처음 보는 에러도 많았고, 새로 공부해야할 것도 많았습니다.&lt;/p&gt;
&lt;p&gt;하지만 재미있게도 &lt;strong&gt;모든 문제의 해결책은 이미 존재했습니다&lt;/strong&gt;. 단지, 그 해결책을 찾는 방법에 따라 시간이 오래 걸릴 뿐이었습니다.&lt;/p&gt;
&lt;p&gt;이번 프로젝트를 통해 얻은 가장 큰 수확은, &quot;&lt;strong&gt;어떤 문제가 와도 반드시 해결할 수 있을 것이다.&lt;/strong&gt;&quot;라는 믿음이 아닐까 싶습니다.&lt;/p&gt;
&lt;p&gt;혹여나 글이 10개가 되는 이 시리즈를 모두 읽어주신 분이 계시다면, 이 자리를 빌어서 감사의 마음을 전달 드리고 싶습니다. 여태까지 긴 글 읽어주셔서 정말 감사합니다.&lt;/p&gt;
&lt;p&gt;다음에도 새로운 프로젝트를 들고 찾아뵙겠습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[당신의 작업실] 9. 프로젝트 개발 과정 - 정규 표현식과 검색 기능 개선]]></title><description><![CDATA[당신의 작업실 프로젝트 링크: https://pixel-workroom.herokuapp.com/ 프로젝트 깃허브 저장소 링크 : https://github.com/ha-il/project-pixel…]]></description><link>https://ha-il.github.io/side-project/project-pixel/9-dev-regexp/</link><guid isPermaLink="false">https://ha-il.github.io/side-project/project-pixel/9-dev-regexp/</guid><pubDate>Tue, 20 Jun 2023 05:20:09 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;당신의 작업실 프로젝트 링크: &lt;a href=&quot;https://pixel-workroom.herokuapp.com/&quot;&gt;https://pixel-workroom.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;프로젝트 깃허브 저장소 링크 : &lt;a href=&quot;https://github.com/ha-il/project-pixel&quot;&gt;https://github.com/ha-il/project-pixel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;들어가기 전에&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/8-dev-prop-this/&quot;&gt;이전 글&lt;/a&gt;에서는 개발 과정에서 맞닥뜨렸던 &lt;strong&gt;컴포넌트간 prop(속성) 전달 문제&lt;/strong&gt;에 대해서 다뤘습니다. 이번 글에서는 &lt;strong&gt;검색 기능의 정규 표현식 사용 문제&lt;/strong&gt;에 대해서 다뤄보겠습니다.&lt;/p&gt;
&lt;h2&gt;1. &quot;당신의 작업실&quot;의 검색 기능 간략 소개&lt;/h2&gt;
&lt;p&gt;문제 해결 과정을 설명하기 전에, 프로젝트의 음악 추가 기능과 검색 기능을 간략히 소개하겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&quot;당신의 작업실&quot;의 음악 추가 기능&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/d31f16cb-f9f5-4c6b-8626-6f9802231579&quot; width=&quot;100%&quot; alt=&quot;music-registration&quot;&gt;
&lt;p&gt;음악 추가 기능은 사용자가 &lt;strong&gt;유튜브 URL&lt;/strong&gt;을 입력하면 해당 영상의 정보를 띄워주고, &lt;strong&gt;영상의 제목과 아티스트의 이름을 수정&lt;/strong&gt;하여 데이터베이스에 등록할 수 있는 기능입니다. 이렇게 등록한 음악을 자신의 플레이리스트에 추가하기 위해서는 그 곡을 &lt;strong&gt;검색할 필요가 있었습니다&lt;/strong&gt;. 그래서 아래 이미지와 같이 검색 기능을 구현했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&quot;당신의 작업실&quot;의 음악 검색 기능&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/648817ef-814f-4381-a8ff-120cb92a3c08&quot; width=&quot;100%&quot; alt=&quot;music-searching&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;p&gt;&apos;특별할 것 없는 평범한 검색 기능입니다&apos;라고 생각했습니다만. 사실 문제가 굉장히 많았습니다. 그 이유는 검색 기능을 구현할 때 사용했던 &lt;strong&gt;정규 표현식&lt;/strong&gt; 때문인데요. 당시에는 정규 표현식에 대한 지식이 없어서 아래와 같이 간략히 구현했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;searchMusic&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; searchWord &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; musics &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;searchWord&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    musics &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 정규 표현식을 사용한 부분&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;$regex&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;searchWord&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&apos;희재&apos;를 검색하면 &apos;희재&apos;가 나오고, &apos;두 사람&apos;을 검색하면 &apos;두 사람&apos;이 나왔습니다. 아무런 문제가 없다고 생각하고 검색 기능은 이 상태로 마무리 지었습니다. 하지만 프로젝트에 대한 피드백으로 &lt;code class=&quot;language-text&quot;&gt;추가한 음악이 검색되지 않는다&lt;/code&gt;라는 피드백을 받았습니다.&lt;/p&gt;
&lt;h2&gt;2. 기존 검색 기능의 문제점&lt;/h2&gt;
&lt;p&gt;여러분이 &lt;code class=&quot;language-text&quot;&gt;&apos;너의 모든 순간&apos;&lt;/code&gt;이라는 곡을 검색한다면 어떤 검색어를 입력하시겠습니까? 저라면 &lt;code class=&quot;language-text&quot;&gt;&apos;너의&apos;&lt;/code&gt;까지만 검색할 것 같습니다. 관련된 곡이 너무 많다면 &lt;code class=&quot;language-text&quot;&gt;&apos;너의 모든&apos;&lt;/code&gt;까지 입력할 수도 있을 것입니다. 하지만 제가 구현한 검색 기능에 이 두 가지 검색어를 입력하면 &lt;strong&gt;아무런 곡이 나오지 않았습니다&lt;/strong&gt;. &lt;code class=&quot;language-text&quot;&gt;&apos;너의 모든 순간&apos;&lt;/code&gt;을 완벽히 입력했을 때 곡이 검색됐습니다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/ha-il/ha-il.github.io/assets/108077643/8f07a563-599f-4dd4-bcf6-94794b53bde8&quot; width=&quot;100%&quot; alt=&quot;fix-search&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;p&gt;또 다른 문제점도 있었습니다. 바로 제목 앞뒤로 &lt;strong&gt;공백이 포함되었을 때도 검색이 되지 않았습니다&lt;/strong&gt;. 음악을 데이터베이스에 저장할 때 공백을 포함하여 &quot;   미소천사   &quot;와 같이 제목을 저장하면, 해당 곡을 찾을 수 없었습니다.
&lt;br/&gt;&lt;/p&gt;
&lt;img src=&quot;https://github.com/ha-il/ha-il.github.io/assets/108077643/5b08a35a-5cfd-4b14-b7a0-2434184a98c8&quot; width=&quot;100%&quot; alt=&quot;trim-error&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&quot;정규 표현식 공부해야겠다.&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;사람은 어째서 당해봐야 깨닫는 것일까요? 그 이후로 MDN과 &apos;모던 자바스크립트 딥 다이브&apos;를 참고하여 정규 표현식을 공부하고 블로그에 정리한 다음(&lt;a href=&quot;https://ha-il.github.io/regexp/&quot;&gt;해당 글&lt;/a&gt;), 프로젝트에 사용한 정규 표현식을 수정했습니다.&lt;/p&gt;
&lt;h2&gt;3. 먼저, 공백 입력부터 해결하기&lt;/h2&gt;
&lt;p&gt;정규 표현식을 수정하기 전에, 우선은 제목과 아티스트를 입력 받을 때 &lt;strong&gt;앞뒤 공백을 제거&lt;/strong&gt;하도록 코드를 수정하는 것이 좋겠다는 판단이 들었습니다. &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/trim&quot;&gt;String.prototype.trim()&lt;/a&gt; 메서드를 사용하여 쉽게 해결할 수 있었습니다. 아래와 같이 코드를 수정했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MusicRegistrationForm&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#music-registration-form&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// ...생략..&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#title&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// trim 메서드를 추가해줬습니다.&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; artist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#artist&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; musicData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        youtubeId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        imageUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        duration&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        artist&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      
      &lt;span class=&quot;token comment&quot;&gt;// ...생략..&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4. 기존 검색 기능에 사용한 정규 표현식 분석하기&lt;/h2&gt;
&lt;p&gt;기존 검색에 사용했던 정규 표현식은 아래와 같습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;searchWord&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;new RegExp(&lt;code class=&quot;language-text&quot;&gt;${searchWord}$&lt;/code&gt;, &quot;i&quot;)라는 것은 제목이 &lt;code class=&quot;language-text&quot;&gt;searchWord&lt;/code&gt;로 끝나는 음악들만 검색하는 것입니다.&lt;/p&gt;
&lt;p&gt;예를 들어 &apos;두 사람&apos;이라는 곡을 검색하는 상황을 가정해보면 아래와 같은 결과가 나옵니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dbMusic &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;두 사람&quot;&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;람$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;사람$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;두 사람$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;두사람$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false (띄어쓰기 안 하면 검색 불가)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;두$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false (제목 앞부분으로는 검색 불가)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;공백 문제를 해결하지 않았을 경우에 위의 정규 표현식은 어떻게 작동했을까요?&lt;/p&gt;
&lt;p&gt;예를 들어 &quot;두 사람&quot;이라는 제목이 &quot;두 사람 &quot;으로 제목 뒤에 &lt;code class=&quot;language-text&quot;&gt;공백&lt;/code&gt;이 추가된 상태로 저장되면 아래와 같은 결과가 나옵니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dbMusic &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;두 사람 &quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 공백 하나 추가 되었을 뿐인데...&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;람$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;사람$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;두 사람$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;두사람$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;두$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 유저가 추가한 곡을 검색할 방법이 없다...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;trim 메서드로 공백문제를 해결했어도 정규 표현식을 수정하지 않으면 안 되는 또다른 이유가 있었습니다.&lt;/p&gt;
&lt;p&gt;만약 노래 제목이 &apos;아름다운 구속(With.김종서)&apos;과 같다면 어떨까요?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&apos;아름다운 구속(With.김종서)&apos;&lt;/code&gt;이라는 곡을 찾기 위해 유저들은 &lt;code class=&quot;language-text&quot;&gt;&apos;아름다운&apos;&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;&apos;구속&apos;&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;&apos;아름다운 구속&apos;&lt;/code&gt;과 같은 키워드를 입력할 것이지, &lt;strong&gt;(with.김종서)를 입력하지는 않을 것&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;하다못해 &apos;김종서&apos;라고 검색해서 나오기라도 하면 다행이지만 그것도 불가능합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dbMusic &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;아름다운 구속(With.김종서)&quot;&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;아름다운$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;구속$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;아름다운 구속$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;김종서$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 유저: 내가 추가한 음악 어딨는겨...😭&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;현재 정규 표현식대로면 &apos;김종서)&apos;로 괄호까지 추가해서 검색해야 음악을 찾을 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;그런데 이것이 또 치명적인 문제로 이어집니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;정규 표현식에서 &lt;code class=&quot;language-text&quot;&gt;)&lt;/code&gt;는 패턴에 사용되는 특수 문자이므로 이스케이핑을 해줘야 합니다.&lt;/p&gt;
&lt;p&gt;이스케이핑을 하지 않고 특수 문자를 입력하면, false가 반환되는 정도가 아니라 &lt;strong&gt;에러가 발생해서 프로젝트가 멈춥니다&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dbMusic &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;아름다운 구속(With.김종서)&quot;&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;김종서\&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// true (이스케이핑 해줬을 때)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;김종서&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;$&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbMusic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// SyntaxError: Invalid regular expression: /김종서)$/: Unmatched &apos;)&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정규 표현식을 공부하지 않고 그대로 뒀다면 프로젝트의 실행이 멈춰버리는 경우를 그대로 안고 갈 뻔 했습니다.&lt;/p&gt;
&lt;p&gt;따라서 이 기능에서 업데이트를 해야 하는 부분은 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 유저가 입력한 &lt;code class=&quot;language-text&quot;&gt;검색어로 끝나는 제목들만 검색하는 방식&lt;/code&gt;에서, 유저가 입력한 &lt;code class=&quot;language-text&quot;&gt;검색어가 포함된 제목들을 검색하는 방식&lt;/code&gt;으로 정규 표현식을 수정한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 정규 표현식으로 음악 제목을 검색할 것이라면, 정규 표현식에 사용되는 &lt;code class=&quot;language-text&quot;&gt;특수문자가 포함된 검색어는 입력할 수 없게 하거나&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;서버에서 이스케이핑 작업을 거친 다음에 검색&lt;/code&gt;해야 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;5. 검색 기능 개선하기&lt;/h2&gt;
&lt;h3&gt;5.1 정규 표현식 수정&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 기존의 정규 표현식&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; searchWord &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;searchWord&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사실 가장 간단하게 수정하는 방법은 &lt;code class=&quot;language-text&quot;&gt;$&lt;/code&gt;기호를 제거하는 것입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; searchWord &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;두&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;searchWord&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;한 사람&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;두 사람&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;두사 람&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true (&apos;두&apos;라는 문자만 포함되면 true를 반환)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;세 사람&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;목적은 달성했지만, 여전히 아쉬운 점이 있습니다.&lt;/p&gt;
&lt;p&gt;만약 유저가 &quot;&lt;code class=&quot;language-text&quot;&gt;사&lt;/code&gt;&quot;를 입력하면 어떻게 될까요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; searchWord &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;사&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;searchWord&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;한 사람&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;두 사람&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;두사 람&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;세 사람&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true (&quot;사&quot;가 포함된 모든 곡을 다 찾는다.)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;지금의 정규 표현식에서 &apos;사&apos;를 검색하면 데이터베이스에 존재하는 &apos;사&apos;가 들어간 모든 곡들을 검색할 것이고, 이는 비효율적입니다.&lt;/p&gt;
&lt;p&gt;제가 원하는 것은 &quot;&lt;code class=&quot;language-text&quot;&gt;뜨거운&lt;/code&gt;&quot; 또는 &quot;&lt;code class=&quot;language-text&quot;&gt;안녕&lt;/code&gt;&quot;으로 검색해야 &quot;&lt;code class=&quot;language-text&quot;&gt;뜨거운 안녕&lt;/code&gt;&quot;이라는 곡을 찾을 수 있게 하는 것입니다.&lt;/p&gt;
&lt;p&gt;&quot;&lt;code class=&quot;language-text&quot;&gt;뜨&lt;/code&gt;&quot;, &quot;&lt;code class=&quot;language-text&quot;&gt;뜨거&lt;/code&gt;&quot;로 검색할 경우 &lt;strong&gt;&quot;뜨거운 안녕&quot;이라는 곡이 검색되지 않도록 구현&lt;/strong&gt;하고 싶습니다.&lt;/p&gt;
&lt;p&gt;즉, 유저의 검색어를 완결된 한 단어로 가지고 있는 제목의 곡만 검색하는 것입니다.&lt;/p&gt;
&lt;h4&gt;경계를 나타내는 특수문자 &lt;code class=&quot;language-text&quot;&gt;\b&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;이런 상황에서는 정규 표현식에서 &lt;code class=&quot;language-text&quot;&gt;경계를 나타내는&lt;/code&gt; 특수 문자 &lt;code class=&quot;language-text&quot;&gt;\b&lt;/code&gt;를 사용해주면 좋습니다. &lt;code class=&quot;language-text&quot;&gt;\b&lt;/code&gt;는 무엇의 경계를 의미하는 것일까요?&lt;/p&gt;
&lt;p&gt;정규 표현식에서 &lt;code class=&quot;language-text&quot;&gt;\w&lt;/code&gt; 라는 특수문자가 있습니다. 이 특수 문자는 &lt;code class=&quot;language-text&quot;&gt;/[A-Za-z0-9_]/&lt;/code&gt;을 의미하고, 이를 &lt;code class=&quot;language-text&quot;&gt;word character&lt;/code&gt;라 부릅니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;\b&lt;/code&gt;는 바로 이 &lt;code class=&quot;language-text&quot;&gt;word character&lt;/code&gt;인 것과 아닌 것의 경계를 의미합니다. 즉, &lt;strong&gt;알파벳, 숫자, 언더스코어인 문자와 그 밖의 다른 문자들간의 경계를 의미&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;\b&lt;/code&gt;를 사용해서 어떻게 정규 표현식을 수정했는지 아래 코드를 통해 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 유저의 검색어 searchWord의 앞 뒤를 경계로 지정합니다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;searchWord&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;\\b&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;searchWord&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;\\b&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;l&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;LOVE DIVE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;lo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;LOVE DIVE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;lov&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;LOVE DIVE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;love&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;LOVE DIVE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true (i 플래그로 대소문자 구별 안 함)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;DIVE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;LOVE DIVE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true &lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;LOVE DIVE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token comment&quot;&gt;// true (공백 앞 뒤로 word character가 있기 때문에 경계로 인식해서 true 반환)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 수정하면 제가 원하던대로 결과가 나오지만, 약간의 문제가 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;공백 하나만 입력할 경우&lt;/code&gt;도 true로 인식하기 때문에 이 부분은 유저가 공백만 입력하는 것을 방지하도록 코드를 수정하면 됩니다.&lt;/p&gt;
&lt;p&gt;공백 문제보다 더 심각한 문제는 이 정규 표현식이 &lt;code class=&quot;language-text&quot;&gt;한글에는 적용되지 않는다&lt;/code&gt;는 점입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;searchWord&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;\\b&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;searchWord&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;\\b&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거운 안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거운 안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거운&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거운 안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false (여기는 true가 나와야 하는데...)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거운 안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false (여기는 true가 나와야 하는데...)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;원인에 대한 힌트는 바로 &lt;code class=&quot;language-text&quot;&gt;\b&lt;/code&gt;에 있습니다. &lt;code class=&quot;language-text&quot;&gt;\b&lt;/code&gt;는 &apos;word character&apos;인 것과 아닌 것의 경계를 의미하는데, 이 &apos;word character&apos;에는 &lt;strong&gt;한글이 포함되지 않습니다&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;바로 위 코드의 정규식을 적용했을 때 모두 false가 나오는 이유는, &quot;뜨거운 안녕&quot;이라는 문자열은 &apos;word character&apos;가 아닌 문자들로만 이뤄져있기 때문에, &lt;strong&gt;경계를 나눌 수가 없기 때문&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;한글 검색어를 다룰 때는 아래와 같이 수정해주면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;searchWord&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;(?&amp;lt;![가-힣])&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;searchWord&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;(?![가-힣])&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거운 안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거운 안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거운&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거운 안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true &lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거운 안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;위 예시에서 사용한 정규 표현식 문법
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;(?&amp;lt;!y)x&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Negative lookbehind assertion(부정형 전방 탐색)&lt;/li&gt;
&lt;li&gt;&quot;x&quot; 앞에 &quot;y&quot;가 오지 않는 경우에만 &quot;x&quot;와 일치합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;x(?!y)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Negative ;ookahead assertion(부정형 후방 탐색)&lt;/li&gt;
&lt;li&gt;&quot;x&quot; 뒤에 &quot;y&quot;가 오지 않는 경우에만 &quot;x&quot;와 일치합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 검색어가 &lt;strong&gt;영어&lt;/strong&gt;일 때와 &lt;strong&gt;한글&lt;/strong&gt;일 때 사용할 수 있는 정규 표현식을 작성해봤습니다. 검색어를 받고 그 검색어가 한글만으로 또는 영어만으로 이뤄졌는지 확인하고, 그 결과에 따라서 정규 표현식을 다르게 적용하는 것도 방법이 될 수 있겠습니다.&lt;/p&gt;
&lt;p&gt;하지만, &lt;strong&gt;하나의 정규 표현식으로 한글과 영어 검색이 가능하도록 구현할 수는 없을까요&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;저는 이렇게 수정했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;searchWord&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;(?&amp;lt;![A-Za-z0-9_가-힣])&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;searchWord&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;(?![A-Za-z0-9_가-힣])&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;l&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;LOVE DIVE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;lo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;LOVE DIVE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;lov&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;LOVE DIVE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;love&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;LOVE DIVE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true &lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;DIVE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;LOVE DIVE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true &lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거운 안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거운 안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거운&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거운 안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;뜨거운 안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 검색 기능을 업그레이드하기 위한 기나긴 여정이 끝났습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;   &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;searchWord&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;searchWord&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;\\b&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;searchWord&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;\\b&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;(?&amp;lt;![가-힣])&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;searchWord&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;(?![가-힣])&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;(?&amp;lt;![A-Za-z0-9_가-힣])&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;searchWord&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;(?![A-Za-z0-9_가-힣])&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;5.2 특수문자 이스케이핑하기&lt;/h3&gt;
&lt;p&gt;사실, 특수문자를 이스케이핑하는 것보다 쉬운 방법은 &lt;strong&gt;그냥 유저에게 특수문자를 입력받지 않는 것&lt;/strong&gt;입니다. 하지만 프로젝트가 &lt;code class=&quot;language-text&quot;&gt;&apos;나만의 작업실&apos;인데 음악 제목조차 마음대로 짓지 못하게 한다는 것&lt;/code&gt;이 마음에 걸렸습니다. 게다가 실제 발매된 음원 중에서 간혹 &lt;code class=&quot;language-text&quot;&gt;제목에 특수문자를 포함시킨 곡들도 있었기 때문&lt;/code&gt;에 이런 곡들을 특수문자 없이 저장하게 할 수는 없었습니다. 이러한 이유로 &lt;strong&gt;유저에게 특수문자를 입력하지 못 하게 하는 것은 프로젝트 방향성과 맞지 않다&lt;/strong&gt;고 생각했습니다.&lt;/p&gt;
&lt;p&gt;따라서, &lt;strong&gt;서버에서 검색어의 특수문자를 이스케이핑하는 코드를 추가&lt;/strong&gt;하기로 했습니다. 이 때 &lt;code class=&quot;language-text&quot;&gt;String.prototype.replace()&lt;/code&gt; 메서드를 사용했는데요. MDN의 replace() 메서드에 대한 문서에서 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/replace&quot;&gt;&lt;strong&gt;매개변수가 string으로 지정되었을 때&lt;/strong&gt;&lt;/a&gt;를 읽고 오시면 이해가 더 쉽습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;searchWord&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[.*+?^${}()|[\]\\]&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;\\$&amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[.*+?^${}()|[\]\\]&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 이스케이프 해야 하는 모든 문자를 의미합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token literal-property property&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 문자열의 전체를 탐색하라는 전역 플래그입니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;\\$&amp;amp;&quot;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; \\ &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 역슬래시 또한 특수 문자기 때문에 이스케이프 처리를 해서 \\가 된 것입니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; $&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 매치된 문자열을 삽입하는 특수 교체 패턴입니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드를 검색 기능을 담당하는 함수에 추가했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;searchMusic&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; searchWord &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; musics &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;searchWord&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; escapedSearchWord &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; searchWord&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[.*+?^${}()|[\]\\]&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;\\$&amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    musics &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Music&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;$regex&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;(?&amp;lt;![A-Za-z0-9_가-힣])&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;escapedSearchWord&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;(?![A-Za-z0-9_가-힣])&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;마치며&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/7-dev-cookie/&quot;&gt;&apos;쿠키 설정&apos;&lt;/a&gt;, &lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/8-dev-prop-this/&quot;&gt;&apos;prop과 this 바인딩&apos;&lt;/a&gt;, &apos;정규 표현식을 통한 검색 기능 개선&apos;을 중심으로 &apos;당신의 작업실&apos;을 개발했던 과정을 쭉 다뤄봤습니다.&lt;/p&gt;
&lt;p&gt;쿠키에 대한 글을 작성할 때 &quot;&lt;code class=&quot;language-text&quot;&gt;가장 기억에 남는 문제들은 지식 또는 경험의 부족으로 인해 발생했던 문제들이었다&lt;/code&gt;&quot;라는 말을 했었는데요. 왜 그럴까 생각해보면, &lt;strong&gt;그 문제를 통해 제 스스로가 많이 성장했다는 것&lt;/strong&gt;을 느꼈기 때문인 것 같습니다. MDN이나 &apos;모던 자바스크립트 Deep Dive&apos; 등을 참고하면서 문제의 원인이나 해결 방법에 대한 실마리를 발견했을 때는 정말 짜릿했던 것 같습니다.&lt;/p&gt;
&lt;p&gt;저와 같은 초보 개발자는 여전히 배워야할게 산더미지만, 이런 경험을 하고 나니 &lt;strong&gt;배워야 할게 많다는 사실이 부담으로 다가오기 보다는 설렘으로 다가오는 것 같습니다&lt;/strong&gt;. 정말 값진 경험이었습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/10-ending/&quot;&gt;다음 글&lt;/a&gt;에서는 프로젝트를 통해 얻은 것과 아쉬웠던 점, 그리고 앞으로의 계획에 대해서 이야기해보려합니다. &quot;당신의 작업실&quot;과 관련된 마지막 글이 될 것 같습니다.&lt;/p&gt;
&lt;h2&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MDN Web Docs: String.prototype.trim()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/trim/contributors.txt&quot;&gt;MDN contributors.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;accessed June 21&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/trim&quot;&gt;문서 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MDN Web Docs: String.prototype.replace()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/replace/contributors.txt&quot;&gt;MDN contributors.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;accessed June 21&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/replace&quot;&gt;문서 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[[당신의 작업실] 8. 프로젝트 개발 과정 - prop과 this 바인딩]]></title><description><![CDATA[당신의 작업실 프로젝트 링크: https://pixel-workroom.herokuapp.com/ 프로젝트 깃허브 저장소 링크 : https://github.com/ha-il/project-pixel…]]></description><link>https://ha-il.github.io/side-project/project-pixel/8-dev-prop-this/</link><guid isPermaLink="false">https://ha-il.github.io/side-project/project-pixel/8-dev-prop-this/</guid><pubDate>Tue, 20 Jun 2023 05:20:08 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;당신의 작업실 프로젝트 링크: &lt;a href=&quot;https://pixel-workroom.herokuapp.com/&quot;&gt;https://pixel-workroom.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;프로젝트 깃허브 저장소 링크 : &lt;a href=&quot;https://github.com/ha-il/project-pixel&quot;&gt;https://github.com/ha-il/project-pixel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;들어가기 전에&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/7-dev-cookie&quot;&gt;이전 글&lt;/a&gt;부터는 개발 과정에서 맞닥뜨렸던 문제들과 그 해결 과정에 대해서 다루고 있습니다. &lt;strong&gt;쿠키 설정에 대한 문제&lt;/strong&gt;는 이전 글에서 다뤘으니, 이번 글에서는 &lt;strong&gt;컴포넌트간 prop(속성) 전달 문제&lt;/strong&gt;에 대해서 다루고, 그 문제를 해결하기 위한 &lt;strong&gt;this 바인딩&lt;/strong&gt;에 대한 내용도 다루겠습니다.&lt;/p&gt;
&lt;h2&gt;1. 컴포넌트간 prop(속성) 전달 문제&lt;/h2&gt;
&lt;p&gt;이번 프로젝트는 바닐라 자바스크립트로 &lt;strong&gt;웹 컴포넌트&lt;/strong&gt;를 구현하여 프로그래밍하는 방식으로 진행했습니다. 그 과정에서 prop을 전달할 일이 많았는데 그 과정에서 문제가 발생했습니다. 문제에 대해서 설명하기 전에, 이 프로젝트가 &lt;strong&gt;어떤 구조로 렌더링되고 있는지&lt;/strong&gt; 간략하게 소개하겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    // 경로가 &quot;/&quot;인 경우 home-container 렌더링
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;home-container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;cabinet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      ... 그밖의 많은 가구 오브젝트들 ...
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    // 경로가 &quot;/playlists/:id&quot;인 경우 playlist-container 렌더링
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;playlist-container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    // 경로가 &quot;/playlists/chart&quot;인 경우 chart-container 렌더링
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;chart-container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;music-player&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;app&lt;/strong&gt; 컴포넌트가 &lt;strong&gt;main&lt;/strong&gt;과 &lt;strong&gt;musicPlayer&lt;/strong&gt;를 렌더링합니다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;musicPlayer&lt;/strong&gt;는 사이트 어디에서나 재생되어야하므로 main 컴포넌트와 분리했습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;main&lt;/strong&gt; 컴포넌트는 경로에 따라서 다른 컴포넌트를 렌더링합니다.
&lt;ul&gt;
&lt;li&gt;경로가 &quot;&lt;strong&gt;/&lt;/strong&gt;&quot;인 경우 home-container 렌더링 =&gt; &lt;strong&gt;홈페이지&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;경로가 &quot;&lt;strong&gt;/playlists/:id&lt;/strong&gt;&quot;인 경우 playlist-container 렌더링 =&gt; &lt;strong&gt;플레이리스트 상세 페이지&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;경로가 &quot;&lt;strong&gt;/playlists/chart&lt;/strong&gt;&quot;인 경우 chart-container 렌더링 =&gt; &lt;strong&gt;인기차트 페이지&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.1 플레이리스트 곡 목록을 뮤직 플레이어에서 재생하기&lt;/h3&gt;
&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/0969bf6e-0e81-4f96-b016-a3625f761c5b&quot; width=&quot;100%&quot; alt=&quot;props&quot;&gt;
&lt;p&gt;이미지를 보시면 &apos;재생&apos;이라고 적힌 노란색 버튼이 있는데요. 이 버튼을 누르면 &lt;strong&gt;플레이리스트의 모든 곡들이 뮤직 플레이어의 재생목록에 추가&lt;/strong&gt;되고 &lt;strong&gt;재생목록의 첫 곡부터 재생이 시작&lt;/strong&gt;되도록 구현하고 싶었습니다. 이런 플레이리스트 재생 기능은 어느 뮤직 앱에나 있는 기본적인 기능이기 때문에 반드시 추가하고 싶었습니다. 그러나 여기서 문제가 발생했습니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&apos;플레이리스트 컴포넌트에서 뮤직 플레이어 컴포넌트로 어떻게 곡을 보내야하지?&apos;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;상위 컴포넌트에서 하위 컴포넌트로 속성을 전달하는 것은 어려운 일이 아닙니다. &lt;strong&gt;하지만 하위 컴포넌트에서 상위 컴포넌트로 속성을 전달한다니&lt;/strong&gt;, 당시 제 지식으로는 어려운 일이었습니다. 그래서 생각을 바꾸기로 했습니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&apos;플레이리스트 컴포넌트(하위)에서 뮤직 플레이어 컴포넌트(상위)로 곡을 보내는 것이 아니다.&apos;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&apos;곡을 받아 재생하는 메서드를 뮤직 플레이어(상위)에서 플레이리스트(하위)로 보내야 한다.&apos;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;생각의 방향을 바꿨습니다. 하위에서 상위로 곡을 전달하고 재생하는게 아니라, &lt;strong&gt;곡을 받아서 재생하는 메서드를 상위 컴포넌트에서 하위 컴포넌트로 보내는 방식&lt;/strong&gt;으로 접근했습니다.&lt;/p&gt;
&lt;p&gt;글로만 설명하면 이해가 어려우니 뮤직 플레이어 컴포넌트의 코드를 보면서 재생 기능에 대해서 설명하겠습니다.&lt;/p&gt;
&lt;h3&gt;1.2 뮤직 플레이어 컴포넌트 설명&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MusicPlayer&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 컴포넌트 초기 세팅&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initYoutubeApi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initRouter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// initYoutubeApi: 유튜브 Iframe API를 다운로드하는 함수&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;initYoutubeApi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...생략...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;onYouTubeIframeAPIReady&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;player &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;YT&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Player&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;player&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// ...생략...&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// onReady: 유튜브 Iframe API의 다운로드가 완료되면 발생하는 이벤트&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;onReady&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onPlayerReady&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// onPlayerReady: onReady 이벤트가 발생하면 실행되는 함수&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;onPlayerReady&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;token comment&quot;&gt;// Iframe이 준비되면 재생을 시작한다.&lt;/span&gt;
    event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;playVideo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;// setState에 인수로 곡 목록을 배열로 전달한다면&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 뮤직 플레이어의 state에 추가한 곡 목록이 할당되고&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;newState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 뮤직 플레이어는 다시 렌더링 되고, 이벤트를 다시 설정하고&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// onYouTubeIframeAPIReady를 다시 실행시키면&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// onReady이벤트가 실행되어서 음악이 자동으로 재생된다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onYouTubeIframeAPIReady&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(&lt;strong&gt;참고&lt;/strong&gt;: 간략한 설명을 위해 많은 코드를 생략했습니다. YouTube Iframe API에 대해서 더 자세히 알고 싶은 분은 &lt;a href=&quot;https://developers.google.com/youtube/iframe_api_reference?hl=ko&quot;&gt;링크&lt;/a&gt;를 참고해주시기 바랍니다.)&lt;/p&gt;
&lt;p&gt;위 코드를 보면 뮤직 플레이어에서 곡 목록을 받아서 재생을 시작하는 메서드는 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;입니다. 따라서 &lt;code class=&quot;language-text&quot;&gt;setState&lt;/code&gt;를 플레이리스트 컴포넌트로 전달해야 했습니다.&lt;/p&gt;
&lt;h3&gt;1.3 뮤직 플레이어의 setState를 플레이리스트 컴포넌트로 전달하기&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...생략...&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; musicPlayer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MusicPlayer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#music-player&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// props에 MusicPlayer 컴포넌트의 setState 메서드를 담아서 하위 컴포넌트로 보냅니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Playlist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;playerSetState&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; musicPlayer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Playlist&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.play-button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// props로 전달받은 playerSetState에 접근합니다.&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; playerSetState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;// playerSetState에 플레이리스트 페이지의 곡 목록을 전달합니다.&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;playerSetState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;musics&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;currentMusic&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;예상대로라면, &lt;strong&gt;플레이리스트의 곡들이 뮤직 플레이어를 통해서 재생&lt;/strong&gt;되어야 합니다. 과연 잘 실행되었을까요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;MusicPlayer.js

❌ Uncaught TypeError: Cannot read properties of undefined (reading &apos;state&apos;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;바로 에러를 만났습니다. 이유가 뭘까요?&lt;/p&gt;
&lt;h3&gt;1.4 bind()를 사용하여 문제 해결&lt;/h3&gt;
&lt;p&gt;메시지를 읽어보면 &lt;strong&gt;undefined의 속성 state를 읽을 수 없다&lt;/strong&gt;고 합니다. MusicPlayer 컴포넌트의 setState 메서드를 보면 this.state 부분에서 &lt;strong&gt;this&lt;/strong&gt;를 참조하고 있습니다. 그렇다면 &lt;strong&gt;this가 가리키고 있는 대상이 뮤직플레이어가 아니라 undefined&lt;/strong&gt;이기 때문에 에러가 발생했음을 알 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MusicPlayer&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 이 부분의 this가 undefined라는 것.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;newState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onYouTubeIframeAPIReady&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이럴 때 사용할 수 있는 메서드가 있습니다. 바로 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;bind()&lt;/a&gt;입니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;bind&lt;/code&gt; 메서드는 함수를 호출하지 않고 첫 번째 인수로 전달한 값으로 &lt;strong&gt;this 바인딩이 교체된 함수를 새롭게 생성해서 반환&lt;/strong&gt;합니다. bind 메서드는 메서드의 this와 메서드 내부의 중첩 함수 또는 콜백 함수의 &lt;strong&gt;this가 불일치하는 문제를 해결하기 위해 유용하게 사용&lt;/strong&gt;됩니다.(출처: 모던 자바스크립트 Deep Dive, 357p)&lt;/p&gt;
&lt;p&gt;bind 매서드를 사용해서 코드를 수정하자, 원하던대로 플레이리스트의 곡을 뮤직 플레이어에서 재생할 수 있었습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...생략...&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; musicPlayer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MusicPlayer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#music-player&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// props에 MusicPlayer 컴포넌트의 setState 메서드를 담아서 하위 컴포넌트로 보냅니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Playlist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;playerSetState&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; musicPlayer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;musicPlayer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;플레이리스트 재생 기능 구현 성공&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/dde92e5e-fd1c-4661-9269-6bfd5ffc2e42&quot; width=&quot;100%&quot; alt=&quot;playing-playlist&quot;&gt;
&lt;h3&gt;1.5 문제는 해결했다. 그런데 왜 this가 undefined가 됐을까?&lt;/h3&gt;
&lt;p&gt;문제는 해결했지만 의문이 남았습니다. 왜 &lt;strong&gt;this&lt;/strong&gt;가 &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt; 였을까요?&lt;/p&gt;
&lt;p&gt;예전에 정리했던 글 &lt;a href=&quot;https://ha-il.github.io/troubleshooting/js-this/&quot;&gt;&quot;This 바인딩은 함수 호출 방식에 따라 결정된다&quot;&lt;/a&gt;를 다시 읽어보며 MusicPlayer 클래스를 호출했던 코드를 다시 확인해봤습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 이때 musicPlayer의 this는 MusicPlayer의 인스턴스가 맞다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; musicPlayer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MusicPlayer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#music-player&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 메서드를 따로 추출하여 playerSetState에 할당했다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// playerSetState는 인스턴스와 관계없는 독립적인 일반 함수다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Playlist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;playerSetState&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; musicPlayer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Playlist&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.play-button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      
      &lt;span class=&quot;token comment&quot;&gt;// props로 전달받은 playerSetState는 인스턴스와는 관계 없는 독립적인 일반 함수다.&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; playerSetState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      
      &lt;span class=&quot;token comment&quot;&gt;// playerSetState함수는 그저 musicPlayer.setState라는 함수를 실행하는 일반 함수다.&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;playerSetState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;musics&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;currentMusic&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playlist&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;musics&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MusicPlayer&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// setState 메서드가 실행되면 this를 참조한다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// this는 클래스가 생성할 인스턴스가 바인딩된다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// setState는 본래 &apos;인스턴스.setState()&apos;방식으로 호출되어야 한다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 그런데 playerSetState라는 독립적인 함수가 setState를 호출한다면 어떨까?&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// playerSetState는 일반 함수기 때문에 this에 전역 객체가 바인딩 된다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// playerSetState를 실행하면 setState의 this에는 전역 객체가 바인딩되는 것이다...&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 잠깐만, undefined가 아니라 전역 객체가 바인딩된다고???&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 그런데 왜 window가 아니라 undefined가 할당되지???&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;newState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onYouTubeIframeAPIReady&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;에러의 원인은 setState에서 this를 참조할 때 발생했습니다. setState 메서드는 MusicPlayer 클래스의 메서드입니다. MusicPlayer 클래스로 생성된 인스턴스 musicPlayer가 있다고 가정할 때, &lt;strong&gt;setState는 본래 musicPlayer.setState() 로 호출되었어야 합니다&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;하지만 musicPlayer.setState를 &lt;strong&gt;playerSetState라는 별개의 함수에 따로 저장&lt;/strong&gt;하고, &lt;strong&gt;prop으로 다른 컴포넌트에 보냈습니다&lt;/strong&gt;. 해당 컴포넌트에서 실행되는  playerSetState는 musicPlayer.setState와 동일한 함수지만, 인스턴스의 메서드로서 실행되는 것이 아니라 &lt;strong&gt;일반 함수로 실행됩니다&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;일반 함수는 호출됐을 때 this에 전역 객체가 바인딩&lt;/strong&gt;됩니다. &lt;strong&gt;브라우저의 경우 window 객체가 바인딩된다는 의미&lt;/strong&gt;입니다. 따라서 playerSetState로 호출한 setState의 this에는 &lt;strong&gt;undefined가 아닌 window가 할당되어야 합니다&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;1.6 왜 전역 객체(window)가 아니라 undefined일까?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;전역 객체를 undefined로 변환하는 경우&lt;/strong&gt;로는 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;strict 모드&lt;/a&gt;를 사용하는 경우가 있습니다. &lt;strong&gt;하지만 저는 strict 모드를 설정한 적이 없습니다&lt;/strong&gt;. 대체 어떻게 된 일일까요?&lt;/p&gt;
&lt;p&gt;새로운 프로젝트를 만들고 html 파일을 만들어서 script 태그에 자바스크립트 코드를 작성해보면서 원인을 찾았습니다. 그 원인은 바로 html의 script 태그의 속성인 &lt;code class=&quot;language-text&quot;&gt;type=&quot;module&quot;&lt;/code&gt; 때문이었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type=&quot;module&quot; 을 설정하지 않은 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
      &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// window&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;type=&quot;module&quot; 을 설정한 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;module&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
      &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// undefined&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;type=module에는 strict 모드가 적용된다&lt;/strong&gt;는 근거를 MDN의 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Modules&quot;&gt;JavaScript modules&lt;/a&gt; 문서에서 찾을 수 있었습니다.&lt;/p&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;표준 스크립트와 달리 모듈 내부에서 정의된 스크립트 섹션과는 다르게 동작할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;이는 모듈이 자동적으로 strict mode를 사용하기 때문입니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;h3&gt;1.7 원인을 알았으니 다른 방법으로도 해결해보자.&lt;/h3&gt;
&lt;p&gt;원인이 setState가 호출되는 곳에 따른 this 바인딩 때문이라면, &lt;strong&gt;화살표 함수&lt;/strong&gt;를 통해서도 문제를 해결할 수 있을 것입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; musicPlayer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MusicPlayer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#music-player&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 이번에는 bind 메서드를 사용하지 않았다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Playlist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;playerSetState&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; musicPlayer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MusicPlayer&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// setState를 화살표 함수로 정의한 것 만으로 에러를 해결했다.&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;setState&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;newState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onYouTubeIframeAPIReady&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 화살표 함수로 정의했을 뿐인데, 에러없이 플레이리스트 재생 기능이 정상 작동했습니다. 이는 화살표 함수의 특징 때문입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;화살표 함수는 함수 자체의 this 바인딩을 갖지 않는다. 따라서 화살표 함수 내부에서 this를 참조하면 상위 스코프의 this를 그대로 참조한다. 이를 lexical this라 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;#x3C;모던 자바스크립트 Deep Dive, 480p&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;즉 setState를 화살표 함수로 정의하면 setState의 this 바인딩은 상위 스코프인 MusicPlayer 클래스의 this를 그대로 참조할 것이고, MusicPlayer 클래스의 this는 클래스가 생성할 인스턴스이므로, &lt;strong&gt;setState의 this는 클래스가 생성할 인스턴스가 바인딩됩니다.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by 이웅모 (출처: 위키북스, 2020), p.357 “22장 this”, p.480 “26장 ES6 함수의 추가 기능”&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://product.kyobobook.co.kr/detail/S000001766445&quot;&gt;도서 구매 링크(교보문고)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MDN Web Docs: bind()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/bind/contributors.txt&quot;&gt;MDN contributors.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;accessed June 20&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;문서 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MDN Web Docs: Strict mode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode/contributors.txt&quot;&gt;MDN contributors.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;accessed June 20&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;문서 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MDN Web Docs: JavaScript modules&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Modules/contributors.txt&quot;&gt;MDN contributors.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;accessed June 20&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Modules&quot;&gt;문서 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iframe 삽입에 대한 YouTube Player API 참조 문서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by Google Developers&lt;/li&gt;
&lt;li&gt;accessed June 20&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/youtube/iframe_api_reference?hl=ko&quot;&gt;문서 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[[당신의 작업실] 7. 프로젝트 개발 과정 - 쿠키 설정]]></title><description><![CDATA[당신의 작업실 프로젝트 링크: https://pixel-workroom.herokuapp.com/ 프로젝트 깃허브 저장소 링크 : https://github.com/ha-il/project-pixel…]]></description><link>https://ha-il.github.io/side-project/project-pixel/7-dev-cookie/</link><guid isPermaLink="false">https://ha-il.github.io/side-project/project-pixel/7-dev-cookie/</guid><pubDate>Tue, 20 Jun 2023 05:20:07 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;당신의 작업실 프로젝트 링크: &lt;a href=&quot;https://pixel-workroom.herokuapp.com/&quot;&gt;https://pixel-workroom.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;프로젝트 깃허브 저장소 링크 : &lt;a href=&quot;https://github.com/ha-il/project-pixel&quot;&gt;https://github.com/ha-il/project-pixel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;들어가기 전에&lt;/h2&gt;
&lt;p&gt;이번 글부터는 개발 과정에서 맞닥뜨렸던 문제들과 그 해결 과정에 대해서 다뤄보겠습니다. 맞닥뜨렸던 문제들이야 어마어마하게 많았지만 그 중에 기억에 남는 것은 &lt;strong&gt;지식 또는 경험의 부족&lt;/strong&gt;으로 인해 발생했던 문제들인 것 같습니다. 원인이 오타나 문법 실수가 아니기 때문에 더 답답했던 문제들이 있었는데요. 바로 아래와 같은 문제들이었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;쿠키 설정 문제&lt;/strong&gt;: express에서 res.local 없이 쿠키 정보를 어떻게 넘기지?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;컴포넌트간 prop(속성) 전달 문제&lt;/strong&gt;: 플레이리스트의 곡들을 뮤직플레이어로 어떻게 넘겨서 재생시키지?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;검색 기능의 정규 표현식 사용 문제&lt;/strong&gt;: 검색 기능을 더 편리하게 개선할 수는 없을까?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이번 글에서는 &lt;strong&gt;쿠키 설정 문제&lt;/strong&gt;를 어떻게 해결했는지를 중점적으로 다루겠습니다.&lt;/p&gt;
&lt;h2&gt;1. 쿠키 설정 문제&lt;/h2&gt;
&lt;p&gt;쿠키에 대한 문제가 발생한 이유는 저의 경험 부족 때문이었습니다. 예전에 &lt;strong&gt;express&lt;/strong&gt;와 &lt;strong&gt;pug&lt;/strong&gt;로 개인 프로젝트를 만들 때, &apos;&lt;strong&gt;로그인 유지&lt;/strong&gt;&apos; 기능을 구현하고 &apos;&lt;strong&gt;로그인한 유저의 정보&lt;/strong&gt;&apos;를 띄우기 위해 세션을 사용한 적이 있었습니다. 그때는 &lt;code class=&quot;language-text&quot;&gt;req.session&lt;/code&gt;에 로그인한 유저의 정보를 저장하고 &lt;code class=&quot;language-text&quot;&gt;res.locals&lt;/code&gt;에 세션 정보를 저장하여 pug에서 로그인한 유저의 정보를 활용하여 렌더링할 수 있었습니다.&lt;/p&gt;
&lt;p&gt;하지만 이번에는 pug로 서버 측에서 렌더링하는 것이 아니라, &lt;strong&gt;바닐라 자바스크립트로 클라이언트 측에서 렌더링&lt;/strong&gt;하기 때문에 &lt;code class=&quot;language-text&quot;&gt;res.locals&lt;/code&gt;를 활용할 수 없었습니다. 난감했지만 해결 방법은 간단했습니다. 서버에서 클라이언트 측으로 로그인한 유저의 정보를 보내는 방법만 알아내면 됐습니다. 서버에서 클라이언트로 뭔가 전송하는 방법 중 가장 먼저 떠오른 것은 &lt;strong&gt;쿠키&lt;/strong&gt;였습니다.&lt;/p&gt;
&lt;h3&gt;1.1 res.cookie: Express 서버에서 쿠키 설정하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://expressjs.com/ko/4x/api.html&quot;&gt;Express&lt;/a&gt; 공식문서에서 쿠키를 설정할 수 있는 방법을 검색해보니 &lt;a href=&quot;https://expressjs.com/ko/api.html#res.cookie&quot;&gt;res.cookie&lt;/a&gt;를 사용하면 쿠키를 설정할 수 있었습니다. 바로 프로젝트에 적용했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;login&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 클라이언트에서 입력 받은 유저네임과 비밀번호&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; username&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; password &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 유저네임에 해당하는 유저 검색&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; User&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; username &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;username&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;로 가입한 유저가 존재하지 않습니다.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 입력받은 비밀번호와 데이터베이스에 암호화되어 저장된 비밀번호를 비교&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; hashedPassword &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isValidPassword &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; bcrypt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; hashedPassword&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isValidPassword&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;errorMessage&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;비밀번호가 일치하지 않습니다.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 클라이언트로 공개되도 괜찮은 유저 정보만 loggedInUser 객체에 할당.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; loggedInUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;profileName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;profileName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 세션에 로그인 여부와 로그인한 유저 정보를 저장&lt;/span&gt;
  req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isLoggedIn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loggedInUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; loggedInUser&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 쿠키에 로그인 여부와 로그인한 유저 정보를 저장&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;isLoggedIn&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;loggedInUser&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; loggedInUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sendStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.2 document.cookie: 클라이언트에서 쿠키 데이터 참조하기&lt;/h3&gt;
&lt;p&gt;이렇게 서버에서 쿠키를 설정했다면, 클라이언트 측에서 &lt;code class=&quot;language-text&quot;&gt;document.cookie&lt;/code&gt;를 사용하여 쿠키에 있는 데이터를 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;그런데 데이터를 확인하니 조금 당황스러웠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// document.cookie

isLoggedIn=true; loggedInUser=j%3A%7B%22_id%22%3A%22646f1a16e5e2041b6bac11d2%22%2C%22username%22%3A%22q%22%2C%22profileName%22%3A%22%ED%95%98%EC%9D%BC%22%7D&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;쿠키의 데이터가 위와 같이 나온 이유는 &lt;code class=&quot;language-text&quot;&gt;퍼센트 인코딩&lt;/code&gt;이 되었기 때문인데요. 위키백과의 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%8D%BC%EC%84%BC%ED%8A%B8_%EC%9D%B8%EC%BD%94%EB%94%A9&quot;&gt;퍼센트 인코딩&lt;/a&gt; 문서에 따르면 &lt;strong&gt;URL&lt;/strong&gt;에서 중요하게 사용되는 &lt;strong&gt;예약 문자&lt;/strong&gt;가 있고 이들 중 일부는 &lt;strong&gt;URI에서 중요한 문법적 의미&lt;/strong&gt;를 가지고 있기 때문에, 그 의미로 사용할 것이 아니라면 &lt;strong&gt;반드시 인코딩&lt;/strong&gt;을 해야 한다고 합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;쿠키값에 포함된 특수문자나 공백&lt;/strong&gt;과 같은 문자들이 URL에서 사용되는 &lt;strong&gt;구분 기호나 예약 문자로 해석되지 않도록 하기 위해&lt;/strong&gt; 퍼센트 인코딩되었음을 짐작할 수 있었습니다.&lt;/p&gt;
&lt;p&gt;자바스크립트에서는 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent&quot;&gt;decodeURIComponent()&lt;/a&gt; 함수를 사용해서 퍼센트 인코딩된 데이터를 디코딩할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// document.cookie
isLoggedIn=true; loggedInUser=j%3A%7B%22_id%22%3A%22646f1a16e5e2041b6bac11d2%22%2C%22username%22%3A%22q%22%2C%22profileName%22%3A%22%ED%95%98%EC%9D%BC%22%7D


// decodeURIComponent(document.cookie);
isLoggedIn=true; loggedInUser=j:{&quot;_id&quot;:&quot;646f1a16e5e2041b6bac11d2&quot;,&quot;username&quot;:&quot;q&quot;,&quot;profileName&quot;:&quot;하일&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(&lt;strong&gt;참고&lt;/strong&gt;: 퍼센트 인코딩된 데이터를 디코딩하는 또다른 함수로 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/decodeURI&quot;&gt;decodeURI()&lt;/a&gt;가 있지만, encodeURI에서 도입할 수 없었던 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%9D%B4%EC%8A%A4%EC%BC%80%EC%9D%B4%ED%94%84_%EC%8B%9C%ED%80%80%EC%8A%A4&quot;&gt;이스케이프 시퀀스&lt;/a&gt;는 해독하지 않아서 &apos;#&apos; 문자는 이스케이프 시퀀스에서 디코딩되지 않는다고 합니다.)&lt;/p&gt;
&lt;h3&gt;1.3 쿠키에서 데이터를 추출하는 유틸함수 getCookie 만들기&lt;/h3&gt;
&lt;p&gt;쿠키의 데이터를 이대로 사용할 수 없기 때문에, &lt;code class=&quot;language-text&quot;&gt;decodeURIComponent()&lt;/code&gt;를 활용해서 쿠키를 디코딩하고 내가 원하는 데이터를 추출하기 위해 &lt;code class=&quot;language-text&quot;&gt;getCookie&lt;/code&gt;라는 유틸 함수를 만들었습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getCookie&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cookie &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; decodedCookie &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decodeURIComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cookie&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// &quot;isLoggedIn=true; loggedInUser=j:{&quot;_id&quot;:&quot;12345&quot;, ... }&quot;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; splitCookie &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; decodedCookie&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// [&apos;isLoggedIn=true&apos;, &apos;loggedInUser=j:{&quot;_id&quot;: &quot;12345&quot;, ... }&apos;]&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; foundKey &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; splitCookie&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// key가 isLoggedIn일때 foundKey =&gt; &apos;isLoggedIn=true&apos;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// key가 loggedInUser일때 foundKey =&gt; &apos;loggedInUser=j:{&quot;_id&quot;: &quot;12345&quot;, ... }&apos;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;foundKey&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; gettingValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; foundKey&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// gettingValue: foundKey에서 key를 제거하고 남은 value&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gettingValue &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; gettingValue &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gettingValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gettingValue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;j:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// &apos;j:{&quot;_id&quot;: &quot;12345&quot;, ... }&apos; =&gt; {id: 12345, ...}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gettingValue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.4 유틸함수 getCookie 활용 예&lt;/h3&gt;
&lt;h4&gt;1.4.1 로그인 여부에 따른 이미지 렌더링&lt;/h4&gt;
&lt;p&gt;&apos;당신의 작업실&apos; 프로젝트는, 사용자의 로그인 여부에 따라서 다른 이미지를 렌더링합니다.&lt;/p&gt;
&lt;p&gt;예를 들어서 사용자가 &lt;strong&gt;로그아웃 상태&lt;/strong&gt;라면 &apos;전원이 꺼져있는 티비&apos; 이미지를 보여주고, &lt;strong&gt;로그인 상태&lt;/strong&gt;라면 &apos;뮤직뱅크가 나오는 티비&apos; 이미지를 보여줍니다.&lt;/p&gt;
&lt;p&gt;프로젝트에 사용된 이미지가 많기 때문에 &lt;code class=&quot;language-text&quot;&gt;getCookie&lt;/code&gt; 함수를 여러 곳에서 사용했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;initState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 키를 문자열로 전달하기 때문에, 오타로 인한 에러 위험이 있어서 state에 저장해두고 사용.&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;isLoggedIn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCookie&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;isLoggedIn&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &amp;lt;div class=&quot;home-container&quot;&gt;
        &amp;lt;img id=&quot;tv&quot; class=&quot;object&quot; src=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isLoggedIn
            &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../../../../images/tv-on.gif&quot;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../../../../images/tv.png&quot;&lt;/span&gt;
        &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; /&gt;
        &amp;lt;div class=&quot;floor &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isLoggedIn &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;floor-dark&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&gt;
      &amp;lt;/div&gt;
    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;유저가 로그인하지 않은 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/46070a15-2868-4976-8d4f-93ddbfb88f38&quot; alt=&quot;tv&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;유저가 로그인한 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/1529f865-d4c8-4a5c-a8ba-3e8f8827c277&quot; alt=&quot;tv-on&quot;&gt;&lt;/p&gt;
&lt;h4&gt;1.4.2 로그인한 유저의 프로필 이름 띄우기&lt;/h4&gt;
&lt;p&gt;프로젝트에 사용된 스마트폰 오브젝트의 홈 화면에는 &lt;strong&gt;유저의 프로필 이름&lt;/strong&gt;을 띄우기로 했습니다. 이때도 &lt;code class=&quot;language-text&quot;&gt;getCookie&lt;/code&gt; 함수를 사용해 로그인한 유저의 프로필 이름을 띄울 수 있었습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PhoneHome&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;initState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;loggedInUser&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCookie&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;loggedInUser&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &amp;lt;div class=&quot;time-container&quot;&gt;
        &amp;lt;div class=&quot;date&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCurrentDate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
        &amp;lt;div class=&quot;time&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCurrentTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
        &amp;lt;div class=&quot;greeting&quot;&gt;Hello, &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loggedInUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;profileName
        &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; !&amp;lt;/div&gt;
      &amp;lt;/div&gt;
    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;스마트폰 오브젝트의 홈 화면&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/b00034b9-db5d-49d0-bae6-de0f8c42c519&quot; alt=&quot;cookie-ex&quot;&gt;&lt;/p&gt;
&lt;h2&gt;마치며&lt;/h2&gt;
&lt;p&gt;이번 글에서는 &lt;strong&gt;쿠키 설정&lt;/strong&gt;에 대해서 다뤄봤습니다. &lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/8-dev-prop-this&quot;&gt;다음 글&lt;/a&gt;에서는 &lt;strong&gt;컴포넌트간 props 전달 문제&lt;/strong&gt;를 해결한 과정에 대해서 다뤄보겠습니다.&lt;/p&gt;
&lt;h2&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Express API&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by © StrongLoop, Inc., and other expressjs.com contributors&lt;/li&gt;
&lt;li&gt;accessed June 20&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://expressjs.com/ko/4x/api.html&quot;&gt;문서 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Express API: Response: res.cookie&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by © StrongLoop, Inc., and other expressjs.com contributors&lt;/li&gt;
&lt;li&gt;accessed June 20&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://expressjs.com/ko/api.html#res.cookie&quot;&gt;문서 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위키백과: 이스케이프 시퀀스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by Wikipedia®&lt;/li&gt;
&lt;li&gt;accessed June 20&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%9D%B4%EC%8A%A4%EC%BC%80%EC%9D%B4%ED%94%84_%EC%8B%9C%ED%80%80%EC%8A%A4&quot;&gt;문서 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위키백과: 퍼센트 인코딩&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by Wikipedia®&lt;/li&gt;
&lt;li&gt;accessed June 20&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%8D%BC%EC%84%BC%ED%8A%B8_%EC%9D%B8%EC%BD%94%EB%94%A9&quot;&gt;문서 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MDN Web Docs: decodeURIComponent()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent/contributors.txt&quot;&gt;MDN contributors.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;accessed June 20&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent&quot;&gt;문서 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MDN Web Docs: decodeURI()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/decodeURI/contributors.txt&quot;&gt;MDN contributors.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;accessed June 20&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/decodeURI&quot;&gt;문서 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[[당신의 작업실] 6. 요구사항 명세 과정]]></title><description><![CDATA[당신의 작업실 프로젝트 링크: https://pixel-workroom.herokuapp.com/ 프로젝트 깃허브 저장소 링크 : https://github.com/ha-il/project-pixel…]]></description><link>https://ha-il.github.io/side-project/project-pixel/6-domain/</link><guid isPermaLink="false">https://ha-il.github.io/side-project/project-pixel/6-domain/</guid><pubDate>Tue, 13 Jun 2023 12:20:06 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;당신의 작업실 프로젝트 링크: &lt;a href=&quot;https://pixel-workroom.herokuapp.com/&quot;&gt;https://pixel-workroom.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;프로젝트 깃허브 저장소 링크 : &lt;a href=&quot;https://github.com/ha-il/project-pixel&quot;&gt;https://github.com/ha-il/project-pixel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;요구사항 명세는 왜 했는가?&lt;/h2&gt;
&lt;p&gt;지금까지 프로젝트 &lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/3-boiler-plate/&quot;&gt;개발 환경 설정&lt;/a&gt;과 &lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/5-plan-and-design/&quot;&gt;기획/디자인 과정&lt;/a&gt;을 거치고 이제 본격적인 개발을 앞둔 상황이었습니다. 하지만, 대체 무엇을 어디서부터 시작해야 할 지 감이 잡히지 않았습니다. &quot;웹 뮤직플레이어니까 일단 뮤직플레이어부터 만들까?&quot;라는 생각도 했지만, &apos;그 뮤직플레이어에 어떤 기능이 있어야 하고&apos;, &apos;어떤 버튼을 눌렀을 때 어떤 화면을 보여줄 것인지&apos;에 대해서 전혀 모른채로 개발을 할 수 없겠다는 생각이 들었습니다. 개발에 들어가기 전에 요구사항을 명세하고 가야겠다는 판단을 내렸습니다.&lt;/p&gt;
&lt;h2&gt;모델의 스키마 정의&lt;/h2&gt;
&lt;p&gt;먼저, 이번 프로젝트에서 모델이 될 수 있는 요소들을 생각해봤습니다. &apos;사용자&apos;에게 작업실을 주고 싶다는 마음으로 시작했으니 &apos;&lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt;&apos;모델은 반드시 필요했고, 웹 뮤직 플레이어를 만들 것이기 때문에 &apos;&lt;code class=&quot;language-text&quot;&gt;Music&lt;/code&gt;&apos;과 &apos;&lt;code class=&quot;language-text&quot;&gt;Playlist&lt;/code&gt;&apos; 모델도 필요했습니다.&lt;/p&gt;
&lt;p&gt;아래의 예시는 각 모델의 스키마를 정의한 것인데요, 처음부터 아래와 같은 모습은 아니었습니다. &lt;strong&gt;일단 필요하다고 여겨지는 속성들을 먼저 작성&lt;/strong&gt;해두고, 요구사항을 명세하는 과정에서 &apos;이 속성도 필요하겠는데?&apos;라는 생각이 들면 &lt;strong&gt;그때마다 추가&lt;/strong&gt;해줬습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Music &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;youtubeId&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;imageUrl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;now &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

User &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;profileName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;playlists&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; mongoose&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Schema&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ObjectId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Playlist&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;tracks&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; mongoose&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Schema&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ObjectId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Track&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;now &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

Playlist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;minLength&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;maxLength&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;maxLength&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; mongoose&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Schema&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ObjectId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;User&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;tracks&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; mongoose&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Schema&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Types&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ObjectId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Track&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;now &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Router와 API 정의&lt;/h2&gt;
&lt;p&gt;그 다음으로, 클라이언트에서 유저가 접근할 수 있는 모든 &lt;strong&gt;경로&lt;/strong&gt;와, 요청을 보낼 &lt;strong&gt;API&lt;/strong&gt;를 정의했습니다. 이 역시 모델과 마찬가지로, 일단 반드시 필요하다고 생각되는 경로 먼저 적어주고, 요구사항을 명세해가면서 경로를 추가해줬습니다.&lt;/p&gt;
&lt;h3&gt;Router&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&quot;/&quot; : 홈페이지
&quot;/login&quot; : 모달창의 로그인 페이지
&quot;/signup&quot;: 모달창의 회원가입 페이지
&quot;/playlists/:playlist_id&quot;: 플레이리스트 상세 페이지
&quot;/chart&quot;: 인기차트 페이지&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;post /users/signup   # 회원가입
post /users/login   # 로그인
post /users/logout   # 로그아웃
get /users/playlists/:userId   # 유저의 플레이리스트 불러오기

get /youtube/musics/:musicId   # 유튜브URL로 음악 정보 가져오기

post /musics   # 음악 등록하기
post /musics/:musicId/playcounts   # 재생 수 1 증가
get /musics/chart   # 인기차트 곡 불러오기
get /musics/search/:searchWord   # 음악 검색하기

post /playlists   # 플레이리스트 만들기
get /playlists/:playlistId   # 플레이리스트 불러오기
post /playlists/:playlistId   # 플레이리스트에 음악 추가하기&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;요구사항은 사용자의 행동 흐름에 맞춰서 작성&lt;/h2&gt;
&lt;p&gt;이어서 각 페이지별로 필요한 기능들을 적고 기능들의 요구사항을 적으려고 했습니다. 하지만 &apos;홈페이지에 필요한 기능은 많은데, 그 기능들이 동시에 필요한 것은 아니니까 어떤 기능의 요구사항을 먼저 정의해야 할지 모르겠다.&apos;라는 문제가 생겼습니다. 그래서 생각해낸 방법은 &quot;&lt;strong&gt;페이지별로 요구사항을 적지말고, 사용자의 행동 흐름에 맞게 요구사항을 작성해보자.&lt;/strong&gt;&quot;였습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;페이지 별로 요구사항을 작성하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&quot;/&quot;: 홈페이지
- 로그인
  - 사용자가 &apos;PC 모니터&apos;를 클릭하면 &apos;/login&apos;으로 경로를 변경하고 로그인 창 렌더링합니다.
- 인기차트 
  - 사용자가 &apos;TV&apos;를 클릭하면 &apos;/chart&apos;로 경로를 변경하고 로그인 창 렌더링합니다.
- 장식장의 플레이리스트 렌더링하기
  - 사이트에서 추천하는 플레이리스트 3개를 맨 꼭대기에 노출시킵니다.

&quot;/chart&quot;: 인기차트 페이지
- ...
- ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;사용자의 행동 흐름에 따라 요구사항을 작성하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1. 첫 진입
- &apos;/&apos;: 홈페이지
  - 사용자가 &apos;PC 모니터&apos;를 클릭하면 &apos;/login&apos;으로 경로를 변경하고 로그인 창 렌더링합니다.

2. 로그인 or 회원가입
- &apos;/login&apos;
  - 로그인 창은 username과 password를 받을 수 있는 인풋이 필요합니다.
  - &apos;로그인하기&apos; 버튼이 필요합니다.
  - &apos;로그인&apos; 버튼 아래 &apos;회원가입&apos; 버튼이 필요합니다.
    - &apos;회원가입&apos; 버튼을 누르면 &apos;/signup&apos;으로 경로를 변경하고 회원가입 창을 렌더링합니다.
  - &apos;로그인&apos; 버튼 또는 엔터를 누르면 `POST /api/users/login` 요청을 보냅니다.
  - 응답이 완료되었다면 &apos;/&apos;으로 렌더링합니다.

- &apos;/sinup&apos;
  - ...
  - ...

3. 로그인 후 홈화면
- &apos;/&apos;: 홈페이지
  - 티비 화면에 인기차트와 연결되는 뮤직뱅크 이미지를 띄웁니다.
  - &apos;장식장&apos;
    - &apos;장식장&apos;에는 사이트에서 추천하는 플레이리스트 3개를 맨 꼭대기에 노출시킵니다.
    - 플레이리스트를 클릭하면
      - GET /api/playlists/:playlist_id 요청을 보냅니다.
      - 응답이 완료되었다면 &apos;/playlists/:playlist_id&apos;로 경로를 변경하고 해당 플레이리스트의 상세 페이지를 렌더링합니다.

4. ...
5. ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;프로젝트가 끝나고 느껴지는 아쉬운 점&lt;/h2&gt;
&lt;p&gt;일단 요구사항을 명세하는 과정이 &lt;strong&gt;기획 단계&lt;/strong&gt;에서 들어갔으면 좋았겠다는 생각을 했습니다. 프로젝트의 전반적인 디자인도 없이 그냥 텍스트만으로 요구사항을 정의하는 것에 어려움을 느껴서 &lt;strong&gt;디자인 작업 후에 요구사항을 명세&lt;/strong&gt;했었는데요. 생각해보니 혼자서 작업했으니 이런 흐름이 가능했던 것이지 &lt;strong&gt;실제 디자이너분이 요구사항 명세서도 없이 다지인을 하진 않을텐데&lt;/strong&gt;, 제가 디자인 과정을 너무 대충 넘겼다는 생각이 들었습니다. 만약 다음에 또 개인 프로젝트를 진행하게 되면, 먼저 텍스트로(그리고 마크다운 말고 좀 더 정돈된 시트로) &lt;strong&gt;요구사항을 먼저 정의하고&lt;/strong&gt;, 그 요구사항을 바탕으로 디자인 작업을 하다가, 정의가 되지 않거나 모호한 요구사항이 있다면 &lt;strong&gt;요구사항을 수정하면서 디자인 작업을 해야겠다&lt;/strong&gt;는 생각이 들었습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;사용자의 행동 흐름과 요구사항 명세가 분리될 필요가 있다&lt;/strong&gt;고 느꼈습니다. 사용자의 행동의 흐름을 파악하는 것은 도움이 되었지만, 그것을 요구사항 명세와 섞으니 &lt;strong&gt;페이지별로 필요한 기능이 흐름에따라 분산&lt;/strong&gt;되어 있어서, &lt;strong&gt;하나의 페이지가 어떤 기능을 가지고 있는지 파악하기가 어려웠습니다&lt;/strong&gt;. 개발을 할 때에는 문제가 없고 오히려 편하다는 느낌도 받았지만, 프로젝트 종료 후 다시 살펴보니 읽기가 불편했습니다.&lt;/p&gt;
&lt;h2&gt;요구사항 명세를 마치고&lt;/h2&gt;
&lt;p&gt;요구사항 명세를 마치고나서는 본격적으로 개발 작업에 돌입했습니다. &lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/7-dev-cookie&quot;&gt;다음 글&lt;/a&gt;에서는 &lt;strong&gt;개발 과정에서 만난 문제와 해결 과정&lt;/strong&gt;에 대한 내용을 다루겠습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[당신의 작업실] 5. 프로젝트 기획과 디자인]]></title><description><![CDATA[당신의 작업실 프로젝트 링크: https://pixel-workroom.herokuapp.com/ 프로젝트 깃허브 저장소 링크 : https://github.com/ha-il/project-pixel…]]></description><link>https://ha-il.github.io/side-project/project-pixel/5-plan-and-design/</link><guid isPermaLink="false">https://ha-il.github.io/side-project/project-pixel/5-plan-and-design/</guid><pubDate>Tue, 13 Jun 2023 12:20:05 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;당신의 작업실 프로젝트 링크: &lt;a href=&quot;https://pixel-workroom.herokuapp.com/&quot;&gt;https://pixel-workroom.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;프로젝트 깃허브 저장소 링크 : &lt;a href=&quot;https://github.com/ha-il/project-pixel&quot;&gt;https://github.com/ha-il/project-pixel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;기획을 시작하기 전에&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/4-dataBase&quot;&gt;이전 글&lt;/a&gt;까지는 &quot;내가 바닐라 자바스크립트만으로 웹 뮤직 플레이어를 구현할 수 있을까?&quot;라는 질문에 답을 하는 과정이었다면, 이번 기획 과정은 &quot;&lt;strong&gt;나는 사용자에게 어떤 웹 뮤직 플레이어를 제공하고 싶은가?&lt;/strong&gt;&quot;라는 질문에 답을 하는 과정이었습니다. 처음부터 이 질문에 답을하기는 어려웠기에 질문을 나누어서 하나씩 답을 해보려 했습니다. 그때 제 스스로에게 던졌던 질문은 아래 세 가지였습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;나는 언제 음악을 듣는가?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;나는 무엇으로 음악을 듣는가?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;내가 만들 뮤직 플레이어는 무엇이 다른가?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;나는 언제 음악을 듣는가?&lt;/h2&gt;
&lt;p&gt;저는 주로 아래와 같은 상황일 때 음악을 듣는 편입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;달리기를 할 때&lt;/li&gt;
&lt;li&gt;이동할 때(지하철, 버스, 보도)&lt;/li&gt;
&lt;li&gt;작업이나 공부를 할 때&lt;/li&gt;
&lt;li&gt;카페나 식당에서 그냥 틀어줄 때&lt;/li&gt;
&lt;li&gt;집안일 할 때&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위의 경우들로 미루어보아, 음악 자체를 감상하는 경우보다도, 필요에 따라서 음악을 &lt;strong&gt;배경음악&lt;/strong&gt;처럼 활용하는 경우가 많다는 것을 알게 되었습니다. 위의 다섯가지 경우 중에서도 저에게 있어서 음악을 가장 많이 듣는 경우는 단연 &lt;strong&gt;작업이나 공부를 할 때&lt;/strong&gt;였습니다. 작업이나 공부를 할 때 나는 보통 어떤 방식으로 음악을 듣는지 생각해보게 되었습니다.&lt;/p&gt;
&lt;h2&gt;나는 무엇으로 음악을 재생하는가?&lt;/h2&gt;
&lt;p&gt;저는 작업이나 공부를 하면서 음악을 들을 때는 스마트폰보다는 &lt;strong&gt;맥북&lt;/strong&gt;으로 음악을 많이 들었습니다. 제가 하는 작업이나 공부라는 것이 결국 &lt;strong&gt;개발&lt;/strong&gt;에 관련된 것들이라 맥북을 사용하지 않을 수가 없기에, 음악도 굳이 스마트폰으로 따로 틀 필요가 없었습니다. 음악은 보통 유튜브로 재생했습니다. 유튜브로 여러 곡을 재생목록에 담는 경우도 있었지만, 여러 곡을 모아서 2시간 또는 4시간짜리로 만든 영상을 주로 들었습니다. 작업을 하다보면 브라우저 창은 거의 항시 열려있으므로 &lt;strong&gt;유튜브 창 역시 브라우저 창의 여러 탭 중 하나로 같이 띄워두는 경우&lt;/strong&gt;가 많았고, 눈에 거슬린다면 유튜브 탭만 따로 창으로 분리하고 최소화시키도 했습니다.&lt;/p&gt;
&lt;p&gt;이렇게 제가 음악을 감상하는 방식을 점검해보니, &lt;strong&gt;작업이나 공부할 때 음악을 듣는 유저층&lt;/strong&gt;을 고려해서 웹으로 뮤직 플레이어를 만들면, 만드는 나도 공감할 수 있는 프로젝트를 만들 수 있겠다는 생각이 들었습니다.&lt;/p&gt;
&lt;h2&gt;내가 만들 뮤직 플레이어는 무엇이 다른가?&lt;/h2&gt;
&lt;p&gt;물론 이런 작은 프로젝트로 유튜브나 스포티파이와 경쟁할 수 있다는 생각은 할 수 없겠지만, &lt;strong&gt;아무리 작은 프로젝트라도 해도 하나쯤의 차별성은 반드시 필요&lt;/strong&gt;하다고 생각했습니다. 이런 작은 웹 뮤직플레이어가 대형 뮤직 앱과 차별화 될 수 있는 부분은 &lt;strong&gt;타겟 유저층&lt;/strong&gt;이라고 생각했습니다. 대형 뮤직 앱은 사용자 수도 많고 범위도 넓기 때문에 특정 타겟층만 노리지는 않는 것 같았습니다. 저의 경우 작업이나 공부를 하면서 음악을 듣는 사람을 타겟으로 노려서, 집중력 향상에 도움이 되는 음악들 위주로 음악을 추천해줄 수도 있고, 음악의 가사가 없는 lo-fi, 재즈, 클래식을 중점적으로 배치할 수 있을 것이고, 멜로디조차 없는 빗소리같은 자연의 소리를 배치할 수도 있을 것입니다.&lt;/p&gt;
&lt;p&gt;하지만, 이런 특정 장르의 음악을 추천해주는 것은 이미 유튜브의 많은 채널에서 하고 있습니다. 그럼 그 채널들에 비해서 내 웹 뮤직 플레이어가 가질 수 있는 차별성에는 뭐가 있을까 생각해보니, 웹 페이지이기 때문에 &lt;strong&gt;유저가 상호작용을 할 수 있는 가상의 공간&lt;/strong&gt;을 제시할 수 있겠다는 생각이 들었습니다. 마치 &lt;strong&gt;싸이월드 미니홈피의 미니룸&lt;/strong&gt;처럼, 유저에게 &lt;strong&gt;자신만의 작은 작업실&lt;/strong&gt;을 제공하는 것입니다. 작업실을 웹페이지로 제공하고, 웹의 작은 작업실에 존재하는 스피커를 클릭하면 뮤직 플레이어가 재생된다거나 하는 방식으로 &lt;strong&gt;유저가 상호작용할 수 있는 요소들을 만들어 재미를 줄 수 있다면&lt;/strong&gt;, 차별성을 가져갈 수 있을 것이라 생각했습니다.&lt;/p&gt;
&lt;h2&gt;유저에게 전달하고 싶은 메시지&lt;/h2&gt;
&lt;p&gt;단순히 음악과 작업실을 전달하는 것에 그치지 않고, 유저들이 이 프로젝트에 공감할 수 있는 메시지를 전달하고 싶었습니다. 마침 이 프로젝트의 디자인 컨셉을 &lt;strong&gt;픽셀아트&lt;/strong&gt;로 잡으려던 참이었습니다. 평소에 픽셀아트에 관심이 있어서 조금씩 만들어보고 있었고&lt;a href=&quot;https://www.instagram.com/hail.pixel/&quot;&gt;(작업물 인스타그램)&lt;/a&gt;, &lt;strong&gt;픽셀 아트 특유의 그리운 감성&lt;/strong&gt;을 제가 좋아하기 때문입니다. 디자인은 픽셀아트로 해야겠다는 생각에 도달했을 때 갑자기 이런 생각이 들었습니다.&lt;/p&gt;
&lt;p&gt;&apos;lo-fi도 그렇고 픽셀아트도 그렇고, 저음질에 저해상도로 만들어진 작품인데 난 왜 이걸 좋아할까?&apos;&lt;/p&gt;
&lt;p&gt;저음질에 저해상도로 만들어진 작품들이지만 특유의 편안함과 따뜻한 감성을 지니고 있다는 공통점을 lofi와 픽셀아트 사이에서 발견하게 되었습니다. 나아가 이런 생각이 들었습니다.&lt;/p&gt;
&lt;p&gt;&apos;내가 유저에게 제공한다고 하는 가상 공간도 lo-fi나 픽셀아트와 비슷한 것 같다. 메타버스나 3D 공간에 비해서는 볼품없는 작은 공간이지만, 유저들이 좋아하는 음악과 오브젝트를 배치할 수 있게 제작해서 특유의 편안함과 따뜻한 느낌을 줄 수 있는 공간을 제공하고 싶다.&apos;&lt;/p&gt;
&lt;p&gt;이렇게 &apos;&lt;strong&gt;유저에게 자신만의 취향이 담긴 음악과 오브젝트로 꾸밀 수 있는 작업실을 제공하고 싶다&lt;/strong&gt;&apos;라는 메세지가 생겼고, 그리하여 프로젝트 이름을 &quot;&lt;strong&gt;당신의 작업실&lt;/strong&gt;&quot;로 짓게 되었습니다.&lt;/p&gt;
&lt;h2&gt;디자인 작업&lt;/h2&gt;
&lt;p&gt;&apos;&lt;strong&gt;작업실&lt;/strong&gt;&apos;이란 공간이고, 작업실의 모든 사물들은 저마다 &lt;strong&gt;용도&lt;/strong&gt;가 있습니다. 이번 프로젝트의 테마를 작업실로 설정했으니, &lt;strong&gt;작업실의 구성할 가구들에게도 저마다의 용도를 부여&lt;/strong&gt;하는 것이 좋을 것이라 생각했습니다. 그냥 이미지의 가구로 존재하는 것이 아니라 클릭했을 때 로그인을 할 수 있다든지, 클릭을 하면 어떤 화면을 보여준다든지, 그렇게 유저와 상호작용할 수 있도록 &lt;strong&gt;가구에게 사이트의 주요 메뉴를 부여&lt;/strong&gt;했습니다. 그리고 처음에는 다른 웹 뮤직 플레이어가 그렇듯 일반적인 사이드바와 헤더를 넣으려고 했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;헤더와 사이드바가 포함된 초기 디자인&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/d8f8698c-bd2a-4b63-ae62-85a4fb03d940&quot; width=&quot;100%&quot; alt=&quot;haeder&quot;&gt;
&lt;p&gt;하지만 그렇게 디자인하니 작업실 공간이 굉장히 답답해보였습니다. 작업실 공간 자체도 오브젝트가 많은데 사이드바와 헤더까지 들어가니 복잡해보였습니다. &quot;&lt;strong&gt;공간이나 이미지 그리고 UI까지 한꺼번에 보여주되 깔끔하게 디자인 하는 방법 뭐 없을까?&lt;/strong&gt;&quot;라는 고민을 하던 도중 &lt;strong&gt;아이패드&lt;/strong&gt;가 떠올랐습니다. 아이패드의 UI를 자세히 살펴보니 하단의 앱 독(dock)으로 UI를 최소화하고, 상단에는 시간이나 베터리 같은 최소한의 정보만 표시하니까 아이패드의 배경화면이 시원하게 보여졌습니다. 보여지는 화면 외의 기능들은 양 옆으로 숨겨두기도 했습니다. 이렇게 아이패드의 화면 디자인은 제가 고민하던 문제를 해결해주기도 했지만, &lt;strong&gt;사람들에게도 이미 익숙한 디자인&lt;/strong&gt;이기 때문에 유저들의 거부감이 적을 것 같았습니다. 그렇게 1차적으로 디자인한 작업물은 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;헤더와 사이드바를 삭제하고, 삭제된 메뉴를 스마트폰 창과 모니터 창에 부여한 디자인&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/88779778-7caf-4ef0-8ff7-c11e1a11e017&quot; width=&quot;100%&quot; alt=&quot;design&quot;&gt;
&lt;ul&gt;
&lt;li&gt;스마트폰 아이콘을 클릭하고 모니터를 클릭했을 때 디자인&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/86790fe7-bcf2-4917-a558-3945c18f31f6&quot; width=&quot;100%&quot; alt=&quot;after&quot;&gt;
&lt;p&gt;주요 메뉴는 가구에 부여하고, 그밖의 메뉴는 스마트폰과 모니터창이라는 모달창에 부여하고 숨겨둬서 헤더와 사이드바를 제거할 수 있었습니다. 그러고나니 제가 표현하고자했던 작업실은 더욱 눈에 잘 들어오고 전반적으로 UI가 깔끔해졌습니다.&lt;/p&gt;
&lt;h2&gt;픽셀아트 작업&lt;/h2&gt;
&lt;p&gt;그 다음으로는 가구 오브젝트를 채울 픽셀아트 작업을 진행했습니다. 픽셀 아트 툴은 &lt;strong&gt;Aseprite&lt;/strong&gt;를 사용했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이번 프로젝트에 사용한 픽셀아트 작업물&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/7eafeb2b-9e8c-40e5-99ee-e9f995b68815&quot; width=&quot;100%&quot; alt=&quot;pixel&quot;&gt;
&lt;p&gt;평소에 픽셀아트 툴을 다뤄봤다고해도 사실 애니메이션까지 넣어본 것은 이번이 처음이었습니다. 개발에 투입해야 할 시간이 디자인과 픽셀아트 작업에 소비되는 것에 초조함도 들었지만, 그럼에도 이 또한 프로젝트를 개발하는 과정이라 생각하고 즐겁게 임했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;픽셀아트 작업에서 가장 공들였던 두 친구&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/2ee30f4a-b74a-4771-9f50-7b17a0804cb4&quot; alt=&quot;tv-on&quot;&gt;
&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/ce04ae81-bdc9-4c2f-9337-0fef09abd956&quot; alt=&quot;monitor&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트에 적용해보니 애니메이션이 너무 정신없어서 아쉽게 뺐던 vscode 픽셀 아트&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/8584a3dd-0aac-4f84-98b3-db2194b379f0&quot; alt=&quot;monitor-on&quot;&gt;&lt;/p&gt;
&lt;h2&gt;프로젝트가 끝난 시점에서 느껴지는 아쉬운 점&lt;/h2&gt;
&lt;p&gt;이번 프로젝트를 하고나서 &lt;strong&gt;디자인 시스템&lt;/strong&gt;의 필요성과 &lt;strong&gt;디자이너&lt;/strong&gt;의 필요성을 새삼 느꼈습니다. 이번에 디자인 시스템을 적극 도입하지 않은 이유는 픽셀아트의 특성 때문인데요. 픽셀아트 작업은 &lt;strong&gt;16px&lt;/strong&gt; 단위로 작업하는 것이 깔끔하게 제작되고, &lt;strong&gt;팔레트(색상 모음)에 존재하는 색상만을 사용하는 것&lt;/strong&gt;이 픽셀아트의 특성을 살리기 때문에, 웹 페이지에서 사용할 단위나 색상도 픽셀아트에 맞게 제한이 된 상태였습니다. &lt;strong&gt;CSS 작업을 할 때도 16px 단위로만 설정하면 될 것이고, 색상도 제한된 64개의 색상에서 고르면 될 것&lt;/strong&gt;이라는 생각을 했습니다. 하지만 막상 CSS 작업을 할 때, 그 제한된 팔레트 안에서도 어떤 색상을 프로젝트의 하이라이트 색상으로 사용할 것인지, 어떤 색상을 에러 메시지 색상으로 할 것인지 등에 대해서 고민하게 되었고 그 과정에서 시간이 적지않게 소요되었습니다. &apos;이래서 디자인 시스템이 필요하구나&apos; 라는 생각이 들었습니다. 다른 프로젝트의 디자이너가 작업한 디자인 시안을 볼 수 있었는데, 디자인 시스템은 물론이고 앱에서 발생할 수 있는 모든 상황에 대해서 페이지 디자인이 되어있었습니다. 디자인 감각은 없더라도 &lt;strong&gt;내 앱에서 발생할 수 있는 모든 상황에 대해서 파악하고 그 상황에 맞는 최소한의 디자인&lt;/strong&gt; 정도는 미리 계획해둬야겠다는 생각을 하게 되었습니다.&lt;/p&gt;
&lt;h2&gt;기획과 디자인 작업을 마치고&lt;/h2&gt;
&lt;p&gt;픽셀아트 작업을 마지막으로 기획과 디자인 작업을 마무리 짓고, 본격적으로 기능을 개발해야하는 시기가 다가왔습니다. 하지만, 무엇을 먼저 개발할 것인지, 어떤 기능이 필요한지에 대한 구체적인 내용이 없었습니다. 그래서 내 앱에 필요한 기능을 적어볼 필요가 있었습니다. 따라서 &lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/6-domain&quot;&gt;다음 글&lt;/a&gt;에서는 &lt;strong&gt;프로젝트의 요구사항을 정리&lt;/strong&gt;했던 내용을 다루겠습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[당신의 작업실] 4. 데이터베이스 연결]]></title><description><![CDATA[당신의 작업실 프로젝트 링크: https://pixel-workroom.herokuapp.com/ 프로젝트 깃허브 저장소 링크 : https://github.com/ha-il/project-pixel…]]></description><link>https://ha-il.github.io/side-project/project-pixel/4-dataBase/</link><guid isPermaLink="false">https://ha-il.github.io/side-project/project-pixel/4-dataBase/</guid><pubDate>Tue, 13 Jun 2023 12:20:04 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;당신의 작업실 프로젝트 링크: &lt;a href=&quot;https://pixel-workroom.herokuapp.com/&quot;&gt;https://pixel-workroom.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;프로젝트 깃허브 저장소 링크 : &lt;a href=&quot;https://github.com/ha-il/project-pixel&quot;&gt;https://github.com/ha-il/project-pixel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;들어가기 전에&lt;/h2&gt;
&lt;p&gt;이번 글은 &lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/3-boiler-plate/&quot;&gt;이전 글&lt;/a&gt;에서 다뤘던 개발 환경(Webpack, Babel) 설정 이후, 데이터베이스 연결에 대한 내용을 다룹니다.&lt;/p&gt;
&lt;h2&gt;1. MongoDB 선택 이유&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.mongodb.com/&quot;&gt;MongoDB&lt;/a&gt;는 &lt;strong&gt;문서 기반&lt;/strong&gt;(document-based) 데이터베이스여서, 관계형 데이터베이스와는 다르게 구조화된 테이블이나 스키마를 사용하지 않고 &lt;strong&gt;JSON 형식&lt;/strong&gt;의 문서를 저장하고 쿼리 작업을 할 수 있습니다. 아직 SQL은 다뤄본적이 없지만, JSON 형식에는 익숙한 상태였기 때문에 MongoDB를 데이터베이스로 선택했습니다.&lt;/p&gt;
&lt;h2&gt;2. MongoDB 설치&lt;/h2&gt;
&lt;p&gt;MongoDB 설치는 MongoDB 사이트 공식문서의 &lt;a href=&quot;https://www.mongodb.com/docs/manual/installation/&quot;&gt;Install MongoDB&lt;/a&gt;을 참고해서 진행했습니다. 저는 맥OS에서 설치하는 방법을 따랐고 사전에 &lt;a href=&quot;https://brew.sh/index_ko&quot;&gt;Homebrew&lt;/a&gt;가 설치되어 있었습니다. 설치 과정은 아래와 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Xcode 커맨드라인 도구를 설치하기 위해 맥OS 터미널에 아래 명령어를 입력합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;xcode-select --install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;MongoDB Homebrew 탭을 추가합니다. (탭은 패키지 저장소의 위치를 지정하는 역할을 합니다.)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;brew tap mongodb/brew&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Homebrew와 기존 패키지를 업데이트합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;brew update&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;MongoDB Community Edition을 설치합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;brew install mongodb-community@6.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;맥OS 터미널에서 아래 명령어를 입력하고 설치를 확인합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;mongosh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이때 등장하는 &lt;code class=&quot;language-text&quot;&gt;Connecting to:		mongodb://127.0.0.1:27017/&lt;/code&gt;는 개발환경에서 사용될 &lt;code class=&quot;language-text&quot;&gt;DB_URL&lt;/code&gt;이 됩니다.&lt;/p&gt;
&lt;h2&gt;3. Mongoose 설치&lt;/h2&gt;
&lt;p&gt;백엔드로 Node.js를 사용하고, 데이터베이스로 MongoDB를 사용하고 있으므로, &lt;a href=&quot;https://nomadcoders.co/wetube/lectures/2671&quot;&gt;Mongoose&lt;/a&gt;를 사용하는 것이 좋다고 생각했습니다. Mongoose는 &lt;strong&gt;Node.js에서 MongoDB와 상호작용하기 위한&lt;/strong&gt; 객체 모델링 도구입니다. Mongoose를 사용하면 Node.js에서 MongoDB를 조작하기 위한 쿼리 작성과 스키마 기반의 데이터 모델링을 할 수 있습니다. Mongoose 설치 방법은 Mongoose 사이트의 &lt;a href=&quot;https://mongoosejs.com/docs/index.html&quot;&gt;Getting Started&lt;/a&gt;를 참고했으며, 순서는 아래와 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;mongoose&lt;/code&gt;를 설치합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install mongoose --save&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.env&lt;/code&gt; 파일을 생성하고 &lt;code class=&quot;language-text&quot;&gt;DB_URL&lt;/code&gt;을 작성합니다. (my-project 부분은 재량)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;DB_URL=mongodb://127.0.0.1:27017/my-project&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;src&lt;/code&gt; 폴더에 &lt;code class=&quot;language-text&quot;&gt;db.js&lt;/code&gt; 파일을 생성하고 아래와 같이 입력합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// db.js&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; mongoose &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;mongoose&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

mongoose&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DB_URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; db &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mongoose&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connection&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;❌ DB Error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;open&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;✅ Connected to DB&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;server.js&lt;/code&gt; 파일에 &lt;code class=&quot;language-text&quot;&gt;db.js&lt;/code&gt;을 임포트합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// server.js&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./db.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; express &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;express&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm run dev:server&lt;/code&gt; 명령어를 실행하면 데이터베이스가 연결됩니다.&lt;/p&gt;
&lt;h2&gt;4. 데이터베이스 연결 후 폴더 경로의 변화&lt;/h2&gt;
&lt;p&gt;데이터베이스 연결을 마지막으로 프로젝트의 초기 보일러 플레이트 세팅을 완료했습니다. &lt;a href=&quot;https://github.com/ha-il/project-pixel/tree/09dd9640ad96b99e9ef52168313972a8676c9e52&quot;&gt;(당시 커밋)&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;├─ src
│  ├─ client
│  │  ├─ js
│  │  │   ├── components 
│  │  │   ├── core 
│  │  │   │    └─ Component.js 
│  │  │   ├── utils 
│  │  │   └── main.js
│  │  └─ scss
│  │     ├─ _variables.scss
│  │     └─ styles.scss
│  ├─ db.js # MongoDB 연결 파일
│  ├─ server.js
│  └─ views
│     └─ layout.pug
├─ node_modules
├─ .gitignore
├─ README.md
├─ babel.config.json 
├─ nodemon.json 
├─ package-lock.json
├─ package.json
└─ webpack.config.js 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 데이터베이스 연결까지 예광탄을 쏴보니, 정말 마치 예광탄의 궤적이 보이는 것처럼 프로젝트의 전반적인 구조가 눈에 보이기 시작했고, 아래와 같이 다음에 해야 할 일들이 자연스럽게 떠올랐습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;`SPA 구현은 확인되었으니, 이제 홈 페이지를 구성하는 주요 컴포넌트들을 작성하면 되겠다.`

`각 컴포넌트에서 서버로 데이터를 요청하려면 서버에서 api router를 설정해야겠다.`

`클라이언트의 요청에 응답하려면 api 경로별로 요청을 처리할 컨트롤러를 만들어야겠다.`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 예광탄을 하나씩 쏴보면서 프로젝트를 개발할 수 있는 초기 보일러 플레이팅 세팅을 마치고 나니까, 프로젝트 구현에 있어서 &lt;strong&gt;기술적 제약&lt;/strong&gt;이 많이 감소했습니다. &lt;strong&gt;기능을 구현하지 못 할 것을 걱정할 필요 없이&lt;/strong&gt;, 기획과 디자인을 진행할 수 있게 되었습니다. 따라서 &lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/5-plan-and-design&quot;&gt;다음 글&lt;/a&gt;에서는 이번 프로젝트가 왜 &quot;당신의 작업실&quot;이 되었는지, 그 기획과 디자인에 대해서 이야기해보겠습니다.&lt;/p&gt;
&lt;h2&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MongoDB: &lt;a href=&quot;https://www.mongodb.com/&quot;&gt;https://www.mongodb.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install MongoDB: &lt;a href=&quot;https://www.mongodb.com/docs/manual/installation/&quot;&gt;https://www.mongodb.com/docs/manual/installation/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Homebrew: &lt;a href=&quot;https://brew.sh/index_ko&quot;&gt;https://brew.sh/index_ko&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mongoose Getting Started: &lt;a href=&quot;https://mongoosejs.com/docs/index.html&quot;&gt;https://mongoosejs.com/docs/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[[당신의 작업실] 3. 개발 환경 구축하기]]></title><description><![CDATA[당신의 작업실 프로젝트 링크: https://pixel-workroom.herokuapp.com/ 프로젝트 깃허브 저장소 링크 : https://github.com/ha-il/project-pixel…]]></description><link>https://ha-il.github.io/side-project/project-pixel/3-boiler-plate/</link><guid isPermaLink="false">https://ha-il.github.io/side-project/project-pixel/3-boiler-plate/</guid><pubDate>Tue, 13 Jun 2023 12:20:03 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;당신의 작업실 프로젝트 링크&lt;/strong&gt;: &lt;a href=&quot;https://pixel-workroom.herokuapp.com/&quot;&gt;https://pixel-workroom.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;프로젝트 깃허브 저장소 링크&lt;/strong&gt; : &lt;a href=&quot;https://github.com/ha-il/project-pixel&quot;&gt;https://github.com/ha-il/project-pixel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1. 바벨 환경 구축하기&lt;/h2&gt;
&lt;p&gt;이번 프로젝트에서 바벨은 &lt;strong&gt;NodeJS가 최신 자바스크립트 코드를 이해할 수 있도록 컴파일하기 위해서&lt;/strong&gt; 필요했습니다. 바벨 사이트의 &lt;a href=&quot;https://babeljs.io/setup#installation&quot;&gt;Setup&lt;/a&gt; 을 보면서 바벨 환경을 구축했습니다. 순서는 아래와 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;babel.core를 설치합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install --save-dev @babel/core&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;루트 디렉터리에 &lt;code class=&quot;language-text&quot;&gt;babel.config.json&lt;/code&gt;파일을 생성합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bael/preset-env를 설치합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install @babel/preset-env --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;babel.config.json&lt;/code&gt;에 아래와 같이 작성합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &quot;presets&quot;: [&quot;@babel/preset-env&quot;]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;파일의 &lt;code class=&quot;language-text&quot;&gt;scripts&lt;/code&gt;에 아래와 같이 작성합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&quot;scripts&quot;: {
    &quot;dev:server&quot;: &quot;babel-node src/server.js&quot;
},&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 스크립트를 작성하면 &lt;code class=&quot;language-text&quot;&gt;npm run dev:server&lt;/code&gt;를 실행할 때마다 babel-node가 경로로 설정해준 파일을 실행합니다.&lt;/p&gt;
&lt;p&gt;하지만, 경로의 파일에서 코드를 수정했을 때, 해당 수정 사항이 반영된 파일을 실행시키려면 &lt;strong&gt;스크립트를 다시 실행해야 하는 불편함&lt;/strong&gt;이 있었습니다.&lt;/p&gt;
&lt;p&gt;이런 불편함을 해소하기 위해 노드몬을 사용하기로 했습니다.&lt;/p&gt;
&lt;h2&gt;2. 노드몬 환경 구축하기&lt;/h2&gt;
&lt;p&gt;노드몬은 &lt;strong&gt;설정한 디렉터리의 파일 변경이 감지되면 Node 애플리케이션을 자동으로 다시 시작해주는 도구&lt;/strong&gt;입니다. 노드몬을 사용하여 바벨을 실행시키는 방법 역시 바벨 사이트의 &lt;a href=&quot;https://babeljs.io/setup#installation&quot;&gt;Setup&lt;/a&gt;에 나와 있습니다. 노드몬 환경 구축 과정은 아래와 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/remy/nodemon&quot;&gt;nodenon&lt;/a&gt;을 설치합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm i nodemon --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;파일의 &lt;code class=&quot;language-text&quot;&gt;scripts&lt;/code&gt;를 아래와 같이 수정합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&quot;scripts&quot;: {
    &quot;dev:server&quot;: &quot;nodemon --exec babel-node src/server.js&quot;
},&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 설정해주면, babel-node를 실행시킬 경로에 있는 파일을 수정했을 경우 해당 파일을 자동으로 다시 시작해줍니다.&lt;/p&gt;
&lt;h2&gt;3. 웹팩 환경 구축하기&lt;/h2&gt;
&lt;p&gt;이번 프로젝트는 main.js에 모든 파일을 작성하는 것이 아니라, 자바스크립트 코드를 모듈화하여 여러 개의 자바스크립트 파일을 작성하여 진행할 계획이었습니다. 그렇기 때문에 &lt;strong&gt;여러 개의 파일을 하나의 번들로 묶어주는 모듈 번들러&lt;/strong&gt;인 웹팩이 필요했습니다.&lt;/p&gt;
&lt;p&gt;웹팩은 여러개의 파일을 하나의 번들로 묶어주기 때문에, &lt;strong&gt;파일 수를 줄여서 네트워크 비용을 절감&lt;/strong&gt;할 수 있고 &lt;strong&gt;초기 로딩 속도를 향상&lt;/strong&gt;시킬 수 있다는 장점이 있습니다. 웹팩을 사용하는 이유에 대해서 궁금한 점은 웹팩 사이트의 &lt;a href=&quot;https://webpack.kr/concepts/why-webpack/&quot;&gt;Why webpack&lt;/a&gt;을 읽어보면 더 자세히 알 수 있습니다.&lt;/p&gt;
&lt;p&gt;웹팩 환경 설정은 웹팩 홈페이지의 &lt;a href=&quot;https://webpack.js.org/guides/getting-started/#npm-scripts&quot;&gt;Getting Started&lt;/a&gt;를 보면서 진행했습니다. 순서는 아래와 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;webpack과 webpack-cli를 설치합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(웹팩 v4 이상을 사용 중이고 커맨드 라인에서 웹팩을 호출하려는 경우 CLI도 설치해야 합니다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install --save-dev webpack webpack-cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;루트 디렉터리에 &lt;code class=&quot;language-text&quot;&gt;webpack.config.js&lt;/code&gt; 파일을 생성하고 아래와 같이 작성합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// entry는 웹팩을 적용할 파일을 의미함.&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./src/client/js/main.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// output은 웹팩 적용 후에 생성되는 파일을 의미함.&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;js/[name].js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;assets&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;파일의 &lt;code class=&quot;language-text&quot;&gt;scripts&lt;/code&gt;에 아래와 같이 작성합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&quot;scripts&quot;: {
    &quot;dev:server&quot;: &quot;babel-node src/server.js&quot;,
    &quot;dev:assets&quot;: &quot;webpack&quot;
},&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기까지 진행하면 웹팩 환경 설정을 통해 프론트엔드의 자바스크립트 파일의 모듈을 번들링했지만, 해당 파일들의 코드 중에는 &lt;strong&gt;브라우저가 이해할 수 없는 최신 코드&lt;/strong&gt;가 있을 수 있습니다.&lt;/p&gt;
&lt;p&gt;따라서, &lt;code class=&quot;language-text&quot;&gt;webpack.config.js&lt;/code&gt; 파일에 &lt;strong&gt;바벨&lt;/strong&gt;을 사용할 수 있도록 설정하여 &lt;strong&gt;코드의 호환성&lt;/strong&gt;을 높여야 합니다. 웹팩의 바벨 설정은 &lt;a href=&quot;https://github.com/babel/babel-loader&quot;&gt;babel-loader&lt;/a&gt; 를 보고 작성했습니다. 순서는 아래와 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;babel-loader&lt;/code&gt;를 설치합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install -D babel-loader&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;webpack.config.js&lt;/code&gt;에 아래와 같이 &lt;code class=&quot;language-text&quot;&gt;mode&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;module&lt;/code&gt;을 작성합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./src/client/js/main.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 모드를 development로 설정하면 개발 중에는 babel을 적용하지 않음&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 배포할 때는 production 모드로 설정하면 됨&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;js/[name].js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;assets&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 모든 js파일에 대해서 babel/preset-env를 적용&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\.js$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token literal-property property&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token literal-property property&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;@babel/preset-env&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4. SCSS 환경 구축하기&lt;/h2&gt;
&lt;p&gt;SCSS를 사용하면 CSS 코드를 중첩해서 사용할 수 있기 때문에 &lt;strong&gt;CSS코드를 구조화&lt;/strong&gt;해서 볼 수 있어서 조금 더 직관적이라는 장점이 있습니다. 그리고 &lt;strong&gt;변수&lt;/strong&gt;를 사용할 수 있어서 코드를 작성하고 수정할 때 더 편리합니다. SCSS를 사용하기 위해서는 웹팩을 통해 설정을 해줘야 하는데 그때 필요한 로더가 3가지 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/webpack-contrib/sass-loader&quot;&gt;sass-loader&lt;/a&gt;: SCSS파일을 CSS로 컴파일하는 로더&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webpack.js.org/loaders/css-loader/&quot;&gt;css-loader&lt;/a&gt;: @import 및 url()을 import/require()와 같이 해석해주는 로더&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webpack.js.org/loaders/style-loader/&quot;&gt;style-loader&lt;/a&gt;: DOM에 CSS를 삽입하는 로더&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 로더들을 설치하는 과정을 포함해서 SCSS를 설정하는 순서는 아래와 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;sass&lt;/code&gt;와 3가지 로더를 설치합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install sass sass-loader css-loader style-loader --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;webpack.config.js&lt;/code&gt; 파일에 아래와 같이 작성합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./src/client/js/main.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;js/[name].js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;assets&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 생략...&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\.scss$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 웹팩은 뒤에 위치한 로더부터 적용시키기 때문에 먼저 적용되어야 하는 로더가 뒤로 가야한다.&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;style-loader&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sass-loader&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;client 폴더(프론트엔드 코드를 작성하는 폴더)에 styles.scss 파일을 생성하고 main.js 파일에 임포트합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// main.js&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../scss/styles.scss&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://webpack.js.org/plugins/mini-css-extract-plugin/&quot;&gt;MiniCssExtractPlugin&lt;/a&gt;을 설치합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(이 플러그인을 사용하지 않으면 웹팩 실행 후 js파일과 css파일이 분리되지않고 하나의 js파일로 생성됩니다. 이 플러그인은 CSS를 별도의 파일로 추출하여 CSS가 포함된 JS 파일당 CSS 파일을 생성합니다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install --save-dev mini-css-extract-plugin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;webpack.config.js&lt;/code&gt; 파일에 &lt;code class=&quot;language-text&quot;&gt;MiniCssExtractPlugin&lt;/code&gt;을 적용합니다.&lt;/li&gt;
&lt;li&gt;추가적으로 &lt;code class=&quot;language-text&quot;&gt;watch&lt;/code&gt; 속성도 정의합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; MiniCssExtractPlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mini-css-extract-plugin&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./src/client/js/main.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// MiniCssExtractPlugin 적용&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MiniCssExtractPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 이걸 설정해주지 않으면, js 파일명과 똑같은 파일명의 CSS 파일이 생성됨&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;css/styles.css&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;js/[name].js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;assets&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 생략...&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\.scss$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// MiniCssExtractPlugin 적용&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MiniCssExtractPlugin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loader&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;css-loader&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sass-loader&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 &lt;code class=&quot;language-text&quot;&gt;npm run dev:assets&lt;/code&gt;를 실행하면 웹팩이 실행되면서 SCSS를 적용할 수 있게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;watch&lt;/code&gt;를 true로 설정하면 프론트엔드 파일을 수정하고 저장할 때마다 &lt;code class=&quot;language-text&quot;&gt;npm run dev:assets&lt;/code&gt;을 실행시키지 않아도 됩니다.&lt;/p&gt;
&lt;h2&gt;5. 노드몬 설정 수정하기&lt;/h2&gt;
&lt;p&gt;위와 같은 과정을 거쳤을 때 예기치 않은 동작이 발생했습니다. &lt;code class=&quot;language-text&quot;&gt;webpack.config.js&lt;/code&gt;파일과 &lt;code class=&quot;language-text&quot;&gt;client&lt;/code&gt; 폴더 안의 &lt;code class=&quot;language-text&quot;&gt;js&lt;/code&gt; 파일과 &lt;code class=&quot;language-text&quot;&gt;scss&lt;/code&gt;파일을 수정할 때도 노드몬이 작동했습니다. 노드몬은 &lt;strong&gt;백엔드 코드를 저장할 때만&lt;/strong&gt; 재시작이 되도록 설정하고 싶었기 때문에, &lt;strong&gt;클라이언트 관련 파일들은 무시&lt;/strong&gt;하도록 설정해줘야 했습니다. 이를 위해서 &lt;code class=&quot;language-text&quot;&gt;nodemon.json&lt;/code&gt; 파일을 생성해야 했는데, 관련 정보를 &lt;a href=&quot;https://github.com/remy/nodemon&quot;&gt;노드몬 깃허브 저장소&lt;/a&gt;에서 발견할 수 있었고, 아래 순서에 따라 파일을 생성하고 작성했습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;루트 디렉터리에 &lt;code class=&quot;language-text&quot;&gt;nodemon.json&lt;/code&gt;파일을 만들고 아래와 같이 작성합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &quot;ignore&quot;: [&quot;webpack.config.js&quot;, &quot;src/client/*&quot;, &quot;assets/*&quot;],
  &quot;exec&quot;: &quot;babel-node src/init.js&quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;파일의 &lt;code class=&quot;language-text&quot;&gt;scripts&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;dev:server&lt;/code&gt; 속성을 아래와 같이 수정합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&quot;scripts&quot;: {
    &quot;dev:server&quot;: &quot;nodemon&quot;,
    &quot;dev:assets&quot;: &quot;webpack&quot;
},&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;6. 환경 구축 후 폴더 경로의 변화&lt;/h2&gt;
&lt;p&gt;이렇게 개발 환경을 구축했더니 아래와 같은 폴더 구조가 나왔습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;├─ src
│  ├─ client
│  │  ├─ js
│  │  │   ├── components # Component Class를 확장시킨 컴포넌트 파일
│  │  │   ├── core 
│  │  │   │    └─ Component.js # Component Class 파일
│  │  │   ├── utils # 유틸 함수
│  │  │   └── main.js
│  │  └─ scss
│  │     ├─ _variables.scss
│  │     └─ styles.scss
│  ├─ server.js
│  └─ views
│     └─ layout.pug
├─ node_modules
├─ .gitignore
├─ README.md
├─ babel.config.json # 바벨 설정 파일
├─ nodemon.json # 노드몬 설정 파일
├─ package-lock.json
├─ package.json
└─ webpack.config.js # 웹팩 설정 파일
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 개발 환경 설정까지 예광탄을 쏴봤습니다. 그 다음으로 걱정되는 부분은 &lt;strong&gt;DB 연결&lt;/strong&gt;이었기에 그 부분으로 또다시 예광탄을 쏴봤습니다. DB 연결에 대한 내용은 &lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/4-dataBase&quot;&gt;다음 글&lt;/a&gt;에서 이어가겠습니다.&lt;/p&gt;
&lt;h2&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Babel Setup: &lt;a href=&quot;https://babeljs.io/setup#installation&quot;&gt;https://babeljs.io/setup#installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nodenon github repository: &lt;a href=&quot;https://github.com/remy/nodemon&quot;&gt;https://github.com/remy/nodemon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Why webpack: &lt;a href=&quot;https://webpack.kr/concepts/why-webpack/&quot;&gt;https://webpack.kr/concepts/why-webpack/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Webpack Getting Started: &lt;a href=&quot;https://webpack.js.org/guides/getting-started/#npm-scripts&quot;&gt;https://webpack.js.org/guides/getting-started/#npm-scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sass-loader: &lt;a href=&quot;https://github.com/webpack-contrib/sass-loader&quot;&gt;https://github.com/webpack-contrib/sass-loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;css-loader: &lt;a href=&quot;https://webpack.js.org/loaders/css-loader/&quot;&gt;https://webpack.js.org/loaders/css-loader/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;style-loader: &lt;a href=&quot;https://webpack.js.org/loaders/style-loader/&quot;&gt;https://webpack.js.org/loaders/style-loader/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MiniCssExtractPlugin: &lt;a href=&quot;https://webpack.js.org/plugins/mini-css-extract-plugin/&quot;&gt;https://webpack.js.org/plugins/mini-css-extract-plugin/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[[당신의 작업실] 2. SPA 프로토타입 제작과 프로젝트로의 적용]]></title><description><![CDATA[당신의 작업실 프로젝트 링크: https://pixel-workroom.herokuapp.com/ 프로젝트 깃허브 저장소 링크 : https://github.com/ha-il/project-pixel…]]></description><link>https://ha-il.github.io/side-project/project-pixel/2-prototype/</link><guid isPermaLink="false">https://ha-il.github.io/side-project/project-pixel/2-prototype/</guid><pubDate>Tue, 13 Jun 2023 12:20:02 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;당신의 작업실 프로젝트 링크&lt;/strong&gt;: &lt;a href=&quot;https://pixel-workroom.herokuapp.com/&quot;&gt;https://pixel-workroom.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;프로젝트 깃허브 저장소 링크&lt;/strong&gt; : &lt;a href=&quot;https://github.com/ha-il/project-pixel&quot;&gt;https://github.com/ha-il/project-pixel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;프로젝트 본격 시작! 그런데 뭐부터..?&lt;/h2&gt;
&lt;p&gt;일단 기획을 해야겠다는 생각이 들었지만, 제 개발 능력에 대한 걱정이 많이 들었습니다. Express와 Pug를 이용해서 서버 측에서 렌더링되는 웹 사이트를 만들어본 적은 있었지만, 바닐라 자바스크립트만으로 클라이언트 측에서 모두 렌더링되도록, 게다가 SPA 로 구현해본적은 없었기 때문입니다. 이런 &lt;strong&gt;프로젝트 개발 전반에 대한 노하우&lt;/strong&gt;는 대체 어디서 얻을 수 있을까 고민하다가 발견한 책이 &apos;&lt;strong&gt;실용주의 프로그래머&lt;/strong&gt;&apos;였습니다. 책 내용 중에 &quot;&lt;strong&gt;목표물을 찾기 위해 예광탄을 써라.&lt;/strong&gt;&quot;라는 팁이 있습니다.&lt;/p&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;이런 상황에서의 &lt;strong&gt;전형적인 반응&lt;/strong&gt;은 &lt;strong&gt;시스템을 극도로 세세히 명세화&lt;/strong&gt;하는 것이다. 모든 불확실한 점을 잡아매고, 환경 조건을 제약하고, 모든 요구사항을 일일이 항목으로 만들어서 몇 상자나 되는 명세서를 만든다. 그리고 목표물의 위치를 추측해서 총을 쏜다. 상당한 양의 계산을 우선 하고 나서, 그다음엔 발사하고, 맞기를 바라는 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;하지만 실용주의 프로그래머는 소프트웨어판 예광탄을 선호한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;예광탄이 효과적인 까닭은 일반 탄환과 동일한 환경 및 제약 조건에서 발사되기 때문이다. 탄환이 순식간에 목표물에 도달하기 때문에 기관총 사수는 &lt;strong&gt;즉각적인 피드백&lt;/strong&gt;을 얻을 수 있다. 실용적인 관점에서 봐도 &lt;strong&gt;예광탄은 상대적으로 비용이 적게 드는 방법&lt;/strong&gt;이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코딩에서 동일한 효과를 얻으려면 우리를 요구 사항으로부터 최종 시스템의 일부 측면까지 빨리, 눈에 보이게, 반복적으로 도달하게 해 줄 무언가를 찾아야 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;시스템을 정의하는 &lt;strong&gt;중요한 요구 사항&lt;/strong&gt;을 찾아라. 의문이 드는 부분이나 &lt;strong&gt;가장 위험이 커 보이는 곳&lt;/strong&gt;을 찾아라. &lt;strong&gt;이런 부분의 코드를 가장 먼저 작성하도록 개발 우선순위를 정하라.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;#x3C;실용주의 프로그래머 72p-73p&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;p&gt;책에서 언급하는 &apos;&lt;strong&gt;전형적인 반응&lt;/strong&gt;&apos;을 저도 보일 뻔 했습니다. 일단 기획을 하고, 요구사항을 최대한 자세히 명세한 다음, 명세에 맞게 순서대로 작업을 하면 될 것이라는 낙관적인 생각을 했었습니다. 하지만 실용주의 프로그래머를 읽고 저도 저만의 &lt;strong&gt;예광탄&lt;/strong&gt;을 쏴보기로 했습니다.&lt;/p&gt;
&lt;p&gt;이 프로젝트에 가장 중요한 요구사항은 당연히 &lt;strong&gt;뮤직 플레이어&lt;/strong&gt;고, 사용자가 웹 사이트 내에서 &lt;strong&gt;페이지를 전환하더라도 음악이 끊기지 않는 것&lt;/strong&gt;이 가장 중요했습니다. 그것을 위해서는 페이지 전환 간의 새로고침이 발생하지 않는 &lt;strong&gt;SPA 구현&lt;/strong&gt;이 너무나 중요했습니다. 바닐라 자바스크립트로 SPA를 구현하는 것은 개인 능력 향상의 주요 목표이기도 했지만, 프로젝트의 중요 요구사항이기도 했습니다.&lt;/p&gt;
&lt;p&gt;다른 기능은 다 제쳐두고 일단 작은 프로토타입을 만들어서 페이지 이동 간에 새로고침이 발생하지 않도록 구현할 수 있는지 확인해보고, 프로토타입을 성공적으로 만들었다면 프로토타입의 코드를 저만의 예광탄으로 만들어서 제 프로젝트에 던져보기로 했습니다.&lt;/p&gt;
&lt;h2&gt;1. 바닐라 자바스크립트로 SPA를 구현하기 위한 프로토타입 제작&lt;/h2&gt;
&lt;p&gt;프로토타입을 제작할 당시 제가 정했던 세 가지 목표가 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;핵심이 되는 &lt;strong&gt;컴포넌트 클래스&lt;/strong&gt;를 만들고, 그것을 기반으로 다른 컴포넌트를 확장시킬 것.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;화면 전환시에 &lt;strong&gt;새로고침이 발생하지 않도록&lt;/strong&gt; 구현할 것.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;새로고침 없이 전환되더라도 &lt;strong&gt;경로는 바뀌도록&lt;/strong&gt; 구현할 것.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;1.1 프로토타입에서 컴포넌트 클래스 만들기&lt;/h3&gt;
&lt;p&gt;첫번째 목표인 &lt;strong&gt;컴포넌트 클래스 생성&lt;/strong&gt;은 개발자 황준일님이 블로그에 작성하신 &lt;a href=&quot;https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Component/&quot;&gt;Vanilla Javascript로 웹 컴포넌트 만들기&lt;/a&gt;에 나온 코드를 참고했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  router&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;$target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;newState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Component&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;1.2 화면 전환 시 새로고침 없이 경로 변경하기&lt;/h2&gt;
&lt;p&gt;두번째 세번째 목표인 &apos;&lt;strong&gt;화면 전환 시 새로고침 없이 경로 변경하기&lt;/strong&gt;&apos;를 구현한 코드는 아래와 같습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; About &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./components/About.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Contact &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./components/Contact.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Home &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./components/Home.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Navigation &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./components/Navigation.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Component &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./core/Component.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $ &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./utils/dom.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Component 클래스를 기반으로 확장&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 각 라우터에 컴포넌트를 할당&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token string-property property&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Home&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string-property property&quot;&gt;&quot;/about&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; About&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string-property property&quot;&gt;&quot;/contact&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Contact&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &amp;lt;header&gt;헤더&amp;lt;/header&gt;
      &amp;lt;main&gt;메인&amp;lt;/main&gt;
      &amp;lt;footer&gt;2023 하일&amp;lt;/footer&gt;
    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// App 컴포넌트 하위에 Navigation과 Home 컴포넌트 렌더링&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Navigation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 새로고침이 발생할 경우 새로고침이 발생한 경로에 맞는 컴포넌트를 렌더링&lt;/span&gt;
    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;popstate&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pathname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pageComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;pageComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// a태그를 클릭하면 새로고침 없이 경로를 변경하고 경로에 맞는 컴포넌트를 렌더링&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; links &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a[href]&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    links&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; link&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pathname&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;history&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pushState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pageComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;pageComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#app&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 코드를 실행시키면 아래 이미지처럼 동작합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ha-il/project-pixel/assets/108077643/389f1b91-bb9f-4fc6-bdf3-90ce5ecbc1c8&quot; alt=&quot;proto-spa&quot;&gt;&lt;/p&gt;
&lt;p&gt;a 태그를 클릭하는데 &lt;strong&gt;새로고침이 발생하지 않고&lt;/strong&gt;, 각 링크에 맞게 &lt;strong&gt;경로도 확실히 변경&lt;/strong&gt;되는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;h3&gt;1.3 프로토타입을 프로젝트에 적용하기&lt;/h3&gt;
&lt;p&gt;이렇게 프로토타입을 만들어보니 자바스크립트로 SPA를 구현할 수 있겠다는 확신이 들었습니다. 프로토타입에서 만들어 본 &lt;strong&gt;클래스 컴포넌트를 수정하여 프로젝트에 도입&lt;/strong&gt;하고, 프로토타입의 폴더 구조를 &lt;strong&gt;프로젝트의 폴더 구조에 반영&lt;/strong&gt;했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;프로젝트&lt;/strong&gt;에 사용한 클래스 컴포넌트&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  router&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;$target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initRouter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;initRouter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;initState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;newState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Component&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;프로토타입&lt;/strong&gt;의 디렉터리 구조&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;├─ index.html
├─ index.md
├─ src
│  ├─ components
│  │  ├─ About.js
│  │  ├─ Contact.js
│  │  ├─ Home.js
│  │  └─ Navigation.js
│  ├─ core
│  │  └─ Component.js
│  ├─ index.js
│  └─ utils
│     └─ dom.js
└─ style.css&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;프로젝트&lt;/strong&gt;의 디렉터리 구조(프로토타입의 디렉터리 구조를 반영)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;├─ src
│  ├─ client
│  │  ├─ js
│  │  │   ├── components # Component Class를 확장시킨 컴포넌트 파일
│  │  │   ├── core 
│  │  │   │    └─ Component.js # Component Class 파일
│  │  │   ├── utils # 유틸 함수
│  │  │   └── main.js
│  │  └─ scss
│  │     ├─ _variables.scss
│  │     └─ styles.scss
│  ├─ server.js
│  └─ views
│     └─ layout.pug
├─ node_modules
├─ package-lock.json
├─ package.json
├─ README.md
└─ .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;프로토타입을 통해 프로젝트의 초기 보일러 플레이트 세팅을 시작할 수 있었고, 이것은 이 프로젝트에 &lt;strong&gt;예광탄&lt;/strong&gt;을 일단 쐈다는 의미였습니다. SPA구현 다음으로 걱정했던 부분은 Babel이나 Webpack과 같은 &lt;strong&gt;개발 환경&lt;/strong&gt; 설정이었습니다. 그래서 다음으로는 개발 환경 설정 과정으로 예광탄을 쏴봤습니다. 이에 대해서는 &lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/3-boiler-plate&quot;&gt;다음 글&lt;/a&gt;에서 이어가겠습니다.&lt;/p&gt;
&lt;h2&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vanilla Javascript로 웹 컴포넌트 만들기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by 황준일&lt;/li&gt;
&lt;li&gt;last updated: February 14, 2023&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/trim&quot;&gt;문서 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실용주의 프로그래머: Pragmatic Programmer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by David Thomas, Andrew Hunt, 인사이트, 2022&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://product.kyobobook.co.kr/detail/S000001033128&quot;&gt;도서 구매 링크(교보문고)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[[당신의 작업실] 1. 프로젝트를 시작하게 된 이유]]></title><description><![CDATA[당신의 작업실 프로젝트 링크: https://pixel-workroom.herokuapp.com/ 프로젝트 깃허브 저장소 링크 : https://github.com/ha-il/project-pixel…]]></description><link>https://ha-il.github.io/side-project/project-pixel/1-motive/</link><guid isPermaLink="false">https://ha-il.github.io/side-project/project-pixel/1-motive/</guid><pubDate>Tue, 13 Jun 2023 12:20:01 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;당신의 작업실 프로젝트 링크&lt;/strong&gt;: &lt;a href=&quot;https://pixel-workroom.herokuapp.com/&quot;&gt;https://pixel-workroom.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;프로젝트 깃허브 저장소 링크&lt;/strong&gt; : &lt;a href=&quot;https://github.com/ha-il/project-pixel&quot;&gt;https://github.com/ha-il/project-pixel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;들어가기 전에&lt;/h2&gt;
&lt;p&gt;&quot;당신의 작업실&quot; 프로젝트를 제작하게 된 이유를 설명하려면, 먼저 &lt;strong&gt;바닐라 자바스크립트에 집중하게된 계기&lt;/strong&gt;를 먼저 설명드려야할 것 같습니다.&lt;/p&gt;
&lt;h2&gt;프로그래머스 프론트엔드 데브 매칭&lt;/h2&gt;
&lt;p&gt;프로그래머스라는 사이트에서 실시하는 &apos;&lt;strong&gt;프론트엔드 데브매칭&lt;/strong&gt;&apos;이라는 채용 프로그램이 있습니다. 해당 프로그램에는 주어진 과제를 &lt;strong&gt;바닐라 자바스크립트&lt;/strong&gt;만으로 구현해서 제출하는 테스트가 포함되어 있습니다. 저는 이 채용 프로그램에 두 번 참여했었는데요. 첫번째 참여가 2022년 하반기 데브매칭이었습니다. 당시 저는 바닐라 자바스크립트로 투두리스트나 &lt;a href=&quot;https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca?hl=ko&quot;&gt;모멘텀&lt;/a&gt; 같은 간단한 앱을 만들 수 있는 수준이었고, 리액트도 조금 맛 본 상태였습니다. 그때 저는 첫번째 데브매칭을 준비하기 위해 프로그래머스에서 연습용 과제테스트를 풀어봤는데, 시간은 좀 오래 걸렸지만 문제는 해결할 수 있었습니다.&lt;/p&gt;
&lt;p&gt;하지만 과제테스트의 &lt;a href=&quot;https://prgms.tistory.com/139&quot;&gt;해설&lt;/a&gt;을 보고 적잖은 충격을 받았습니다. index.js에 모든 코드를 욱여넣었던 저와 달리, 해설의 코드는 생성자 함수를 활용해서 &lt;strong&gt;컴포넌트 단위&lt;/strong&gt;로 파일을 나눠서 코드를 작성하고 있었고 &lt;strong&gt;상태를 기반으로 렌더링&lt;/strong&gt;하고 있었습니다.&lt;/p&gt;
&lt;p&gt;&quot;&lt;strong&gt;이거 완전 리액트같은데? 바닐라 자바스크립트로도 이렇게 작성할 수 있는 거였어?&lt;/strong&gt;&quot;&lt;/p&gt;
&lt;p&gt;제가 경험했던 자바스크립트와는 완전히 다른 세계의 자바스크립트 같았습니다. 코드를 따라해보기는 커녕 이해하는 것부터 애를 먹는 상황이었습니다. 그래서, &apos;&lt;strong&gt;모던 자바스크립트 딥 다이브&lt;/strong&gt;&apos;라는 책으로 생성자 함수, 클래스, this 부분을 읽으면서 부족한 개념을 공부하고, 바닐라 자바스크립트로 앱을 작성하는 다양한 자료들을 보면서 스스로 공부해나가기 시작했습니다.&lt;/p&gt;
&lt;h2&gt;줌인터넷의 기술 블로그&lt;/h2&gt;
&lt;p&gt;그때 발견한 자료 중에서 개발자 황준일님이 블로그에 작성하신 &lt;a href=&quot;https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Component/&quot;&gt;Vanilla Javascript로 웹 컴포넌트 만들기&lt;/a&gt;라는 글이 정말 많이 도움이 되었고, 황준일님이 작성하신 다른 글들을 읽다보니 줌인터넷 기술블로그에 있는 &lt;a href=&quot;https://zuminternet.github.io/zum-front-recurit-review/&quot;&gt;주니어 프론트엔드 개발자의 채용 프로세스 참여 후기&lt;/a&gt;라는 글을 발견하게 됐습니다.&lt;/p&gt;
&lt;p&gt;해당 글의 채용과제와 심사표를 보고 &quot;실력있는 개발자는 바닐라 자바스크립트로 이렇게까지 구현할 수 있구나&quot;라는 생각이 들었습니다. 그리고 &quot;&lt;strong&gt;심사표를 참고해서 나도 바닐라 자바스크립트만으로 SPA를 구현해보고 싶다&lt;/strong&gt;&quot;라는 생각이 들면서 도전 의식이 솟아나기 시작했습니다.&lt;/p&gt;
&lt;h2&gt;노마드코더의 멜론 클론코딩 컨텐스트&lt;/h2&gt;
&lt;p&gt;그때 마침 노마드코더라는 사이트에서 &lt;strong&gt;바닐라 자바스크립트로만&lt;/strong&gt; 앱을 구현해야 하는 &lt;strong&gt;&lt;a href=&quot;https://nomadcoders.co/melon-contest&quot;&gt;멜론 클론코딩 컨테스트 2기&lt;/a&gt;&lt;/strong&gt; 모집이 시작됐습니다. 어차피 바닐라 자바스크립트로 프로젝트를 만들어보려던 참이라, 이 컨테스트에 참가해보자라는 생각이 들었습니다.&lt;/p&gt;
&lt;p&gt;멜론 클론코딩 컨테스트는 멜론 뮤직플레이어를 참고해서 클론 코딩해도 되지만, 필수 구현 기능만 포함된다면 굳이 &lt;strong&gt;멜론 뮤직플레이어를 클론코딩하지 않아도 되는&lt;/strong&gt; 컨테스트였습니다. &lt;strong&gt;웹 뮤직 플레이어를 스스로 만들어서 제출&lt;/strong&gt;하되, 필수 구현 기능으로 &quot;&lt;strong&gt;뮤직 플레이어&lt;/strong&gt;&quot;, &quot;&lt;strong&gt;인기곡 차트&lt;/strong&gt;&quot;, &quot;&lt;strong&gt;플레이리스트&lt;/strong&gt;&quot;가 반드시 포함되어야 했습니다. 기술 스택은 프론트엔드의 경우 &lt;code class=&quot;language-text&quot;&gt;HTML&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;CSS&lt;/code&gt;(설정이 가능하다면 &lt;code class=&quot;language-text&quot;&gt;SCSS&lt;/code&gt; 허용), &lt;code class=&quot;language-text&quot;&gt;바닐라 자바스크립트&lt;/code&gt;로 제한하고, 백엔드의 경우 &lt;code class=&quot;language-text&quot;&gt;Express.js&lt;/code&gt;로 제한하는 조건이 있었습니다.&lt;/p&gt;
&lt;h2&gt;그래서 &quot;당신의 작업실&quot;이라는 프로젝트를 시작하게된 이유는...&lt;/h2&gt;
&lt;p&gt;이렇게 &lt;strong&gt;바닐라 자바스크립트로 컴포넌트 기반 설계&lt;/strong&gt;를 하는 것과 &lt;strong&gt;SPA를 구현하는 것&lt;/strong&gt;에 관심이 생겨 공부를 하다가, 우연히 바닐라 자바스크립트만으로 기술 스택을 제한하는 개인 프로젝트 컨테스트가 열리게 되어서 이 프로젝트를 시작하게 되었습니다.&lt;/p&gt;
&lt;p&gt;프로젝트를 시작하게 되면 보통 기획을 먼저 하는데, 이번 프로젝트는 제가 컴포넌트 기반 설계와 SPA를 구현할 수 있는지 없는지가 중요하기 때문에 먼저 작은 &lt;strong&gt;프로토타입&lt;/strong&gt;을 만들어보기로 했습니다. 프로토타입에 대한 내용은 &lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/2-prototype&quot;&gt;다음 글&lt;/a&gt;에서 이어가겠습니다.&lt;/p&gt;
&lt;h2&gt;당시 참고했던 자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vanilla Javascript로 웹 컴포넌트 만들기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by 황준일&lt;/li&gt;
&lt;li&gt;last updated: February 14, 2023&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/trim&quot;&gt;문서 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주니어 프론트엔드 개발자의 채용 프로세스 참여 후기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by 황준일&lt;/li&gt;
&lt;li&gt;last updated: July 1, 2021&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;☕ 블랙커피 Vanilla JS Lv1. 문벅스 카페 메뉴 앱 만들기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by Maker Jun&lt;/li&gt;
&lt;li&gt;last updated: October, 2021&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by 이웅모, 위키북스, 2020&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://product.kyobobook.co.kr/detail/S000001766445&quot;&gt;도서 구매 링크(교보문고)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[프로젝트에 적용하기 위한 정규 표현식]]></title><description><![CDATA[…]]></description><link>https://ha-il.github.io/regexp/</link><guid isPermaLink="false">https://ha-il.github.io/regexp/</guid><pubDate>Wed, 07 Jun 2023 14:13:00 GMT</pubDate><content:encoded>&lt;h2&gt;정규 표현식은 왜 배우나요?&lt;/h2&gt;
&lt;p&gt;&quot;당신의 작업실&quot;이라는 웹 뮤직 플레이어를 개인 프로젝트로 진행했었습니다. 프로젝트를 개발하는 과정 중에서 정규 표현식을 활용해 검색 기능을 구현했었는데, 이 검색 기능에 문제가 많았습니다. &lt;code class=&quot;language-text&quot;&gt;검색 기능을 개선하기 위해서는 정규 표현식에 대한 학습이 필요했기 때문에&lt;/code&gt; 이 글을 작성하게 되었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;관련 글: &lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/9-dev-regexp/&quot;&gt;[당신의 작업실] 9. 프로젝트 개발 과정 - 정규 표현식과 검색 기능 개선&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;당신의 작업실 배포 사이트: &lt;a href=&quot;https://pixel-workroom.herokuapp.com/&quot;&gt;https://pixel-workroom.herokuapp.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;자바스크립트에서 정규 표현식 객체 생성하기&lt;/h2&gt;
&lt;p&gt;정규 표현식 객체를 생성하기 전에, 우선 &lt;code class=&quot;language-text&quot;&gt;정규 표현식 리터럴&lt;/code&gt;에 대해서 알아둘 필요가 있습니다.&lt;/p&gt;
&lt;p&gt;정규 표현식 리터럴은 정규 표현식을 &lt;code class=&quot;language-text&quot;&gt;/regexp/i&lt;/code&gt;와 같은 형태로 표기하는 것을 말합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;/regexp/i

/ : 시작 기호
reqexp : 패턴(pattern)
/ : 종료 기호
i : 플래그(flag)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;정규 표현식 리터럴&lt;/code&gt;을 사용하면 자바스크립트에서 &lt;code class=&quot;language-text&quot;&gt;정규 표현식 객체를 생성&lt;/code&gt;할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 1. 정규 표현식 리터럴을 사용하여 정규 표현식 객체를 생성&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; 거리에서 &quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regexp1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;거리에서&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;i&lt;/span&gt;&lt;/span&gt;
regexp1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정규 표현식 리터럴은 스크립트를 불러올 때 컴파일되므로, 바뀔 일이 없는 패턴의 경우 리터럴을 사용하면 성능이 향상될 수 있습니다. (출처:&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Regular_expressions#%EC%A0%95%EA%B7%9C_%ED%91%9C%ED%98%84%EC%8B%9D_%EB%A7%8C%EB%93%A4%EA%B8%B0&quot;&gt;MDN 정규_표현식_만들기&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;자바스크립트에서 정규 표현식 객체를 생성할 수 있는 또다른 방법은 &lt;code class=&quot;language-text&quot;&gt;RegExp 생성자 함수&lt;/code&gt;를 사용하는 것입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 2. RegExp 생성자 함수를 사용하여 정규 표현식 객체를 생성&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; 거리에서 &quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regexp2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;거리에서&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ES6&lt;/span&gt;
regexp2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regexp3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;거리에서&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ES6&lt;/span&gt;
regexp3&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regexp4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;거리에서&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
regexp4&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; string &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; 거리에서 &quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regexp5 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;i&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 변수를 사용해서 생성 가능&lt;/span&gt;
regexp5&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;생성자 함수를 사용하면 정규 표현식이 런타임에 컴파일됩니다.&lt;/p&gt;
&lt;p&gt;바뀔 수 있는 패턴이나, 사용자 입력 등 외부 출처에서 가져오는 패턴의 경우 생성자 함수를 사용할 것을 권장합니다. (출처:&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Regular_expressions#%EC%A0%95%EA%B7%9C_%ED%91%9C%ED%98%84%EC%8B%9D_%EB%A7%8C%EB%93%A4%EA%B8%B0&quot;&gt;MDN 정규_표현식_만들기&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;정규 표현식 관련 주요 메서드&lt;/h2&gt;
&lt;p&gt;정규 표현식과 관련 된 주요 메서드로는 아래와 같이 3가지 메서드가 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RegExp.prototype.test()&lt;/li&gt;
&lt;li&gt;RegExp.prototype.exec()&lt;/li&gt;
&lt;li&gt;String.prototype.match()&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;RegExp.prototype.test()&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test&quot;&gt;test()&lt;/a&gt; 메서드는 주어진 문자열이 정규 표현식을 만족하는지 판별하고, 그 여부를 true 또는 false로 반환합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; 거리에서 구리에서 거리에서 고리에서 &quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regExp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;거리에서&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;

regExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;RegExp.prototype.exec()&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec&quot;&gt;exec()&lt;/a&gt; 메서드는 주어진 문자열에서 일치 탐색을 수행한 결과를 배열 혹은 null로 반환합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; 거리에서 구리에서 거리에서 고리에서 &quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regExp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;거리에서&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;

regExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;거리에서&apos;, index: 1, input: &apos; 거리에서 구리에서 거리에서 고리에서 &apos;, groups: undefined ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드를 보시면 target 문자열에 &apos;거리에서&apos;라는 문자열은 &lt;code class=&quot;language-text&quot;&gt;두 번&lt;/code&gt; 등장하지만, &lt;code class=&quot;language-text&quot;&gt;맨 처음 일치한&lt;/code&gt; &apos;거리에서&apos;에 대한 정보만 반환된 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;두 번째 일치하는 &apos;거리에서&apos;라는 정보까지 반환받기 위해서는 어떻게 해야할까요?&lt;/p&gt;
&lt;p&gt;정규 표현식 리터럴을 설명할 때 &lt;code class=&quot;language-text&quot;&gt;플래그&lt;/code&gt;라는 단어가 잠깐 등장했었는데, 플래그를 간단히 설명하면 &lt;code class=&quot;language-text&quot;&gt;탐색 방식&lt;/code&gt;이라고 설명할 수 있습니다.&lt;/p&gt;
&lt;p&gt;플래그에는 &lt;code class=&quot;language-text&quot;&gt;g&lt;/code&gt;라는 플래그가 있는데, 이 플래그는 &lt;code class=&quot;language-text&quot;&gt;전역 탐색&lt;/code&gt;을 의미합니다.&lt;/p&gt;
&lt;p&gt;그렇다면 &lt;code class=&quot;language-text&quot;&gt;/거리에서/g&lt;/code&gt;로 정규 표현식 리터럴을 표기하면 target 문자열에 존재하는 모든 &apos;거리에서&apos;라는 문자열에 대한 정보가 반환될까요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; 거리에서 구리에서 거리에서 고리에서 &quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regExpGlobal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;거리에서&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;

regExpGlobal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// exec 메서드는 g 플래그를 지정해도 첫 번째 매칭 결과만 반환합니다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;거리에서&apos;, index: 1, input: &apos; 거리에서 구리에서 거리에서 고리에서 &apos;, groups: undefined ]&lt;/span&gt;

regExpGlobal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 단, exec 메서드는 g 플래그를 지정한 경우 이전 매칭 결과의 인덱스를 저장하므로 상태를 가지고 있습니다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 따라서 regExpGlobal.exec(target)를 한 번 더 호출하면 두 번째 매칭 결과를 반환한다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;거리에서&apos;, index: 11, input: &apos; 거리에서 구리에서 거리에서 고리에서 &apos;, groups: undefined ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;exec 메서드는 &lt;code class=&quot;language-text&quot;&gt;g&lt;/code&gt; 플래그를 지정해도 &lt;code class=&quot;language-text&quot;&gt;첫 번째 매칭 결과만 반환&lt;/code&gt;하지만, &lt;code class=&quot;language-text&quot;&gt;이전 매칭 결과의 인덱스를 저장&lt;/code&gt;하므로 상태를 가지고 있기 때문에, 한 번 더 호출하면 상태를 기반으로 다음 매칭 결과를 반환합니다.&lt;/p&gt;
&lt;h3&gt;String.prototype.match()&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/match&quot;&gt;match()&lt;/a&gt; 메서드는 문자열이 정규식과 일치하는 부분을 검색합니다.&lt;/p&gt;
&lt;p&gt;문자열이 정규식과 일치하면, 일치하는 전체 문자열을 첫 번째 요소로 포함하는 Array를 반환한 다음 괄호 안에 캡처된 결과가 옵니다. 일치하는 것이 없으면 null이 반환됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; 거리에서 구리에서 거리에서 고리에서 &quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regExp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;거리에서&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;

target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regExp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;거리에서&apos;, index: 1, input: &apos; 거리에서 구리에서 거리에서 고리에서 &apos;, groups: undefined ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드를 보면 알 수 있듯이 match 메서드는 &lt;code class=&quot;language-text&quot;&gt;g 플래그가 지정되지 않으면&lt;/code&gt; RegExp.prototype.&lt;code class=&quot;language-text&quot;&gt;exec()&lt;/code&gt;와 같은 결과를 반환합니다.&lt;/p&gt;
&lt;p&gt;그렇다면 g 플래그를 지정하면 어떻게 될까요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; 거리에서 구리에서 거리에서 고리에서 &quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regExpGlobal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;거리에서&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;

target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regExpGlobal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;거리에서&apos;, &apos;거리에서&apos; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위킈 코드를 보면 알 수 있듯이 match 메서드는 &lt;code class=&quot;language-text&quot;&gt;g 플래그가 지정되면&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;모든 매칭 결과를 배열로 반환&lt;/code&gt;합니다.&lt;/p&gt;
&lt;h2&gt;정규 표현식의 주요 플래그&lt;/h2&gt;
&lt;p&gt;위에서 잠깐 언급했듯이, 플래그는 정규 표현식의 &lt;code class=&quot;language-text&quot;&gt;탐색 방식&lt;/code&gt;이라고 말할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Regular_expressions#%ED%94%8C%EB%9E%98%EA%B7%B8%EB%A5%BC_%ED%99%9C%EC%9A%A9%ED%95%9C_%EA%B3%A0%EA%B8%89_%ED%83%90%EC%83%89&quot;&gt;MDN의 정규 표현식-플래그를 활용한 고급 탐색&lt;/a&gt; 문서를 보면 플래그의 종류는 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;d :	부분 문자열 일치에 대해 인덱스 생성.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;g&lt;/code&gt; :	전역 탐색.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;i&lt;/code&gt; :	대소문자를 구분하지 않음.&lt;/li&gt;
&lt;li&gt;m :	여러 줄에 걸쳐 탐색.&lt;/li&gt;
&lt;li&gt;s :	개행 문자가 .과 일치함.&lt;/li&gt;
&lt;li&gt;u :	&quot;unicode&quot;, 패턴을 유니코드 코드 포인트의 시퀀스로 간주함.&lt;/li&gt;
&lt;li&gt;y :	&quot;접착&quot; 탐색, 대상 문자열의 현재 위치에서 탐색을 시작함.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 중에서 실제로 가장 많이 사용할 것 같은 플래그인 &lt;code class=&quot;language-text&quot;&gt;g&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;i&lt;/code&gt;만 예시를 통해서 확인해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; Geori guri gori geori&quot;&lt;/span&gt;

target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;geori&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;geori&apos;, index: 17, input: &apos; Geori guri gori geori&apos;, groups: undefined ]&lt;/span&gt;

target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;geori&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// i : 대소문자를 구분하지 않음.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;Geori&apos;, index: 1, input: &apos; Geori guri gori geori&apos;, groups: undefined ]&lt;/span&gt;

target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;geori&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// g : 전역 탐색.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;geori&apos; ]&lt;/span&gt;

target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;geori&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;gi&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 순서에 상관 없이 한꺼번에 여럿을 지정할 수도 있음.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;Geori&apos;, &apos;geori&apos; ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;정규 표현식의 패턴&lt;/h2&gt;
&lt;p&gt;정규 표현식의 패턴은 플래그보다도 종류가 많기 때문에, 모든 패턴의 사용법을 공부하는 것은 어렵습니다.&lt;/p&gt;
&lt;p&gt;따라서 &lt;code class=&quot;language-text&quot;&gt;어떤 상황에 어떤 패턴을 사용하는 것이 좋은가&lt;/code&gt;를 중점적으로 다루겠습니다.&lt;/p&gt;
&lt;p&gt;패턴은 설명하는 것보다 예시를 보는 것이 이해가 빠르기 때문에, 설명은 생략하고 예시 위주로 다루겠습니다.&lt;/p&gt;
&lt;p&gt;자세한 설명이 필요하신 분은 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Regular_expressions#%EC%A0%95%EA%B7%9C_%ED%91%9C%ED%98%84%EC%8B%9D_%ED%8C%A8%ED%84%B4_%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0&quot;&gt;MDN의 정규 표현식-정규 표현식 패턴 작성하기&lt;/a&gt;를 참고해주시기 바랍니다.&lt;/p&gt;
&lt;h3&gt;임의의 문자열 검색&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;사랑은 향기를 남기고&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// .은 임의의 문자 한 개를 의미&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;사&apos;, &apos;랑&apos;, &apos;은&apos;, &apos; &apos;,  &apos;향&apos;, &apos;기&apos;, &apos;를&apos;, &apos; &apos;,  &apos;남&apos;, &apos;기&apos;, &apos;고&apos; ]&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;사랑은 향기를 남기고&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;사랑&apos;, &apos;은 &apos;, &apos;향기&apos;, &apos;를 &apos;, &apos;남기&apos; ]&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;사랑은 향기를 남기고&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;사랑은&apos;, &apos; 향기&apos;, &apos;를 남&apos; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;반복 검색&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;나 나나나 난난나나나나&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;나{1,2}&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// {m,n} : 앞선 패턴이 최소 m번, 최대 n번 반복&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;나&apos;, &apos;나나&apos;, &apos;나&apos;, &apos;나나&apos;, &apos;나나&apos; ]&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;나 나나나 난난나나나나&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;나{2}&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// {n} : 앞선 패턴이 n번 반복&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;나나&apos;, &apos;나나&apos;, &apos;나나&apos; ]&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;나 나나나 난난나나나나&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;나{2,}&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// {n,} : 앞선 패턴이 최소 n번 이상 반복&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;나나나&apos;, &apos;나나나나&apos; ]&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;나 나나나 난난나나나나&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;나+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// + : 앞선 패턴이 최소 한번 이상 반복, {1,}과 같다&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;나&apos;, &apos;나나나&apos;, &apos;나나나나&apos; ]&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;나 나나나 난난나나나나&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;나*&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// * : 앞선 패턴이 0번 이상 반복&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;나&apos;, &apos;&apos;, &apos;나나나&apos;, &apos;&apos;, &apos;&apos;, &apos;&apos;, &apos;나나나나&apos;, &apos;&apos; ]&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;나 나나나 난난나나나나&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;난나?&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// ? : 앞선 패턴이 최대 한 번(0번 포함) 이상 반복, {0, 1}과 같다&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;난&apos;, &apos;난나&apos; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;OR 검색&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;라라라 리 라라 라라라 리 라라&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;라|리&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// /A|B/ : &apos;A&apos; 또는 &apos;B&apos;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;라&apos;, &apos;라&apos;, &apos;라&apos;, &apos;리&apos;, &apos;라&apos;, &apos;라&apos;, &apos;라&apos;, &apos;라&apos;, &apos;리&apos;, &apos;리&apos;, &apos;라&apos;, &apos;라&apos; ]&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;라라라 리 라라 라라라 리 라라&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;라+|리+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// /A+|B+/ : &apos;A&apos; 또는 &apos;B&apos;가 한 번 이상 반복&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;라라라&apos;, &apos;리&apos;, &apos;라라&apos;, &apos;라라라&apos;, &apos;리&apos;, &apos;라라&apos; ]&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;라라라 리 라라 라라라 리 라라&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[라리]&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// /[AB]/ : &apos;A&apos; 또는 &apos;B&apos;, /A|B/와 같다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;라&apos;, &apos;라&apos;, &apos;라&apos;, &apos;리&apos;, &apos;라&apos;, &apos;라&apos;, &apos;라&apos;, &apos;라&apos;, &apos;라&apos;, &apos;리&apos;, &apos;라&apos;, &apos;라&apos; ]&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;라라라 리 라라 라라라 리 라라&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[라리]+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// /[AB]+/ : &apos;A&apos; 또는 &apos;B&apos;가 한 번 이상 반복, /A+|B+/와 같다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;라라라&apos;, &apos;리&apos;, &apos;라라&apos;, &apos;라라라&apos;, &apos;리&apos;, &apos;라라&apos; ]&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;I LOVE yoU&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[A-Z]+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [...] 내의 - 는 범위를 의미&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// /[A-Z]+/ : 대문자 알파벳 검색&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;I&apos;, &apos;LOVE&apos;, &apos;U&apos; ]&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;I LOVE yoU&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[A-Za-z]+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// /[A-Za-z]+/ : 대소문자 구별하지 않고 알파벳 검색&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;I&apos;, &apos;LOVE&apos;, &apos;yoU&apos; ]&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;내 전화 번호는 010-1234-5678&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[0-9]+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// /[0-9]+/ : 숫자 검색&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;010&apos;, &apos;1234&apos;, &apos;5678&apos; ]&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;내 전화 번호는 010-1234-5678&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[0-9-]+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// /[0-9-]+/ : 숫자 또는 하이픈이 포함된 문자 검색&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;010-1234-5678&apos; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;정규 표현식의 문자 클래스 활용&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;내 전화 번호는 010-1234-5678&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[\d-]+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// \d : 숫자&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//[ &apos;010-1234-5678&apos; ]&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;내 전화 번호는 010-1234-5678&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[\D-]+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// \D: 숫자가 아닌 문자&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//[ &apos;내 전화 번호는 &apos;, &apos;-&apos;, &apos;-&apos; ]&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;w is Alphabet Number_1234 Underscore_ 한글 !@#$%^&amp;amp;*()-+.,/?&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[\w]+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// \w: 알파벳, 숫자, 언더스코어&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos;w&apos;, &apos;is&apos;, &apos;Alphabet&apos;, &apos;Number_1234&apos;, &apos;Underscore_&apos; ]&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;w is Alphabet Number_1234 Underscore_ 한글 !@#$%^&amp;amp;*()-+.,/?&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[\W]+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// \W: 알파벳, 숫자, 언더스코어가 아닌 문자&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [ &apos; &apos;, &apos; &apos;, &apos; &apos;, &apos; &apos;, &apos; 한글 !@#$%^&amp;amp;*()-+.,/?&apos; ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;NOT 검색&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;내 전화 번호는 010-1234-5678&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[^0-9]+&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [...] 내의 ^ : not의 의미&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// /[^0-9]+/ : 숫자가 아닌 문자 검색, /D와 같다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//[ &apos;내 전화 번호는 &apos;, &apos;-&apos;, &apos;-&apos; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;시작 위치로 검색&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;^https:&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://ha-il.github.io/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;^http:&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://ha-il.github.io/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [...] 밖의 ^ : 문자열의 시작을 의미&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;마지막 위치로 검색&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;com$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ha-il@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;com$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ha-il@gmail.come&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// $ : 문자열의 마지막을 의미&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;이스케이핑&lt;/h3&gt;
&lt;p&gt;여태까지 정규 표현식에서 사용되는 다양한 패턴과, 그 패턴에 사용되는 다양한 &lt;code class=&quot;language-text&quot;&gt;특수문자&lt;/code&gt;(/, +, -, ^, $ ...)를 봤습니다.&lt;/p&gt;
&lt;p&gt;그런데, 그 특수문자를 있는 그대로 탐색해야 하는 경우는 어떻게 해야할까요?&lt;/p&gt;
&lt;p&gt;그럴 때는 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Regular_expressions#%EC%9D%B4%EC%8A%A4%EC%BC%80%EC%9D%B4%ED%95%91&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;이스케이핑&lt;/code&gt;&lt;/a&gt;을 해주어야 합니다.&lt;/p&gt;
&lt;p&gt;정규 표현식의 특수 문자를 이스케이핑 하는 방법은 특수문자 앞에 역슬래시 &lt;code class=&quot;language-text&quot;&gt;\&lt;/code&gt;를 작성하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;a+b&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a+b&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;a\&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a+b&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;정규 표현식을 해독(?)해보자&lt;/h2&gt;
&lt;p&gt;지금까지 살펴본 정규 표현식 관련 내용을 참고하면, 정규 표현식을 자유자재로 읽고 쓸 수 있을 것입니다.&lt;/p&gt;
&lt;p&gt;바로 아래 예제를 살펴보겠습니다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// RFC2822 Email Validation&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regExp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 나한테 왜 이러는겨...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사실 정규 표현식에 대해서 알고 있어도, 위와 같은 정규 표현식을 아무런 설명없이 보게 된다면 조금 당황스러울 것입니다.&lt;/p&gt;
&lt;p&gt;위의 정규 표현식은 이메일을 검증하기 위해 사용되는 정규 표현식으로, &lt;a href=&quot;https://regexr.com/&quot;&gt;RegExr&lt;/a&gt;과 같은 사이트를 이용하면 쉽게 얻을 수 있습니다.&lt;/p&gt;
&lt;p&gt;즉, 웬만한 정규 표현식은 직접 작성할 필요 없이 검색을 통해서 쉽게 구할 수 있다는 것입니다.&lt;/p&gt;
&lt;p&gt;하지만 구글 검색 또는 챗 GPT를 통해서 얻은 정규 표현식을 확인도 안 하고 그냥 사용하는 것에서 저는 약간의 찜찜함을 느낍니다.&lt;/p&gt;
&lt;p&gt;내가 직접 작성할 필요는 없더라도, 검색해서 얻은 정규 표현식을 해석하고 약간의 수정을 할 수 있는 정도가 되면 좋지 않을까요?&lt;/p&gt;
&lt;p&gt;그래서 이번에는 RegExr 사이트의 &quot;Community Patterns&quot;에서 실제로 쓸모가 있을 것 같은 패턴을 뽑아서 해석해보는 연습을 해보겠습니다.&lt;/p&gt;
&lt;h3&gt;패턴1: Password Validation&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; passwordValidation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;

passwordValidation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Number7&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
passwordValidation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ONLYUPPER123&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
passwordValidation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;onlylower123&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
passwordValidation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NotInNumber&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
passwordValidation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;C0rrect!@#$&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//true&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* 정규 표현식 분석

^ : 시작 위치

(?=.*\d) : 주어진 문자열에 숫자가 포함되어야 함
  x(?=y) : x 뒤에 y가 오는 경우에만 일치하는 것으로 판단
  .*: 임의의 문자가 0번 이상 반복
  \d : 0-9의 숫자

(?=.*[a-z]) : 주어진 문자열에 알파벳 소문자가 포함되어야 함
  [a-z] : 알파벳 소문자

(?=.*[A-Z]) : 주어진 문자열에 알파벳 대문자가 포함되어야 함 
  [A-Z] : 알파벳 대문자

.{8,} : 임의의 문자가 최소 8번 이상 반복(임의의 문자이므로 특수문자도 가능)

$ 종료 위치

해석: 주어진 문자열이 알파벳 대문자, 알파벳 소문자, 숫자를 포함한 8자 이상의 문자열인지 판별하는 정규 표현식
*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;패턴2: M/D/YYYY or MM/DD/YYYY&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dateRegExp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;^(0?[1-9]|1[0-2])[\/](0?[1-9]|[12]\d|3[01])[\/](19|20)\d{2}$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;

dateRegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;01/01/2023&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//true&lt;/span&gt;
dateRegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1/1/2023&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//ture&lt;/span&gt;
dateRegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;12/31/2023&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//true&lt;/span&gt;

dateRegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;99/1/2023&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
dateRegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1/99/2023&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;
dateRegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1/1/9999&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* 정규 표현식 분석

^ : 시작 위치

(0?[1-9]|1[0-2])
  () : 그룹 지정
  0? : 숫자 0이 최소 0번 최대 1번 반복된다. (1~9월을 표기할 때 0 포함 여부)
  [1-9] : 1-9 사이의 숫자 하나가 포함된다. (1월 ~ 9월)
  | : 또는
  1[0-2] : 1 뒤에 0-2 사이의 숫자 하나가 포함된다. (10월 ~ 12월)


[\/] : 역슬래시가 포함된다.
  [\/]를 \/로만 표기해도 되지만, 추후 다른 특수 문자(-, .)를 고려하기 위해 넣지 않았나 추정

(0?[1-9]|[12]\d|3[01])
  0? : 숫자 0이 최소 0번 최대 1번 반복된다. (1~9일을 표기할 때 0 포함 여부)
  [1-9] : 1-9 사이의 숫자 하나 포함된다. (1일 ~ 9일)
  | : 또는
  [12]\d : 1 또는 2와 0-9 사이의 숫자 하나 포함된다. (10일~29일)
  | : 또는
  3[01] : 3 뒤에 0 또는 1이 포함 (30, 31일)


[\/] : 역슬래시가 포함된다.

(19|20)\d{2}: 19 또는 20 뒤에 0-9 사이의 숫자가 2 번 반복된다. (1900년~2099년)

$ : 종료 위치

해석: 주어진 문자열의 날짜 형식이 M/D/YYYY 또는 MM/DD/YYYY 형식인지 판별하는 정규 표현식
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;M/D/YYYY or MM/DD/YYYY의 수정&lt;/h4&gt;
&lt;p&gt;저의 경우 M/D/YYYY or MM/DD/YYYY 형식 보다는 YYYY/MM/DD 형식을 사용하는 경우가 많습니다.&lt;/p&gt;
&lt;p&gt;그리고 날짜의 경우 슬래시(/)도 사용하지만 하이픈(-)이나 마침표(.)를 사용하기도 하므로 정규 표현식을 수정해보도록 하겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dateRegExp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;^(19|20)\d{2}[\/\-\.](0?[1-9]|1[0-2])[\/\-\.](0?[1-9]|[12]\d|3[01])$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;

dateRegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2022/06/08&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
dateRegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2022-06-08&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
dateRegExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2022.06.08&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;패턴3: RFC2822 Email Validation&lt;/h3&gt;
&lt;h4&gt;잠깐! 패턴 분석 전에 캡처 그룹에 대해서 알아보자&lt;/h4&gt;
&lt;p&gt;RFC2822 Email Validation을 본격적으로 살펴보기 전에 알고가면 좋은 내용이 있습니다.&lt;/p&gt;
&lt;p&gt;날짜 패턴을 분석할 때 소괄호&lt;code class=&quot;language-text&quot;&gt;()&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;그룹 지정&lt;/code&gt;으로 간단히 소개하고 넘어갔는데요.&lt;/p&gt;
&lt;p&gt;사실 정규 표현식에서 소괄호&lt;code class=&quot;language-text&quot;&gt;()&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;캡처 그룹(Capturing group)&lt;/code&gt;을 의미합니다.&lt;/p&gt;
&lt;p&gt;캡처 그룹과 비슷한 개념으로 &lt;code class=&quot;language-text&quot;&gt;비캡처 그룹(Non-capturing group)&lt;/code&gt;도 있는데 이는 &lt;code class=&quot;language-text&quot;&gt;(?:)&lt;/code&gt;로 표기합니다.&lt;/p&gt;
&lt;p&gt;둘다 그룹을 지정한다는 점에서는 같지만, 그룹 내의 패턴과 일치하는 부분을 &lt;code class=&quot;language-text&quot;&gt;캡처&lt;/code&gt;하느냐 하지 않느냐에 차이가 있습니다.&lt;/p&gt;
&lt;p&gt;예를 들어, 주어진 문자열을 정규 표현식으로 판별할 때, 주어진 문자열의 어떤 부분을 추출하거나 참조해야 한다면 &lt;code class=&quot;language-text&quot;&gt;캡처 그룹&lt;/code&gt;의 사용을 고려할 수 있습니다.&lt;/p&gt;
&lt;p&gt;하지만, 무엇인가를 캡처한다는 것은 추가적인 메모리를 사용한다는 의미이므로, 캡처 그룹의 사용은 &lt;code class=&quot;language-text&quot;&gt;성능 저하&lt;/code&gt;를 일으킬 수 있습니다.&lt;/p&gt;
&lt;p&gt;따라서, 정규 표현식에 일치하는 부분을 따로 캡처할 필요가 없다면 &lt;code class=&quot;language-text&quot;&gt;비캡처 그룹&lt;/code&gt;을 사용하는 것이 좋습니다. (출처: &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences&quot;&gt;MDN의 정규 표현식 - Groups and Ranges&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;앞으로 살펴 볼 패턴에는 (?:)로 표기하는 비캡처 그룹이 등장하기 때문에 간략히 소개했습니다.&lt;/p&gt;
&lt;p&gt;그러면 무시무시한 RFC2822 Email Validation을 분석해보겠습니다.&lt;/p&gt;
&lt;h4&gt;RFC2822 Email Validation 분석&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// RFC2822 Email Validation&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regExp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hyeongwookim@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hyeongwookim.dev@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true (로컬 파트 마침표있는 경우)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hyeongwookim.dev@g-mail.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true (도메인 파트 앞부분에 하이픈 있는 경우)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hyeongwookim.dev@gmail.com-&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true (도메인 파트 뒷부분에 하이픈 있는 경우)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* 정규 표현식 분석

[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+ : 알파벳 소문자 또는 숫자 또는 특수문자가 한 번 이상 반복되는 문자열이다.
  예시)
  test(&quot;a&quot;) // true
  test(&quot;4&quot;) // true
  test(&quot;!&quot;) // true
  test(&quot;a4!&quot;) // true
  test(&quot;A&quot;) // false
  test(&quot;A4!&quot;) // true
  test(&quot;&quot;) // false
  
해석: 이메일의 로컬 파트 부분이다.

(?:\.[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+)*
  (?:) : 비캡처그룹, 그룹 지정 역할을 한다.
  \.[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+ : 마침표(.) 뒤에 알파벳 소문자 또는 숫자 또는 특수문자가 한 번 이상 반복되는 문자열이다.
    예시)
    test(&quot;&quot;) // false
    test(&quot;.&quot;) // false
    test(&quot;a&quot;) // false
    test(&quot;.a4!&quot;) // true

  (?:...)* : 그룹 내부의 패턴이 0번 이상 반복된다. 

해석: 이메일 로컬파트에 마침표(.)가 포함되는 부분이고 존재하지 않을 수 있다.

@: 특수문자 @가 있어야 한다.

(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+
  [a-z0-9-]*[a-z0-9]
    : 알파벳 소문자 또는 숫자 또는 하이픈(-)이 0번 이상 반복되고
    : 그 뒤에 알파벳 소문자 또는 숫자 중 하나와 일치하는 문자열이 온다.
      예시)
      test(&quot;abc123&quot;) // true
      test(&quot;abc-123&quot;) // true
      test(&quot;-abc&quot;) // true
      test(&quot;123-&quot;) // true

  (?:...)? : 그룹 내부의 패턴이 최소 0번 최대 1 번 반복된다.

  [a-z0-9](?:...)?\.
    : 알파벳 소문자 또는 숫자로 이루어진 문자열 뒤에 그룹이 최소 0번 최대 1 번 반복되고
    : 그 뒤에 마침표(.)가 온다.

  (?:...(?:...)?\.)+
    : 그룹 내의 패턴이 한 번 이상 반복된다.

해석: 이메일의 도메인파트 부분에서 마침표(.) 앞 부분을 의미한다.

[a-z0-9](?:[a-z0-9-]*[a-z0-9])?
  [a-z0-9]
    : 알파벳 소문자 또는 숫자가 한 번 이상 반복되는 문자열뒤에 그룹 패턴이 온다.
  (?:[a-z0-9-]*[a-z0-9])?
  : 그룹패턴 안에는 알파벳 소문자 또는 숫자 또는 하이픈(-)이 0번 이상 반복되고
  : 그 뒤에 알파벳 소문자 또는 숫자 중 하나와 일치하는 문자열이 온다.
  : 이 그룹 내부의 패턴은 최소 0번 최대 1 번 반복된다.

해석: 이메일의 도메인 파트 부분에서 마침표(.) 뒷 부분을 의미한다.
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;마치며&lt;/h2&gt;
&lt;p&gt;&quot;정규 표현식 그거 그냥 검색해서 쓰면 되는 거 아닙니까?&quot;라는 말이 틀린 말은 아닙니다. 괜찮은 정규 표현식을 작성하는 것도 어렵고, 인터넷에 검색하거나 챗 GPT에게 물어보면 좋은 정규 표현식을 제공해주기 때문입니다. 하지만, 그런 정규 표현식을 가져와서 실제로 테스트해보면 제가 예상했던대로 움직이지 않는 경우가 많이 있었습니다.&lt;/p&gt;
&lt;p&gt;특히 검색 기능을 업그레이드할 때, 챗 GPT는 한글도 &lt;code class=&quot;language-text&quot;&gt;/b&lt;/code&gt;를 사용해서 경계를 설정해주면 된다고 했지만, 그것은 제가 원하던 답변이 아니었습니다. &lt;code class=&quot;language-text&quot;&gt;/b&lt;/code&gt;에 대해서 MDN에서 검색해보고 원인을 찾아낸 뒤, 챗 GPT에게 다시 질문했을 때, 챗 GPT는 제가 원하던 답을 제시해줬습니다.&lt;/p&gt;
&lt;p&gt;&apos;내가 정규 표현식을 작성할 수는 없더라도, 최소한 해석할 줄 알고, 왜 이렇게 작동하는지는 알고 있어야 정규 표현식을 제대로 사용할 수 있구나&apos;라는 것을 느꼈습니다.&lt;/p&gt;
&lt;p&gt;&apos;이게 대체 왜 이렇게 되는거야!!!&apos;라면서 머리도 많이 싸맸지만, 어려운 것이 하나씩 이해가 될 때 오는 즐거움을 정규 표현식 공부를 하면서 느낄 수 있었습니다.&lt;/p&gt;
&lt;p&gt;공부는 언제나 즐겁다는 것을 느끼며 오늘 글은 여기서 마치겠습니다.&lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;참고&lt;/strong&gt;: 정규 표현식을 학습하고 이를 활용해 프로젝트에 적용한 내용이 궁금하신 분은 이 글&lt;a href=&quot;https://ha-il.github.io/side-project/project-pixel/9-dev-regexp/&quot;&gt;([당신의 작업실] 9. 프로젝트 개발 과정 - 정규 표현식과 검색 기능 개선)&lt;/a&gt;을 참고해주시기 바랍니다.)&lt;/p&gt;
&lt;h3&gt;참고자료&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 by 이웅모 (출처: 위키북스, 2020), p. 612-625 “31장 RegExp”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;도서 구매 링크: &lt;a href=&quot;https://product.kyobobook.co.kr/detail/S000001766445&quot;&gt;https://product.kyobobook.co.kr/detail/S000001766445&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정규 표현식 by &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Regular_expressions/contributors.txt&quot;&gt;MDN contributors&lt;/a&gt;, last modified on 2023년 4월 22일&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Regular_expressions#%EC%A0%95%EA%B7%9C_%ED%91%9C%ED%98%84%EC%8B%9D_%ED%8C%A8%ED%84%B4_%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0&quot;&gt;문서 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[정렬 알고리즘 - 합병, 퀵, 기수 정렬]]></title><description><![CDATA[새로운 정렬…]]></description><link>https://ha-il.github.io/algorithm-study/9-week/</link><guid isPermaLink="false">https://ha-il.github.io/algorithm-study/9-week/</guid><pubDate>Wed, 31 May 2023 20:11:00 GMT</pubDate><content:encoded>&lt;h2&gt;새로운 정렬 3 가지&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://ha-il.github.io/algorithm-study/8-week/&quot;&gt;지난 포스트&lt;/a&gt;에서는 정렬 알고리즘 중에서도 버블 정렬, 선택 정렬, 삽입 정렬에 대해서 공부했습니다.&lt;/p&gt;
&lt;p&gt;이번에는 방금 언급한 세 가지 정렬보다 시간 복잡도 측면에서 성능이 좋은 정렬 알고리즘을 공부했습니다.&lt;/p&gt;
&lt;p&gt;이번에 공부한 정렬 알고리즘은, &lt;code class=&quot;language-text&quot;&gt;합병 정렬&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;퀵 정렬&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;기수 정렬&lt;/code&gt;입니다.&lt;/p&gt;
&lt;h3&gt;합병 정렬(Merge sort)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%95%A9%EB%B3%91_%EC%A0%95%EB%A0%AC&quot;&gt;합병 정렬&lt;/a&gt;은 비교 기반의 정렬 알고리즘으로, &lt;a href=&quot;https://ha-il.github.io/algorithm-study/5-week/&quot;&gt;분할과 정복 알고리즘&lt;/a&gt;의 일종입니다.&lt;/p&gt;
&lt;p&gt;데이터가 배열이라고 가정했을 때, 배열을 n개로 분할하는데, 분할된 배열의 길이가 1 또는 0이 될 때까지 분할을 반복합니다.&lt;/p&gt;
&lt;p&gt;최대로 분할된 배열들을 정렬 기준에 맞춰서 다시 병합하여 최종적으로 정렬된 배열을 반환하는 것이 합병 정렬입니다.&lt;/p&gt;
&lt;p&gt;분할하는 개수에 따라서 n-way 합병 정렬이라고도 불리는데, 가장 흔하게 사용되는 것은 배열을 절반으로 분할하는 &lt;code class=&quot;language-text&quot;&gt;2-way 합병 정렬&lt;/code&gt;입니다.&lt;/p&gt;
&lt;p&gt;이번 글에서는 2-way 합병 정렬을 기준으로 합병 정렬을 설명하겠습니다.&lt;/p&gt;
&lt;p&gt;우선 정의로만 봤을 때는 이해가 쉽지 않기 때문에 예시를 작성해보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예시: [4, 2, 7, 1, 5, 8, 6, 3] 를 오름차순으로 합병 정렬하는 경우
&lt;ul&gt;
&lt;li&gt;분할 1회차: [4, 2, 7, 1], [5, 8, 6, 3]&lt;/li&gt;
&lt;li&gt;분할 2회차: [4, 2], [7, 1], [5, 8], [6, 3]&lt;/li&gt;
&lt;li&gt;분할 3회차: [4], [2], [7], [1], [5], [8], [6], [3]&lt;/li&gt;
&lt;li&gt;합병 1회차: [2, 4], [1, 7], [5, 8], [3, 6]&lt;/li&gt;
&lt;li&gt;합병 2회차: [1, 2, 4, 7], [3, 5, 6, 8]&lt;/li&gt;
&lt;li&gt;합병 3회차: [1, 2, 3, 4, 5, 6, 7, 8]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아직 코드를 통해 구현해보지 않았지만, 이미 이 과정만 봐도 시간복잡도가 log n과 관련이 있을 것임을 충분히 유추할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이 과정을 이해한 상태로 합병 정렬을 자바스크립트로 구현해보겠습니다.&lt;/p&gt;
&lt;h4&gt;합병 정렬의 구현&lt;/h4&gt;
&lt;p&gt;합병 정렬은 크게 보면 분할과 합병이라는 두 가지 연산이 필요합니다.&lt;/p&gt;
&lt;p&gt;하나의 함수에 다 작성할 수도 있겠지만, 헬퍼 함수를 따로 정의해서 역할을 분담하면 코드가 더 깔끔해질 것 같습니다.&lt;/p&gt;
&lt;p&gt;합병에 대한 연산을 &lt;code class=&quot;language-text&quot;&gt;merge&lt;/code&gt;라는 헬퍼 함수를 정의하여 구현하고, 헬퍼 함수를 사용해서 합병 정렬을 구현할 &lt;code class=&quot;language-text&quot;&gt;mergeSort&lt;/code&gt;라는 함수를 정의해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;merge&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 변수 results를 선언하고 빈 배열을 할당합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; results &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 두 배열을 각각 순회할 변수 i와 j를 선언하고 0을 할당합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;token comment&quot;&gt;// i 또는 j가 배열 끝에 도달할 때까지 실행할 반복문을 작성합니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 이유: 두 배열 사이의 요소 값을 비교하는 것이기 때문에, &lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//      한 쪽 배열이 끝에 도달했다면 반복문을 시행할 이유가 없기 때문입니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; arr1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; arr2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 첫 번째 배열의 값이 두 번째 배열의 값보다 작으면 첫 번째 배열의 값을 results에 push하고 i를 1 증가시킵니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; arr1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      results&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 첫 번째 배열의 값이 두 번째 배열의 값보다 크면 두 번째 배열의 값을 results에 push하고 j를 1 증가시킵니다.&lt;/span&gt;
      results&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 한 배열을 모두 순회했다면 다른 배열의 나머지 값을 모두 results에 push합니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 이유: merge 함수는 이미 정렬이 된 두 배열을 인수로 받기 때문에&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//      순회를 마치고 남은 배열의 요소를 push해도 정렬이 깨지지 않습니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; arr1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    results&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; arr2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    results&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; results
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;mergeSort&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 비어 있거나 요소가 하나만 있는 배열이 나올 때까지 배열을 반으로 나눕니다.(재귀의 종료조건 입니다.)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr
  &lt;span class=&quot;token comment&quot;&gt;// 배열의 중간값을 구합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; mid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 중간 값을 기준으로 배열을 왼쪽과 오른쪽으로 나눕니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 나눈 배열에 대해서 mergeSort를 재귀 호출합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; left &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mid&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; right &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mergeSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mid&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 배열의 왼쪽과 오른쪽 부분을 병합하여 반환합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;합병 정렬의 시간 복잡도&lt;/h4&gt;
&lt;p&gt;합병 정렬의 시간 복잡도를 알아보기 위해, 합병 정렬이 어떻게 이뤄지는지 예시를 다시 한 번 보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예시: [4, 2, 7, 1, 5, 8, 6, 3] 를 오름차순으로 합병 정렬하는 경우
&lt;ul&gt;
&lt;li&gt;분할 1회차: [4, 2, 7, 1], [5, 8, 6, 3]&lt;/li&gt;
&lt;li&gt;분할 2회차: [4, 2], [7, 1], [5, 8], [6, 3]&lt;/li&gt;
&lt;li&gt;분할 3회차: [4], [2], [7], [1], [5], [8], [6], [3]&lt;/li&gt;
&lt;li&gt;합병 1회차: [2, 4], [1, 7], [5, 8], [3, 6]&lt;/li&gt;
&lt;li&gt;합병 2회차: [1, 2, 4, 7], [3, 5, 6, 8]&lt;/li&gt;
&lt;li&gt;합병 3회차: [1, 2, 3, 4, 5, 6, 7, 8]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 예시를 보면 알 수 있듯이 길이가 8인 배열에 대해서 3번의 분할이 이뤄지고 있으므로, 원소의 갯수 n에 대해서 log n의 비율로 연산이 이뤄지고 있습니다.&lt;/p&gt;
&lt;p&gt;하지만 여기서 끝이 아니라, 분할한 배열들을 합병하는 과정에서 각 배열의 요소를 비교하기 위해 각 배열을 순회하는데, 이 때 배열에 길이 n에 따라서 연산은 n배 증가합니다.&lt;/p&gt;
&lt;p&gt;따라서 합병 정렬은 O(n log n)의 시간 복잡도를 가집니다.&lt;/p&gt;
&lt;p&gt;이미 정렬된 배열이라고 해도, 분할하고 합병하는 과정은 변함이 없기 때문에&lt;/p&gt;
&lt;p&gt;합병 정렬은 최상, 최악, 평균 모든 경우에서 O(n log n)의 시간 복잡도를 가집니다.&lt;/p&gt;
&lt;p&gt;합병 정렬은 배열의 길이가 0 또는 1이 될 때까지 분할하기 때문에, 배열의 길이에 따라서 분할된 후의 배열의 갯수도 많아질 것입니다.&lt;/p&gt;
&lt;p&gt;따라서 공간 복잡도는 O(n)으로 볼 수 있습니다.&lt;/p&gt;
&lt;h3&gt;퀵 정렬(Quick sort)&lt;/h3&gt;
&lt;p&gt;합병 정렬과 마찬가지로 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%80%B5_%EC%A0%95%EB%A0%AC&quot;&gt;퀵 정렬&lt;/a&gt;또한 비교 기반의 정렬 알고리즘으로, &lt;a href=&quot;https://ha-il.github.io/algorithm-study/5-week/&quot;&gt;분할과 정복 알고리즘&lt;/a&gt;의 일종입니다.&lt;/p&gt;
&lt;p&gt;정렬하고자하는 데이터가 배열이라고 할 때, 퀵 정렬은 배열의 원소 하나를 고르는데, 이때 고른 원소를 흔히 &lt;code class=&quot;language-text&quot;&gt;피벗(pivot: 중심점)&lt;/code&gt;이라고 부릅니다.&lt;/p&gt;
&lt;p&gt;배열의 모든 원소는 피벗이 될 수 있습니다.&lt;/p&gt;
&lt;p&gt;퀵 정렬은 피벗을 기준으로 피벗 앞에는 피벗보다 값이 작은 모든 원소들을 배치하고, 피벗 뒤에는 피벗보다 값이 큰 모든 원소들을 배치하여, 피벗을 기준으로 배열을 둘로 나눕니다.&lt;/p&gt;
&lt;p&gt;퀵 정렬 또한 정의만으로 이해하기는 어렵기 때문에 예시를 통해 이해해보겠습니다.&lt;/p&gt;
&lt;p&gt;참고로 아래 예시에서는 배열의 첫번째 원소를 피벗으로 설정했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예시: [4, 2, 7, 1, 5, 8, 6, 3] 를 오름차순으로 퀵 정렬하는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- 0회차: [4(피벗), 2, 7, 1, 5, 8, 6, 3] 

- 1회차:              4
        2(피벗), 1, 3   5(피벗), 8, 6, 7

- 2회차:              4
            2             5
          1   3             8(피벗), 6, 7

- 3회차:              4
            2             5
          1   3                        8             
                            6(피벗), 7

- 4회차:              4
              2             5
            1   3                      8             
                                6
                                    7

- 최종: [1, 2, 3, 4, 5, 6, 7, 8]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;퀵 정렬의 구현&lt;/h4&gt;
&lt;p&gt;퀵 정렬에도 여러가지 연산이 들어가기 때문에, 이번에도 헬퍼 함수를 작성해서 역할을 분담해보겠습니다.&lt;/p&gt;
&lt;p&gt;값의 교체가 일어나야하기 때문에 &lt;code class=&quot;language-text&quot;&gt;swap&lt;/code&gt;이라는 함수를 따로 정의했고,&lt;/p&gt;
&lt;p&gt;매 연산마다 피벗이 바뀌기 때문에 &lt;code class=&quot;language-text&quot;&gt;pivot&lt;/code&gt;이라는 함수를 정의하여 피벗 값을 구합니다.&lt;/p&gt;
&lt;p&gt;마지막으로 &lt;code class=&quot;language-text&quot;&gt;quickSort&lt;/code&gt; 함수에 퀵 정렬을 구현해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;swap&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// arr의 start를 피벗으로 설정합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; pivot &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;// swapIdx라는 변수를 선언하고 현재 피벗 인덱스를 할당합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; swapIdx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; start

  &lt;span class=&quot;token comment&quot;&gt;// 배열의 두번째 요소부터 마지막 요소까지 반복합니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 이유: 첫번째 요소는 자기 자신이기 때문에 굳이 비교할 필요가 없습니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//피벗이 현재 요소보다 크면 피벗 인덱스 변수를 증가시킨 다음 현재 요소를 피벗 인덱스에 있는 요소로 바꿉니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pivot &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      swapIdx&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; swapIdx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//시작 요소(즉, 피벗)를 피벗 인덱스와 바꿉니다.&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; swapIdx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;//피벗 인덱스 반환&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; swapIdx
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;quickSort&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 요소가 2개 미만인 하위 배열인 경우 재귀함수를 멈춥니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 배열에서 피벗 헬퍼를 호출하고, 피벗 인덱스를 반환받습니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; pivotIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 피벗 인덱스의 왼쪽에 있는 하위 배열에서 피벗 헬퍼를 재귀적으로 호출합니다.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pivotIndex &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 피벗 인덱스의 오른쪽에 있는 하위 배열에서 피벗 헬퍼를 재귀적으로 호출합니다.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pivotIndex &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;퀵 정렬의 시간 복잡도&lt;/h4&gt;
&lt;p&gt;퀵 정렬의 시간 복잡도는 아래와 같습니다.&lt;/p&gt;
&lt;p&gt;최상: O(n log n)
평균: O(n log n)
최악: O(n²)&lt;/p&gt;
&lt;p&gt;먼저 최상과 평균적인 경우를 살펴보겠습니다. 왜 O(n log n)일까요?&lt;/p&gt;
&lt;p&gt;일단 퀵 정렬의 경우 배열의 길이에 따라서 분할 연산이 log n의 비율로 증가합니다.&lt;/p&gt;
&lt;p&gt;피벗과 각 요소를 비교할 경우 배열의 길이에 따라서 n만큼 연산이 증가합니다.&lt;/p&gt;
&lt;p&gt;따라서, O(n log n)의 시간복잡도를 가지게 됩니다.&lt;/p&gt;
&lt;p&gt;그렇다면 최악의 경우는 대체 언제일까요?&lt;/p&gt;
&lt;p&gt;바로 이미 정렬된 배열에 대해서 첫 번째 요소를 피벗으로 삼아 퀵 정렬을 하는 경우입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정렬된 배열에서 첫 번째 요소를 피벗으로 삼는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- 1회차: [1(피벗), 2, 3, 4, 5, 6, 7, 8]

- 2회차: 1 
          2(피벗), 3, 4, 5, 6, 7, 8
- 3회차: 1
          2
            3(피벗), 4, 5, 6, 7, 8
- ...          &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;분할 알고리즘은 O(log n)의 시간 복잡도를 가질 때 효율이 좋은데, 정렬된 배열에서 첫 번째 요소를 피벗으로 삼으면,&lt;/p&gt;
&lt;p&gt;배열의 길이에 따라서 분할 연산의 갯수가 n배 증가합니다.&lt;/p&gt;
&lt;p&gt;분할 연산과 비교 연산이 같이 이뤄질 경우 O(n²)이라는 시간 복잡도가 나오게 됩니다.&lt;/p&gt;
&lt;p&gt;공간 복잡도의 O(log n)입니다.&lt;/p&gt;
&lt;p&gt;합병 정렬의 경우 분할한 배열들이 공간을 차지하는 반면, 퀵 정열의 경우 피벗을 기준으로 분할 연산을 시행하지만 그 요소들을 따로 배열에 저장하지 않기 때문에 O(log n)이라는 공간 복잡도를 갖게 됩니다.&lt;/p&gt;
&lt;h3&gt;기수 정렬(Radix sort)&lt;/h3&gt;
&lt;p&gt;여태까지 살펴본 합병 정렬과 퀵 정렬은 비교 기반의 정렬을 사용했습니다.&lt;/p&gt;
&lt;p&gt;반면 기수 정렬은 비교를 하지 않고 정렬을 수행하는 알고리즘입니다.&lt;/p&gt;
&lt;p&gt;먼저, &lt;a href=&quot;https://ko.dict.naver.com/#/entry/koko/ceb6c1de8db040249ec4992093001f98&quot;&gt;기수(基數)&lt;/a&gt;란 뭘까요?&lt;/p&gt;
&lt;p&gt;네이버 국어 사전에 따르면 &apos;기수란 수를 나타내는 데 기초가 되는 수. 십진법에서는 0에서 9까지의 &lt;code class=&quot;language-text&quot;&gt;정수&lt;/code&gt;를 이른다.&apos;라고 합니다.&lt;/p&gt;
&lt;p&gt;그렇다면 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EA%B8%B0%EC%88%98_%EC%A0%95%EB%A0%AC&quot;&gt;기수 정렬&lt;/a&gt;이란 0~9까지의 정수를 기준으로 데이터를 정렬하는 알고리즘으로 설명할 수 있을 것 같습니다.&lt;/p&gt;
&lt;p&gt;역시 예시를 살펴보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;예시: [10, 24, 98, 567, 234, 9999, 2, 77]를 오름차순으로 기수 정렬하는 경우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1회차: 각 요소의 &lt;code class=&quot;language-text&quot;&gt;첫번째 자리(1의 자리)&lt;/code&gt; 숫자를 기준으로 정렬합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정렬 전: [10, 24, 98, 567, 234, 9999, 2, 77]&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;0&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;7&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;8&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;9&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;code class=&quot;language-text&quot;&gt;4&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;56&lt;code class=&quot;language-text&quot;&gt;7&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;9&lt;code class=&quot;language-text&quot;&gt;8&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;999&lt;code class=&quot;language-text&quot;&gt;9&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;23&lt;code class=&quot;language-text&quot;&gt;4&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;code class=&quot;language-text&quot;&gt;7&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;정렬 후: [10, 2, 24, 234, 567, 77, 98, 9999]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2회차: 각 요소의 &lt;code class=&quot;language-text&quot;&gt;두번째 자리(10의 자리)&lt;/code&gt; 숫자를 기준으로 정렬합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정렬 전: [10, 2, 24, 234, 567, 77, 98, 9999]&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;0&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;7&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;8&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;9&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt;4&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;code class=&quot;language-text&quot;&gt;3&lt;/code&gt;4&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;code class=&quot;language-text&quot;&gt;6&lt;/code&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;7&lt;/code&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;9&lt;/code&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;99&lt;code class=&quot;language-text&quot;&gt;9&lt;/code&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;정렬 후: [2, 10, 24, 234, 567, 77, 98, 9999]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3회차: 각 요소의 &lt;code class=&quot;language-text&quot;&gt;세번째 자리(100의 자리)&lt;/code&gt; 숫자를 기준으로 정렬합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정렬 전: [2, 10, 24, 234, 567, 77, 98, 9999]&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;0&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;7&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;8&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;9&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt;34&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;5&lt;/code&gt;67&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;9&lt;code class=&quot;language-text&quot;&gt;9&lt;/code&gt;99&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;24&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;77&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;98&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;정렬 후: [2, 10, 24, 77, 98, 234, 567, 9999]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4회차: 각 요소의 &lt;code class=&quot;language-text&quot;&gt;네번째 자리(1000의 자리)&lt;/code&gt; 숫자를 기준으로 정렬합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정렬 전: [2, 10, 24, 77, 98, 234, 567, 9999]&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;0&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;1&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;4&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;5&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;6&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;7&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;8&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;9&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;-&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;9&lt;/code&gt;999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;24&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;77&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;98&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;234&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;567&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;정렬 후: [2, 10, 24, 77, 98, 234, 567, 9999]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예시에서 각 요소들을 기수(0~9까지의 정수)를 기준으로 분류했는데, 이때 분류를 위해 임시로 사용되는 배열을 &lt;code class=&quot;language-text&quot;&gt;버킷&lt;/code&gt;이라고 부릅니다.&lt;/p&gt;
&lt;p&gt;예시를 봤을 때, 기수 정렬에서 필요한 알고리즘에는 어떤 것들이 있을까요?&lt;/p&gt;
&lt;p&gt;먼저 각 요소의 &lt;code class=&quot;language-text&quot;&gt;자릿수에 따라 숫자를 구할 수 있는&lt;/code&gt; 알고리즘이 필요할 것 같습니다.&lt;/p&gt;
&lt;p&gt;그리고, 예시에서는 9999가 네 자리 숫자로 가장 큰 자릿수를 가지고 있고, 9999의 자릿수를 기준으로 회차가 반복되고 있습니다.&lt;/p&gt;
&lt;p&gt;따라서, &lt;code class=&quot;language-text&quot;&gt;해당 숫자의 자릿수를 구할 수 있는&lt;/code&gt; 알고리즘과, &lt;code class=&quot;language-text&quot;&gt;배열에서 요소 중 최대 자릿수를 구할 수 있는&lt;/code&gt; 알고리즘도 필요할 것 같습니다.&lt;/p&gt;
&lt;h4&gt;기수 정렬의 구현&lt;/h4&gt;
&lt;p&gt;위에서 언급했던 알고리즘들을 각각 &lt;code class=&quot;language-text&quot;&gt;getDigit&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;digitCount&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;mostDigits&lt;/code&gt;라는 헬퍼 함수로 정의하여 기수 정렬을 구현한 &lt;code class=&quot;language-text&quot;&gt;radixSort&lt;/code&gt;라는 함수를 정의해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 입력한 자릿수의 숫자를 알아내기 위한 함수 (예: 7235, 1의 자리 =&gt; 5, 10의 자리 =&gt; 3)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getDigit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 하나의 숫자에 대한 자릿수를 계산하는 함수 (예: 314 =&gt; 3자리)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;digitCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 숫자 목록의 숫자 중에서 가장 큰 자릿수를 구하는 함수 (예: [1, 22, 333, 4444, 55555] =&gt; 5자리)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mostDigits&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; maxDigits &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    maxDigits &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;maxDigits&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;digitCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; maxDigits
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;radixSort&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 가장 큰 숫자의 자릿수가 몇 자리인지 알아냅니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; maxDigitCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mostDigits&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nums&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// k = 0에서 이 최대 자릿수까지 반복합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; maxDigitCount&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; k&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 루프의 각 반복에 대해 각 숫자(0~9)에 대해 버킷을 생성합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; digitBuckets &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 각 숫자를 k번째 숫자를 기준으로 해당 버킷에 배치합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 기존 배열을 0부터 시작하여 9까지 버킷의 값으로 바꿉니다.&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; digit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getDigit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      digitBuckets&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;digit&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    nums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;digitBuckets&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; nums
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;기수 정렬의 시간 복잡도&lt;/h4&gt;
&lt;p&gt;기수 정렬의 시간 복잡도는 최상, 최악, 평균 모두 O(nk)입니다.&lt;/p&gt;
&lt;p&gt;여기서 n은 정렬할 정수의 개수, k는 수의 길이(자릿수)입니다.&lt;/p&gt;
&lt;p&gt;정수의 개수에 따라서 연산도 늘어나고, 최대 자릿수를 기준으로 또 다시 반복하기 때문에 O(nk) 시간복잡도를 갖습니다.&lt;/p&gt;
&lt;p&gt;n과 k가 곱해지기 때문에, k의 값이 너무 길어지는 경우에는 성능이 좋지 않습니다.&lt;/p&gt;
&lt;p&gt;하지만 단순하게 생각해봤을 때, 0~99999까지 10만개의 요소를 정렬한다고 해도 k의 값은 겨우 5를 차지합니다.&lt;/p&gt;
&lt;p&gt;적당한 도메인에 최적화된 기수 정렬은 성능이 매우 좋을 수 있습니다.&lt;/p&gt;
&lt;p&gt;공간 복잡도는 O(n + k)입니다.&lt;/p&gt;
&lt;p&gt;각 요소들과 각 기수의 버킷에 따라 공간 복잡도가 상승하기 때문입니다.&lt;/p&gt;
&lt;h3&gt;프로그래머스 문제 적용&lt;/h3&gt;
&lt;p&gt;정렬 알고리즘을 배웠으니 프로그래머스에서 문제를 하나 가져와서 풀어보려고 합니다.&lt;/p&gt;
&lt;p&gt;이번에 가져온 문제는 프로그래머스 코딩테스트 연습 Lv.2 문제 &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/42746&quot;&gt;가장 큰 수&lt;/a&gt;입니다.&lt;/p&gt;
&lt;p&gt;해당 문제는 프로그래머스 사이트의 코딩테스트 고득점 Kit의 &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/parts/12198&quot;&gt;정렬&lt;/a&gt; 항목에 있는 문제입니다.&lt;/p&gt;
&lt;p&gt;저는 이 문제를 기수 정렬로 풀 수 있을 거라 생각했는데, 왜 그렇게 생각했는지 문제를 같이 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 알아내 주세요.

예를 들어, 주어진 정수가 [6, 10, 2]라면 [6102, 6210, 1062, 1026, 2610, 2106]를 만들 수 있고, 

이중 가장 큰 수는 6210입니다.

0 또는 양의 정수가 담긴 배열 numbers가 매개변수로 주어질 때, 

순서를 재배치하여 만들 수 있는 가장 큰 수를 문자열로 바꾸어 return 하도록 solution 함수를 작성해주세요.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 문제는 주어진 배열을 단순히 내림차순으로 정렬한 다음 문자열로 합치면 되는 문제는 아닙니다.&lt;/p&gt;
&lt;p&gt;예를 들어 [3, 30, 34, 5, 9] 라는 배열을 내림차순 정렬한 다음 문자열로 합치면 &quot;3430953&quot;이 될텐데,&lt;/p&gt;
&lt;p&gt;&quot;3430953&quot;는 해당 배열에서 만들 수 있는 가장 큰 수가 아닙니다.&lt;/p&gt;
&lt;p&gt;해당 배열에서 만들 수 있는 가장 큰 수는 [9, 5, 34, 30, 3] 으로 정렬한 다음 문자열로 합친 &quot;9534330&quot; 입니다.&lt;/p&gt;
&lt;p&gt;[9, 5, 34, 30, 3]으로 정렬된 배열을 보니 저는 이런 아이디어가 떠올랐습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;해당 숫자의 맨 앞의 자릿수를 기준으로 버킷을 나누고&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[3, 30, 34, 5, 9] =&gt; [[9], [5], [3, 30, 34]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;버킷의 길이가 2 이상이라면 다음 자릿수를 기준으로 또 다시 버킷을 나눈다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[[9], [5], [3, 30, 34]] =&gt; [[9], [5], [[34], [3], [30]]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;더 이상 나눌 버킷이 없다면 배열을 합친다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[[9], [5], [[34], [3], [30]]] =&gt; [[9], [5], [34, 3, 30]] =&gt; [9, 5, 34, 3, 30]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;결론부터 말하면 제 아이디어로는 &lt;code class=&quot;language-text&quot;&gt;코딩 테스트를 통과할 수 없었습니다.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;먼저, 이 아이디어를 구현했던 코드를 먼저 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 하나의 숫자에 대한 자릿수를 계산하는 함수 (예: 314 =&gt; 3자리)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;digitCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 입력한 자릿수의 숫자를 알아내기 위한 함수 (예: 7235, 1의 자리 =&gt; 5, 10의 자리 =&gt; 3)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getDigit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 기수 정렬 알고리즘&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;radixSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; digitBuckets &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; maxDigit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;digitCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; k 
            &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; currentDigit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; maxDigit &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; maxDigit &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; maxDigit &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; digit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getDigit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; currentDigit&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            digitBuckets&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; digit&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; digitBuckets
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 버킷의 길이가 2 이상인 배열에 대해서 기수 정렬을 재귀적으로 시행할 함수&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getSortedArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;bucket&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bucket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; inner &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;radixSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bucket&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getSortedArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inner&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;solution&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; answer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;// 1차적으로 기수 정렬을 합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; digitBuckets &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;radixSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;// 1차 기수 정렬된 배열의 버킷 중 길이가 2 이상인 버킷에 대해서 기수 정렬을 재귀적으로 시행합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; recursionSortedArr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getSortedArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;digitBuckets&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;// 반환된 배열을 평탄화합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; flatteningArr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;recursionSortedArr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;// 평탄화된 배열을 문자열로 합쳐서 반환합니다.&lt;/span&gt;
    flatteningArr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        answer &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; answer
    
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기본 예시로 주어진 [6, 10, 2]와 [3, 30, 34, 5, 9]는 통과할 수 있었지만,&lt;/p&gt;
&lt;p&gt;제출 후에 이뤄진 정확성 테스트 15개 중 5개만 통과하고 나머지 10개는 런타임 에러가 발생했습니다.&lt;/p&gt;
&lt;p&gt;생각해보면 당연합니다.&lt;/p&gt;
&lt;p&gt;배열의 버킷을 10개로 나누는데, 길이에 따른 제한을 뒀다고 해도 각 버킷마다 또 다시 10개로 나누고, 버킷이 최대로 나눠질 때까지 이를 재귀적으로 반복한다면, 정말 많은 연산이 일어날 것입니다.&lt;/p&gt;
&lt;p&gt;다양한 방법으로 4시간을 넘게 고민해봤지만, 현재 제 능력으로는 기수 정렬을 활용해서 풀 수 없다고 판단했습니다.&lt;/p&gt;
&lt;p&gt;일단 다른 방법으로 풀었고, 해당 문제를 푼 다른 사람의 풀이를 쭉 훑어보니, &apos;패터쓴&apos;이라는 닉네임을 사용하신 분께서 기수 정렬 아이디어로 문제를 해결하신 것을 보게되었습니다.&lt;/p&gt;
&lt;p&gt;그래서 이번에는 &apos;패터쓴&apos;님이 작성한 풀이를 분석하는 것으로 상세 풀이를 대체하려고 합니다.&lt;/p&gt;
&lt;p&gt;참고로, 코드 원문의 경우 변수명이 단일 알파벳으로 이뤄져 있었는데, 저 스스로 이해하기 위해 변수명을 수정했습니다.&lt;/p&gt;
&lt;p&gt;&apos;패터쓴&apos;님의 코드 원문이 궁금하신 분들은 &apos;프로그래머스 코딩테스트 연습 Lv.2 문제 &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/42746&quot;&gt;가장 큰 수&lt;/a&gt;&apos;에서 &apos;다른 사람의 풀이&apos;를 확인해보시면 되겠습니다.&lt;/p&gt;
&lt;h4&gt;문제 해결 접근법과 상세 풀이&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* 
- 인풋
  - numbers: 1~100,000 사이의 길이를 갖는 배열로, 각 원소는 0~1,000 사이의 값을 갖는다.
*/&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;// 기수 정렬할 요소를 담을 배열 buckets를 선언하고 빈 배열을 할당합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; buckets &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; number &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// number를 문자열로 변환합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// number의 최대 자릿수를 체크하기 위해 길이를 변수로 할당합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length

    &lt;span class=&quot;token comment&quot;&gt;// number가 buckets에 들어갈 위치가 될 변수 index를 선언하고 빈 문자열을 할당합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// str의 1의 자리 숫자부터 4의 자리까지의 숫자까지 순회하면서 각 자릿수의 숫자로 인덱스를 만듭니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 예를 들어 str이 &quot;1000&quot;이라면, 인덱스는 &quot;1000&quot;이 됩니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 만약 str이 1의 자리 숫자라면 1의 자리 숫자만으로 인덱스를 채웁니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 예를 들어 str이 &quot;3&quot;이라면, 인덱스는 &quot;3333&quot;이 됩니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; digit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; digit &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; digit&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; digit&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        index &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;digit&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        index &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;digit &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; length&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// [3, 30, 34, 5, 9]의 각 원소들은 아래와 같은 index를 가집니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 3: 3333&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 30: 3030&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 34: 3434&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 5: 5555&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 9: 9999&lt;/span&gt;
    

    &lt;span class=&quot;token comment&quot;&gt;// 인덱스가 큰 값이 배열의 앞으로 오도록 정렬합니다.&lt;/span&gt;
    index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9999&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; index

    &lt;span class=&quot;token comment&quot;&gt;// 해당 인덱스 값을 활용하여 buckets에 str을 추가합니다.&lt;/span&gt;
    buckets&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; buckets&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; buckets&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; str
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 현재 buckets의 모습은 아래와 같습니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;/*
  [ &apos;9&apos;, &amp;lt;4443 empty items&gt;,
    &apos;5&apos;, &amp;lt;2120 empty items&gt;,
    &apos;34&apos;, &amp;lt;100 empty items&gt;,
    &apos;3&apos;, &amp;lt;302 empty items&gt;,
    &apos;30&apos;
  ]
  */&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// buckets의 모든 요소를 연결해 하나의 문자열로 만듭니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; answer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; buckets&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// numbers의 원소가 2개 이상의 0으로만 이뤄져 있는 예외 사항을 처리합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; answer&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; answer
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;회고&lt;/h3&gt;
&lt;p&gt;똑같이 기수 정렬을 배웠는데, 저는 왜 이런 아이디어를 떠올리지 못 했을까요?&lt;/p&gt;
&lt;p&gt;제 생각에는 제 자신이 강의에서 배운 내용에서 벗어나지 못 했기 때문이라고 생각합니다.&lt;/p&gt;
&lt;p&gt;강의에서 알려준 절차를 그대로 적용했지만 문제가 풀리지 않을 때, 거기에서 조금이라도 다른 방식으로 생각해보는 것이 현재로서는 어려운 것 같습니다.&lt;/p&gt;
&lt;p&gt;&apos;이런 쪽에 재능이 없는 건가?&apos;라는 살짝 우울한 생각이 들 때 쯤, 이런 생각을 예전에도 했던 것 같다는 생각이 들었는데,&lt;/p&gt;
&lt;p&gt;그 때가 바로 클론 코딩 강의 수강 후에 나만의 프로젝트를 만들 때였던 것 같습니다.&lt;/p&gt;
&lt;p&gt;클론 코딩 강의를 듣고 따라 만들 때는 아무런 문제가 없었지만, 완전히 다른 프로젝트를 만들기 시작하니 정말 수많은 에러를 만났습니다.&lt;/p&gt;
&lt;p&gt;&apos;나는 그 때 어떻게 했더라?&apos;라고 생각해보니, 구글과 MDN 검색, 모딥다 찾아보기 등 여러 레퍼런스를 참고하며 에러를 해결했고, 그 과정 중에서 많이 배웠던 기억이 있습니다.&lt;/p&gt;
&lt;p&gt;그러면 코딩테스트도 마찬가지 아닐까 싶습니다.&lt;/p&gt;
&lt;p&gt;지금은 배운 알고리즘과 자료구조도 겨우 적용해보면서 문제를 풀고 있지만, 도저히 못 풀겠을 때는 다른 사람의 풀이도 참고하고, 혹시 문제를 풀었더라도 더 좋은 방법은 없을지 검색해가면서 배우면 되지 않을까요?&lt;/p&gt;
&lt;p&gt;스스로 풀지 못 한 것은 분명 실패지만, 그 실패가 성장을 위한 발판이라 생각하며 오늘은 여기서 마치겠습니다.&lt;/p&gt;
&lt;p&gt;감사합니다.&lt;/p&gt;
&lt;h3&gt;참고자료&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로그래머스 코딩 테스트 연습 - 가장 큰 수&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;문제 링크: &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/42746&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/42746&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best JavaScript Data Structures &amp;#x26; Algorithms Course by Udemy, last updated January 2022, accessed April 5, 2023&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;강의 링크: &lt;a href=&quot;https://www.udemy.com/course/best-javascript-data-structures/&quot;&gt;https://www.udemy.com/course/best-javascript-data-structures/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[정렬 알고리즘 - 버블, 선택, 삽입 정렬]]></title><description><![CDATA[…]]></description><link>https://ha-il.github.io/algorithm-study/8-week/</link><guid isPermaLink="false">https://ha-il.github.io/algorithm-study/8-week/</guid><pubDate>Wed, 24 May 2023 09:50:00 GMT</pubDate><content:encoded>&lt;h2&gt;정렬 알고리즘&lt;/h2&gt;
&lt;p&gt;오늘은 정렬 알고리즘에 대해서 공부했습니다.&lt;/p&gt;
&lt;p&gt;먼저 정렬이란 뭘까요?&lt;/p&gt;
&lt;p&gt;정렬이란 데이터를 특정한 조건에 따라 일정한 순서가 되도록 다시 배열하는 일을 말합니다.&lt;/p&gt;
&lt;p&gt;정렬 알고리즘에는 다양한 종류가 있습니다.&lt;/p&gt;
&lt;p&gt;저마다 용도가 다르고 상황에 따른 장단점도 존재하기 때문에, 다양한 정렬 알고리즘에 대해서 공부할 필요가 있습니다.&lt;/p&gt;
&lt;p&gt;프로그래밍 언어마다 정렬을 위한 메서드가 존재하지만, 그 메서드가 어떤 정렬 알고리즘으로 구현되었는지 알고 있고, 그 알고리즘의 용도와 장단점을 알고 있다면, 그 메서드를 사용하기 적합한 상황을 이해하고 사용할 수 있을 것입니다.&lt;/p&gt;
&lt;p&gt;따라서 이번 글에서는 정렬 알고리즘 중에서도 버블 정렬, 선택 정렬, 삽입 정렬에 대해서 공부한 내용을 소개하고, 이 세 가지 정렬을 비교해보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;본격적으로 정렬에 대해서 알아보기 전에 미리 말씀을 드리자면, 예시로 사용할 대부분의 데이터는 요소로 Number 타입을 갖는 배열이고, 해당 배열을 오름차순으로 정렬한다고 가정했습니다.&lt;/p&gt;
&lt;h3&gt;버블 정렬(Bubble sort)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%B2%84%EB%B8%94_%EC%A0%95%EB%A0%AC&quot;&gt;버블 정렬&lt;/a&gt;은 배열의 두 요소를 선택하고, 두 요소가 정렬되어있다면 놔두고 아니라면 두 요소의 값을 교체하는 방식으로 진행됩니다.&lt;/p&gt;
&lt;p&gt;원소의 이동이 마치 기포가 수면 위로 올라오는 것처럼 보여서 버블 정렬이라 부른다고 합니다.&lt;/p&gt;
&lt;p&gt;배열 [ 37, 45, 29, 8 ]이 있다고 가정했을 때, 버블 정렬은 아래와 같은 방식으로 작동합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1-1회차: [ &lt;code class=&quot;language-text&quot;&gt;37, 45&lt;/code&gt;, 29, 8 ] =&gt; 변화 없음&lt;/li&gt;
&lt;li&gt;1-2회차: [ 37, &lt;code class=&quot;language-text&quot;&gt;45, 29&lt;/code&gt;, 8 ] =&gt; 45와 29의 위치를 바꿈&lt;/li&gt;
&lt;li&gt;1-3회차: [ 37, 29, &lt;code class=&quot;language-text&quot;&gt;45, 8&lt;/code&gt; ] =&gt; 45와 8의 위치를 바꿈&lt;/li&gt;
&lt;li&gt;2-1회차: [ &lt;code class=&quot;language-text&quot;&gt;37, 29&lt;/code&gt;, 8, 45 ] =&gt; 37과 29의 위치를 바꿈&lt;/li&gt;
&lt;li&gt;2-2회차: [ 29, &lt;code class=&quot;language-text&quot;&gt;37, 8&lt;/code&gt;, 45 ] =&gt; 37과 8의 위치를 바꿈&lt;/li&gt;
&lt;li&gt;3-1회차: [ &lt;code class=&quot;language-text&quot;&gt;29, 8&lt;/code&gt;, 37, 45 ] =&gt; 29와 8의 위치를 바꿈&lt;/li&gt;
&lt;li&gt;정렬 완료: [&lt;code class=&quot;language-text&quot;&gt;8, 29, 37, 45&lt;/code&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;버블 정렬의 구현&lt;/h4&gt;
&lt;p&gt;버블 정렬은 아래와 같이 자바스크립트 코드로 구현할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;bubbleSort&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 변수 i를 사용하여 배열의 끝부터 시작까지 반복합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 변수 j를 사용하여 내부 반복문을 시작하여 i-1까지 반복합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 만약 arr[j] 가 arr[j+1]보다 크다면 두 값을 바꿉니다.&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 만약 arr[j] 가 arr[j+1]보다 크다면 두 값을 바꿉니다.&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 정렬된 배열을 반환합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;bubbleSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [ 8, 29, 37, 45 ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 형태는 [37, 45, 29, 8]과 같이 처음부터 끝까지 정렬이 필요한 경우에는 효율적일지 몰라도,&lt;/p&gt;
&lt;p&gt;[1, 2, 4, 3, 5]와 같이 이미 어느정도 정렬이 이루어진 배열에 대해서는 비효율적입니다.&lt;/p&gt;
&lt;p&gt;위와 같은 형태로 [1, 2, 4, 3, 5]라는 배열을 버블 정렬할 경우,&lt;/p&gt;
&lt;p&gt;4와 3의 위치를 바꾸고 나서 배열의 정렬이 완료되었음에도, 반복문이 끝날 때까지 계속 정렬합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1-1회차: [ &lt;code class=&quot;language-text&quot;&gt;1, 2&lt;/code&gt;, 4, 3, 5 ]&lt;/li&gt;
&lt;li&gt;1-2회차: [ 1, &lt;code class=&quot;language-text&quot;&gt;2, 4&lt;/code&gt;, 3, 5 ]&lt;/li&gt;
&lt;li&gt;1-3회차: [ 1, 2, &lt;code class=&quot;language-text&quot;&gt;4, 3&lt;/code&gt;, 5 ]&lt;/li&gt;
&lt;li&gt;1-4회차: [ 1, 2, 3, &lt;code class=&quot;language-text&quot;&gt;4, 5&lt;/code&gt; ] (정렬은 이미 완료 되었으나...)&lt;/li&gt;
&lt;li&gt;2-1회차: [ &lt;code class=&quot;language-text&quot;&gt;1, 2&lt;/code&gt;, 3, 4, 5 ]&lt;/li&gt;
&lt;li&gt;2-2회차: [ 1, &lt;code class=&quot;language-text&quot;&gt;2, 3&lt;/code&gt;, 4, 5 ]&lt;/li&gt;
&lt;li&gt;2-3회차: [ 1, 2, &lt;code class=&quot;language-text&quot;&gt;3, 4&lt;/code&gt;, 5 ]&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;li&gt;4-1회차: [ 1, 2, 3, 4, 5 ] (반복문 종료... 너무 비효율적이다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;코드의 개선이 필요합니다.&lt;/p&gt;
&lt;h3&gt;버블 정렬의 개선&lt;/h3&gt;
&lt;p&gt;반복문은 끝나지 않았지만, 이미 정렬이 완료되었음을 어떻게 알 수 있을까요?&lt;/p&gt;
&lt;p&gt;버블 정렬은 배열의 두 요소 중 첫 번째 요소가 두 번째 요소보다 값이 크면 두 요소의 값을 교체합니다.&lt;/p&gt;
&lt;p&gt;그렇다면, 반복문을 시행했을 때 이러한 &lt;code class=&quot;language-text&quot;&gt;교체 과정이 일어나지 않으면&lt;/code&gt;, 해당 배열은 이미 정렬이 완료된 상태라는 것을 알 수 있습니다.&lt;/p&gt;
&lt;p&gt;그렇다면 교체 과정의 유무를 체크하는 변수 noSwaps를 이용해서 코드를 개선해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;bubbleSort&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// arr[j]과 arr[j + 1]의 값의 교체를 체크하는 변수 noSwaps을 선언합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; noSwaps
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 반복 시작시 noSwaps에 true를 할당합니다.&lt;/span&gt;
    noSwaps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 값의 교체가 일어났을 경우 noSwaps에 false를 할당합니다.&lt;/span&gt;
        noSwaps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 내부 반복문을 실행했음에도 여전히 noSwaps에 true가 할당되어있다면 반복문을 멈춥니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;noSwaps&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;bubbleSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [ 1, 2, 3, 4, 5 ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;개선된 코드로 [1, 2, 4, 3, 5]를 버블 정렬한다면 어떤 과정을 거칠까요?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1-1회차: [ &lt;code class=&quot;language-text&quot;&gt;1, 2&lt;/code&gt;, 4, 3, 5 ]&lt;/li&gt;
&lt;li&gt;1-2회차: [ 1, &lt;code class=&quot;language-text&quot;&gt;2, 4&lt;/code&gt;, 3, 5 ]&lt;/li&gt;
&lt;li&gt;1-3회차: [ 1, 2, &lt;code class=&quot;language-text&quot;&gt;4, 3&lt;/code&gt;, 5 ]&lt;/li&gt;
&lt;li&gt;1-4회차: [ 1, 2, 3, &lt;code class=&quot;language-text&quot;&gt;4, 5&lt;/code&gt; ] (정렬 완료!)&lt;/li&gt;
&lt;li&gt;2-1회차: [ &lt;code class=&quot;language-text&quot;&gt;1, 2&lt;/code&gt;, 3, 4, 5 ]&lt;/li&gt;
&lt;li&gt;2-2회차: [ 1, &lt;code class=&quot;language-text&quot;&gt;2, 3&lt;/code&gt;, 4, 5 ]&lt;/li&gt;
&lt;li&gt;2-3회차: [ 1, 2, &lt;code class=&quot;language-text&quot;&gt;3, 4&lt;/code&gt;, 5 ] (교환이 일어나지 않았네? 여기서 반복문 종료!)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;선택 정렬(Selection sort)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%84%A0%ED%83%9D_%EC%A0%95%EB%A0%AC&quot;&gt;선택 정렬&lt;/a&gt;은 주어진 배열에서 최솟값을 찾고, 그 값을 맨 앞에 위치한 값과 교체한 다음, 이 작업을 맨 앞 위치한 값을 뺀 나머지 배열에 대해서 반복하는 정렬 알고리즘입니다.&lt;/p&gt;
&lt;p&gt;배열 [ 34, 22, 10, 19 ]이 있다고 가정했을 때, 선택 정렬은 아래와 같은 방식으로 작동합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1-1회차: [ &lt;code class=&quot;language-text&quot;&gt;34, 22&lt;/code&gt;, 10, 19 ] =&gt; 최솟값: 22&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1-2회차: [ 34, &lt;code class=&quot;language-text&quot;&gt;22, 10&lt;/code&gt;, 19 ] =&gt; 최솟값: 10&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1-3회차: [ 34, 22, &lt;code class=&quot;language-text&quot;&gt;10, 19&lt;/code&gt; ] =&gt; 최솟값: 10&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1회차 종료: [ &lt;code class=&quot;language-text&quot;&gt;10&lt;/code&gt;, 22, 34, 19 ]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2-1회차: [ 10, &lt;code class=&quot;language-text&quot;&gt;22, 34&lt;/code&gt;, 19 ] =&gt; 최솟값: 22&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2-2회차: [ 10, &lt;code class=&quot;language-text&quot;&gt;22&lt;/code&gt;, 34, &lt;code class=&quot;language-text&quot;&gt;19&lt;/code&gt; ] =&gt; 최솟값: 19&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2회차 종료: [ 10, &lt;code class=&quot;language-text&quot;&gt;19&lt;/code&gt;, 34, 22 ]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3-1회차: [ 10, 19, &lt;code class=&quot;language-text&quot;&gt;34, 22&lt;/code&gt; ] =&gt; 최솟값: 22&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3회차 종료: [ 10, 19, &lt;code class=&quot;language-text&quot;&gt;22&lt;/code&gt;, 34 ]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4회차: [ 10, 19, 22, &lt;code class=&quot;language-text&quot;&gt;34&lt;/code&gt; ] =&gt; 정렬 완료&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;선택 정렬의 구현&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;selectionSort&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 배열이 정렬될 때까지 다음 요소에 대해 이 작업을 반복합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 최솟값을 할당할 변수를 선언하고 첫 번째 요소의 인덱스를 할당합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; min &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 더 작은 숫자를 찾을 때까지 이 요소를 배열의 다음 요소와 비교합니다.&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;min&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 더 작은 숫자가 발견되면 그 작은 숫자의 인덱스를 새로운 &apos;최소값&apos;으로 할당하고 배열의 끝까지 반복합니다.&lt;/span&gt;
        min &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; j
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// &quot;최소값&quot;이 처음에 시작한 값(인덱스)이 아닌 경우 두 값을 바꿉니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; min&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;min&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;min&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;selectionSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [ 10, 19, 22, 34 ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;삽입 정렬(Insertion sort)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%82%BD%EC%9E%85_%EC%A0%95%EB%A0%AC&quot;&gt;삽입 정렬&lt;/a&gt;은 자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여, 자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘입니다.&lt;/p&gt;
&lt;p&gt;배열 [5, 3, 4, 1, 2]가 있다고 가정했을 때, 삽입 정렬은 아래와 같은 방식으로 이뤄집니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0회차: [&lt;U&gt;5&lt;/U&gt;, &lt;code class=&quot;language-text&quot;&gt;3&lt;/code&gt;, 4, 1, 2] = 현재값 3, 정렬완료: [ 5 ]&lt;/li&gt;
&lt;li&gt;1회차: [ &lt;U&gt;3, 5&lt;/U&gt;, &lt;code class=&quot;language-text&quot;&gt;4&lt;/code&gt;, 1, 2 ] = 현재값 4, 정렬완료: [ 3, 5 ]&lt;/li&gt;
&lt;li&gt;2회차: [ &lt;U&gt;3, 4, 5&lt;/U&gt;, &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt;, 2 ] = 현재값 1, 정렬완료: [ 3, 4, 5 ]&lt;/li&gt;
&lt;li&gt;3회차: [ &lt;U&gt;1, 3, 4, 5&lt;/U&gt;, &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt; ] = 현재값 2, 정렬완료: [ 1, 3, 4, 5 ]&lt;/li&gt;
&lt;li&gt;4회차: [ &lt;U&gt;1, 2, 3, 4, 5&lt;/U&gt; ] =&gt; 정렬완료&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;삽입 정렬의 구현&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;insertionSort&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; copiedArr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//배열에서 두 번째 요소를 선택하는 것으로 시작합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; copiedArr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//이제 두 번째 요소를 그 앞의 요소와 비교합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;copiedArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; copiedArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 두 번째 요소가 앞의 요소보다 작다면 두 번째 요소를 이미 정렬된 부분에 삽입합니다.&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 두 번째 요소가 삽입 될 위치를 찾고 삽입합니다.&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;copiedArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; copiedArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cuttedVal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; copiedArr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          copiedArr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;cuttedVal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//배열이 정렬될 때까지 이 과정을 반복합니다.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; copiedArr
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;insertionSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;버블, 선택, 삽입 정렬 비교&lt;/h3&gt;
&lt;p&gt;버블, 선택, 삽입 정렬을 시간 복잡도를 기준으로 비교하면 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;버블 정렬 - 최상: O(n), 평균: O(n²), 최악: O(n²)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;선택 정렬 - 최상: O(n²), 평균: O(n²), 최악: O(n²)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;삽입 정렬 - 최상: O(n), 평균: O(n²), 최악: O(n²)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(공간 복잡도는 O(1)으로 모두 동일합니다.)&lt;/p&gt;
&lt;h4&gt;최상의 경우에서 왜 차이가 날까?&lt;/h4&gt;
&lt;p&gt;세 정렬의 차이는 최상의 경우에서 발생합니다.&lt;/p&gt;
&lt;p&gt;배열이 이미 어느정도 정렬이 완료된 상태라고 가정했을 때,&lt;/p&gt;
&lt;p&gt;버블 정렬과 삽입 정렬은, 정렬이 이루어지지 않은 요소들에 대해서만 값을 비교하고 교체합니다.&lt;/p&gt;
&lt;p&gt;즉, 정렬이 많이 이루어져 있을수록 연산의 갯수가 줄어듭니다.&lt;/p&gt;
&lt;p&gt;하지만 선택 정렬의 경우, 배열의 정렬 정도와 상관없이 매 회차 최소값을 찾아내야 하기 때문에,&lt;/p&gt;
&lt;p&gt;배열의 정렬 정도에 따라 연산 갯수가 줄어들지 않습니다.&lt;/p&gt;
&lt;h4&gt;평균적으로 O(n²) 시간복잡도를 갖는 이 정렬들은 쓸모가 없을까?&lt;/h4&gt;
&lt;p&gt;버블 정렬, 선택 정렬, 삽입 정렬과 같이 O(n²) 시간복잡도를 갖는 정렬들은 추후에 다룰 알고리즘들에 비해서 시간복잡도는 떨어질지 모르겠으나, 정렬해야 하는 데이터 집합의 크기가 작을 경우에는 효과적으로 사용됩니다.&lt;/p&gt;
&lt;p&gt;그리고, 삽입 정렬의 경우 이미 정렬된 데이터에 새로운 데이터를 삽입하고 다시 정렬해야 하는 경우 사용하기 좋습니다.&lt;/p&gt;
&lt;p&gt;생각해보면 당연합니다.&lt;/p&gt;
&lt;p&gt;새로운 요소를 이미 정렬된 배열 부분과 비교하여 해당 요소의 위치를 찾아 삽입하는 연산이, 이미 삽입 정렬 알고리즘 자체에 구현되어있기 때문입니다.&lt;/p&gt;
&lt;h3&gt;프로그래머스 문제 적용&lt;/h3&gt;
&lt;p&gt;정렬 알고리즘을 배웠으니 프로그래머스에서 문제를 하나 가져와서 풀어보려고 합니다.&lt;/p&gt;
&lt;p&gt;이번에 가져온 문제는 프로그래머스 코딩테스트 연습 Lv.1 문제 &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/42748&quot;&gt;K번째수&lt;/a&gt;입니다.&lt;/p&gt;
&lt;p&gt;해당 문제는 프로그래머스 사이트의 코딩테스트 고득점 Kit의 &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/parts/12198&quot;&gt;정렬&lt;/a&gt; 항목에 있는 문제입니다.&lt;/p&gt;
&lt;p&gt;처음에는 한 문제를 버블 정렬, 삽입 정렬, 선택 정렬 세 가지 방식으로 풀어보려고 했으나,&lt;/p&gt;
&lt;p&gt;그것보다는 문제를 읽고 어떤 정렬 방식을 선택할 것인지 고민해보는 것이 더 중요하다고 판단했기 때문에,&lt;/p&gt;
&lt;p&gt;문제를 읽고 적합한 정렬 알고리즘을 선택하여 풀어봤습니다.&lt;/p&gt;
&lt;p&gt;먼저 문제를 잠깐 보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k번째에 있는 수를 구하려 합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

예를 들어 array가 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;이라면

&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; array의 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;번째부터 &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;번째까지 자르면 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;입니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;에서 나온 배열을 정렬하면 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;입니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;에서 나온 배열의 &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;번째 숫자는 &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;입니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

배열 array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;를 원소로 가진 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;차원 배열 commands가 매개변수로 주어질 때&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 
배열에 담아 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; 하도록 solution 함수를 작성해주세요&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;문제 해결 접근법과 상세한 풀이는 아래에서 소개하겠습니다.&lt;/p&gt;
&lt;h4&gt;문제 해결 접근법과 상세 풀이&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* 문제 해결 접근법
- 이해
  - 배열 commands의 각 원소에 대해서 const slicedArr = arr.slice(i-1, j)을 진행하고
  - 잘라낸 배열을 오름차순 정렬하여 slicedArr[k-1]를 반환하고, 그 값들을 모아서 최종 반환하면 되겠다.
  - 잘라낸 배열은 데이터 셋이 작으니까 버블, 선택, 삽입 정렬 중에 고르면 될 것 같다.
  - 새로운 값을 받아 정렬하는 것은 아니니까 삽입 정렬은 제외하고, 
  - 어느정도 정렬이 되어있으면 성능이 더 잘 나오는 버블정렬로 풀어야겠다.
- 인풋
  - array: 1~100 사이의 값의 원소를 갖는 길이 1~100 사이의 배열
  - commands: 길이 3을 갖는 배열을 원소로 갖는 길이 1~50 사이의 배열
- 아웃풋
  - return: 각 커맨드에 대한 반환값을 담은 배열로, commands와 길이가 같아야 한다.
- 예시
  - array: [1, 5, 2, 6, 3, 7, 4]
  - commands: [[2, 5, 3], [4, 4, 1], [1, 7, 3]]
  - return: [5, 6, 3]
*/&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bubbleSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; noSwaps
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    noSwaps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        noSwaps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;noSwaps&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; commands&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 최종 반환 값을 할당할 변수 answer를 선언하고 빈 배열을 할당한다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; answer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;// commands에 각 원소에 대해서 반복문을 실행한다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; command &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; commands&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 변수 i, j, k을 선언하고 각각 값을 할당한다.&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; command&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; command&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; command&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 변수 slicedArr를 선언하고 array.slice(i-1, j)를 할당한다.&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; slicedArr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// slicedArr를 오름차순으로 버블정렬한다.&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;bubbleSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;slicedArr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// answer에 slicedArr[k-1]을 push한다.&lt;/span&gt;
        answer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;slicedArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;// answer를 반환한다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; answer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;회고&lt;/h3&gt;
&lt;p&gt;이제 겨우 세 가지 정렬 알고리즘을 배웠고, 이 알고리즘들이 실제로 많이 쓰이는지 아닌지는 저로서는 알 수가 없습니다.&lt;/p&gt;
&lt;p&gt;(시간복잡도가 높은 알고리즘인 만큼 자주 사용하지는 않을 것 같지만...)&lt;/p&gt;
&lt;p&gt;하지만 그럼에도 정렬 알고리즘을 배우는 것이 재미있었던 이유는, 하나의 목표를 달성하기 위한 다양한 방법을 생각해볼 수 있었기 때문입니다.&lt;/p&gt;
&lt;p&gt;이번 프로그래머스 문제도 쉽고 간단한 문제였지만, 그 안에서도 더 효율적인 정렬 알고리즘이 무엇일지 생각해보는게 즐거웠습니다.&lt;/p&gt;
&lt;p&gt;요즘 코딩테스트 문제를 푸는 것이 즐거워졌습니다.&lt;/p&gt;
&lt;p&gt;아직 부족하지만 이 스터디를 통해서 다양한 알고리즘을 배우고 있고, 어떤 문제를 만났을 때 &apos;내가 배웠던 알고리즘으로 풀 수 있을까?&apos; 고민해보는 과정이 즐겁습니다.&lt;/p&gt;
&lt;p&gt;한 문제에 다양한 솔루션이 떠오를 때는 더 즐겁습니다.&lt;/p&gt;
&lt;p&gt;이렇게 즐거운 마음으로 오늘은 여기서 글을 마치겠습니다.&lt;/p&gt;
&lt;p&gt;읽어주셔서 감사합니다.&lt;/p&gt;
&lt;h3&gt;참고자료&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로그래머스 코딩 테스트 연습 - K번째수&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;문제 링크: &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/42748&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/42748&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best JavaScript Data Structures &amp;#x26; Algorithms Course by Udemy, last updated January 2022, accessed April 5, 2023&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;강의 링크: &lt;a href=&quot;https://www.udemy.com/course/best-javascript-data-structures/&quot;&gt;https://www.udemy.com/course/best-javascript-data-structures/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[탐색 알고리즘]]></title><description><![CDATA[…]]></description><link>https://ha-il.github.io/algorithm-study/7-week/</link><guid isPermaLink="false">https://ha-il.github.io/algorithm-study/7-week/</guid><pubDate>Tue, 16 May 2023 06:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;탐색 알고리즘&lt;/h2&gt;
&lt;p&gt;오늘은 탐색 알고리즘에 대해서 공부했습니다.&lt;/p&gt;
&lt;p&gt;먼저, 배열을 하나 보고 가겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;B&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;C&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;D&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;E&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;F&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;G&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;H&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 배열에서 &lt;code class=&quot;language-text&quot;&gt;E&lt;/code&gt;를 찾는 방법에는 무엇이 있을까요?&lt;/p&gt;
&lt;p&gt;아마, 배열의 처음부터 끝까지 순회해서 찾는 방법도 있을 것이고,&lt;/p&gt;
&lt;p&gt;위 배열처럼 정렬되어 있는 경우에는 배열의 중간 값을 기준으로 배열을 나눠가며 찾는 방법도 있을 것입니다.&lt;/p&gt;
&lt;p&gt;이렇게 어떤 자료구조에서 내가 원하는 값을 찾는 방법은 여러가지가 있고, 자료구조에 따라서 효율적인 탐색 알고리즘도 달라질 것입니다.&lt;/p&gt;
&lt;p&gt;이번 글에서는 다양한 탐색 알고리즘을 알아보고, 각 알고리즘은 어떤 구조를 가지고 있고 어떤 상황에서 효율적으로 사용될 수 있는지 알아보겠습니다.&lt;/p&gt;
&lt;p&gt;참고로 이번 글에서 예시로 사용할 자료구조는 배열과 문자열입니다.&lt;/p&gt;
&lt;h3&gt;선형 탐색 (Linear Search)&lt;/h3&gt;
&lt;p&gt;선형 탐색은 한 번에 하나의 항목을 확인하는 탐색 방식입니다.&lt;/p&gt;
&lt;p&gt;선형 탐색을 사용해서 알파벳 &apos;E&apos;를 찾을 경우 아래와 같은 과정을 거칩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ &lt;code class=&quot;language-text&quot;&gt;&apos;A&apos;&lt;/code&gt;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos; ]&lt;/li&gt;
&lt;li&gt;[ &apos;A&apos;,&lt;code class=&quot;language-text&quot;&gt;&apos;B&apos;&lt;/code&gt;,&apos;C&apos;,&apos;D&apos;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos; ]&lt;/li&gt;
&lt;li&gt;[ &apos;A&apos;,&apos;B&apos;,&lt;code class=&quot;language-text&quot;&gt;&apos;C&apos;&lt;/code&gt;,&apos;D&apos;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos; ]&lt;/li&gt;
&lt;li&gt;[ &apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&lt;code class=&quot;language-text&quot;&gt;&apos;D&apos;&lt;/code&gt;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos; ]&lt;/li&gt;
&lt;li&gt;[ &apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&lt;code class=&quot;language-text&quot;&gt;&apos;E&apos;&lt;/code&gt;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos; ]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;선형 탐색 알고리즘을 코드로 구현하면 아래와 같이 구현할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;linearSearch&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; i
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 코드를 보면 배열의 길이가 길어질수록 탐색해야하는 대상이 많아지므로 배열의 길이에 따라 시간 복잡도가 증가합니다.&lt;/p&gt;
&lt;p&gt;따라서, 선형탐색은 평균적으로 O(n) 시간 복잡도를 가집니다.&lt;/p&gt;
&lt;p&gt;찾고자하는 대상이 배열의 첫번째에 있는 경우는 선형 탐색에서 최상의 경우로 O(1) 시간 복잡도를 가집니다.&lt;/p&gt;
&lt;p&gt;찾고자하는 대상이 배열의 마지막에 있거나 아예 없는 경우는 선형 탐색에 최악의 경우로 O(n) 시간 복잡도를 가집니다.&lt;/p&gt;
&lt;p&gt;배열이 정렬되어있지 않거나, 배열의 요소 간에 특별한 규칙이 없는 경우에 요소를 탐색해야한다면 선형 탐색 알고리즘을 고려할 수 있습니다.&lt;/p&gt;
&lt;p&gt;그리고 선형 탐색 알고리즘은 우리가 자주 사용하는 여러 자바스크립트 매서드에서 사용되고 있습니다.&lt;/p&gt;
&lt;p&gt;아래의 메서드들은 선형 탐색 알고리즘을 가지고 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf&quot;&gt;Array.indexOf()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf&quot;&gt;String.indexOf()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/includes&quot;&gt;Array.includes()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/includes&quot;&gt;String.includes()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/find&quot;&gt;Array.find()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex&quot;&gt;Array.findIndex()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;이진 탐색(Binary Search)&lt;/h3&gt;
&lt;p&gt;이진 탐색은 분할과 정복 개념을 사용해서 대상을 탐색하는 방식입니다.&lt;/p&gt;
&lt;p&gt;분할과 정복은 &lt;a href=&quot;https://ha-il.github.io/algorithm-study/5-week/&quot;&gt;이전 글&lt;/a&gt;에서도 다뤘던 적이 있는데요.&lt;/p&gt;
&lt;p&gt;배열을 예로 들면, 배열의 중간 지점을 찾아서 두 영역으로 분할하고 원하는 대상을 찾을 때까지 분할을 반복하는 것입니다.&lt;/p&gt;
&lt;p&gt;이진 탐색을 사용해서 알파벳 &apos;E&apos;를 찾을 경우 아래와 같은 과정을 거칩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ &apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;(중간값),&lt;code class=&quot;language-text&quot;&gt;&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos;,&apos;I&apos;&lt;/code&gt; ]&lt;/li&gt;
&lt;li&gt;[ &apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&lt;code class=&quot;language-text&quot;&gt;&apos;E&apos;,&apos;F&apos;&lt;/code&gt;,&apos;G&apos;(중간값),&apos;H&apos;,&apos;I&apos; ]&lt;/li&gt;
&lt;li&gt;[ &apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&lt;code class=&quot;language-text&quot;&gt;&apos;E&apos;&lt;/code&gt;(발견!),&apos;F&apos;,&apos;G&apos;,&apos;H&apos; ]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위의 경우 배열의 요소들이 알파벳순으로 정렬되어 있기 때문에 중간값이 의미를 가질 수 있었습니다.&lt;/p&gt;
&lt;p&gt;즉, 데이터가 정렬되어 있지 않다면 이진 탐색을 사용할 수 없습니다.&lt;/p&gt;
&lt;p&gt;이진 탐색 알고리즘을 코드로 구현하면 아래와 같이 구현할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;binarySearch&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; start
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;end&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; end

  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; middle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;middle&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; middle &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;middle&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; middle &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; middle
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이진 탐색의 시간 복잡도는 어떻게 계산할 수 있을까요?&lt;/p&gt;
&lt;p&gt;이렇게 생각해보면 쉽게 구할 수 있습니다.&lt;/p&gt;
&lt;p&gt;예를 들어 배열의 길이가 8이고, 찾고자 하는 대상이 배열에 없는 최악의 경우를 가정한다면, 이진 탐색의 연산은 총 몇 번 일어날까요?&lt;/p&gt;
&lt;p&gt;1회차: [ 1, 2, 3, 4(중간값), &lt;code class=&quot;language-text&quot;&gt;5, 6, 7, 8&lt;/code&gt; ]
2회차: [ 1, 2, 3, 4, 5, 6(중간값), &lt;code class=&quot;language-text&quot;&gt;7, 8&lt;/code&gt; ]
3회차: [ 1, 2, 3, 4, 5, 6, 7(중간값), &lt;code class=&quot;language-text&quot;&gt;8&lt;/code&gt; ]&lt;/p&gt;
&lt;p&gt;배열의 길이가 8일 때 3번의 연산이 일어납니다.&lt;/p&gt;
&lt;p&gt;배열의 길이가 16일 때는 같은 논리로 4번의 연산이 일어날 것입니다.&lt;/p&gt;
&lt;p&gt;배열의 길이와 연산 횟수의 관계를 로그로 표현할 수 있습니다.&lt;/p&gt;
&lt;p&gt;log₂8 = 3&lt;/p&gt;
&lt;p&gt;log₂16 = 4&lt;/p&gt;
&lt;p&gt;이런 관계를 시간 복잡도로 표기하면 &lt;code class=&quot;language-text&quot;&gt;O(log n)&lt;/code&gt;으로 표현할 수 있습니다.&lt;/p&gt;
&lt;p&gt;O(log n)이라는 시간 복잡도는 상당히 빠른 편에 속하므로, 선형 탐색에 비해서 이진 탐색이 더 효율적인 알고리즘이라고 할 수 있을 것입니다.&lt;/p&gt;
&lt;p&gt;하지만 위에서도 언급했듯, 기준점을 가지고 데이터를 두 영역으로 분할해서 탐색하기 때문에, 데이터가 정렬되어 있어야 이진 탐색을 사용할 수 있습니다.&lt;/p&gt;
&lt;h3&gt;이진 탐색의 적용&lt;/h3&gt;
&lt;p&gt;이진 탐색을 배웠으니 실전에 적용해보려고 합니다.&lt;/p&gt;
&lt;p&gt;이번에도 프로그래머스에서 문제를 하나 가져왔습니다.&lt;/p&gt;
&lt;p&gt;이번에 준비한 문제는, 프로그래머스 코딩테스트 연습 Lv.3 문제 &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/43238&quot;&gt;입국심사&lt;/a&gt;입니다.&lt;/p&gt;
&lt;p&gt;이번에도 역시 &lt;a href=&quot;https://ha-il.github.io/algorithm-study/2-week/&quot;&gt;지난 포스팅&lt;/a&gt;에서 배웠던 것처럼 문제 해결 접근법을 적용해서 풀어봤습니다.&lt;/p&gt;
&lt;p&gt;문제는 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;n명이 입국심사를 위해 줄을 서서 기다리고 있습니다. 각 입국심사대에 있는 심사관마다 심사하는데 걸리는 시간은 다릅니다.

처음에 모든 심사대는 비어있습니다. 한 심사대에서는 동시에 한 명만 심사를 할 수 있습니다. 
가장 앞에 서 있는 사람은 비어 있는 심사대로 가서 심사를 받을 수 있습니다. 
하지만 더 빨리 끝나는 심사대가 있으면 기다렸다가 그곳으로 가서 심사를 받을 수도 있습니다.

모든 사람이 심사를 받는데 걸리는 시간을 최소로 하고 싶습니다.

입국심사를 기다리는 사람 수 n, 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times가 매개변수로 주어질 때, 
모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 return 하도록 solution 함수를 작성해주세요.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 문제는 프로그래머스 사이트에서 &lt;a href=&quot;https://school.programmers.co.kr/learn/challenges?tab=algorithm_practice_kit&quot;&gt;코딩테스트 고득점 Kit&lt;/a&gt;에 &apos;이분탐색&apos;이라는 카테고리로 분류되어 있어서 가져와봤습니다.&lt;/p&gt;
&lt;p&gt;사실 문제만 봤으면, 이걸 이진 탐색으로 풀 수 있을 거라는 생각도 못 했을 것 같습니다.&lt;/p&gt;
&lt;p&gt;Lv.3 문제여서 그런지 저에게는 상당히 어려웠습니다만, 이진 탐색을 사용해야 한다는 점이 힌트가 되어서 어떻게든 풀어낸 것 같습니다.&lt;/p&gt;
&lt;p&gt;상세한 풀이는 아래에 소개하겠습니다.&lt;/p&gt;
&lt;h4&gt;&apos;입국심사&apos;의 문제 해결 접근법 적용&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* 문제 해결 접근법
- 이해: n명을 심사하는데 걸리는 시간의 최소값(left)과 최대값(right)을 양 끝으로 하여, 중간 값(mid)을 구한 다음 이진 탐색으로 최적의 시간(bestTime)을 구하면 되겠다.
- 인풋
  - n: 입국심사를 기다리는 사람 수
  - times: 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열
- 아웃풋
  - bestTime: 모든 사람이 심사를 받는데 걸리는 시간의 최솟값
- 네이밍
  - left: 심사관이 n명을 심사하는데 걸리는 최소 시간으로 배열 times의 원소 중 가장 작은 값과 같다.
  - right: 심사관이 n명을 심사하는데 걸리는 최대 시간으로 배열 times의 원소 중 가장 큰 값에 n을 곱한 것과 같다.
  - mid: left와 right의 합을 2로 나누고 나머지를 버린 값으로, 비교의기준이 되는 시간이다.
  - totalChecked: mid 시간을 기준으로 심사관들이 심사를 마친 시간을 합한것이다.

- 예시로 이해하기

  ex) solution(6, [7, 10]) // 28

  7(left) - 33(mid) - 60(rigth)
  33분 =&gt; 7분: 4명 + 10분: 3명 =&gt; 7명 &gt; 6(n)

  7 - 19 - 32
  19분 =&gt; 7분: 2명 + 10분: 1명 =&gt; 3명 &amp;lt; 6

  20 - 26 - 32
  26분 =&gt; 7분: 3명 + 10분: 2명 =&gt; 5명 &amp;lt; 6

  27 - 29 - 32
  29분 =&gt; 7분: 4명 + 10분 2명 =&gt; 6명 &amp;lt;= 6 (현재 베스트: n과 일치한다고 무조건 반환하면 안 됨)

  27 - 27 - 28
  27분 =&gt; 7분: 3명 + 10분 2명 =&gt; 5명 &amp;lt; 6

  28 - 28 - 28
  28분 =&gt; 7분: 4명 + 10분 2명 =&gt; 6명 === 6 (최종 베스트)
*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&apos;입국심사&apos;의 이진 탐색 적용&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; times&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 심사 시간이 가장 짧은 경우&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; left &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;times&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 심사 시간이 가장 긴 경우&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; right &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;times&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; n 
  &lt;span class=&quot;token comment&quot;&gt;// n명을 심사하는데 들어가는 최소 시간&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; bestTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; mid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// mid분을 기준으로 심사관들이 심사할 수 있는 사람 수&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; totalChecked &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    times&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      totalChecked &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mid &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;totalChecked &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 심사를 완료한 인원수(totalChecked)가 n보다 크거나 같다면&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// mid분은 심사에 걸리는 최소 시간이 아님을 의미한다.&lt;/span&gt;
      bestTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mid
      right &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mid &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 심사를 완료한 인원수(totalChecked)가 n보다 작다면&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// mid분 내로는 n명의 심사를 완료할 수 없음을 의미한다.&lt;/span&gt;
      left &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mid &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; bestTime
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 제출했더니 무사히 통과할 수 있었습니다.&lt;/p&gt;
&lt;h3&gt;회고&lt;/h3&gt;
&lt;p&gt;이진 탐색의 경우 이미 분할과 정복 패턴을 배웠기 때문에 코딩테스트에 적용하는 것도 쉬울 것이라 생각했는데 전혀 그렇지 않았습니다.&lt;/p&gt;
&lt;p&gt;나름 충격이었던 점은, 배열을 기준으로 탐색을 공부했기 때문에 배열 없이 그저 Number만으로 답을 찾는 과정이 저에게는 신선했습니다.&lt;/p&gt;
&lt;p&gt;심지어 처음에는 left값과 right값을 기준으로 배열을 만들어서 문제를 풀려고 했을 정도입니다.&lt;/p&gt;
&lt;p&gt;역시 이론을 알고 있는 것과 실전에 적용하는 것은 별개의 문제라는 것을 새삼 느꼈습니다.&lt;/p&gt;
&lt;p&gt;이번 탐색 파트를 공부하면서, 아무리 생각해도 탐색 방식이 이것만 있지는 않을 것 같아서 찾다보니 &lt;a href=&quot;https://github.com/trekhleb/javascript-algorithms&quot;&gt;javascript-algorithms&lt;/a&gt;라는 좋은 깃 저장소를 발견했습니다.&lt;/p&gt;
&lt;p&gt;해당 깃 저장소에서 다루는 탐색 방식도 추후에 추가해보도록 노력하겠습니다.&lt;/p&gt;
&lt;p&gt;오늘 글은 여기까지입니다.&lt;/p&gt;
&lt;p&gt;읽어주셔서 감사합니다.&lt;/p&gt;
&lt;h3&gt;참고자료&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로그래머스 코딩 테스트 연습 - 입국심사&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;문제 링크: &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/43238&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/43238&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best JavaScript Data Structures &amp;#x26; Algorithms Course by Udemy, last updated January 2022, accessed April 5, 2023&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;강의 링크: &lt;a href=&quot;https://www.udemy.com/course/best-javascript-data-structures/&quot;&gt;https://www.udemy.com/course/best-javascript-data-structures/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[재귀 함수]]></title><description><![CDATA[…]]></description><link>https://ha-il.github.io/algorithm-study/6-week/</link><guid isPermaLink="false">https://ha-il.github.io/algorithm-study/6-week/</guid><pubDate>Mon, 08 May 2023 20:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;재귀&lt;/h2&gt;
&lt;p&gt;이번에는 재귀에 대해서 이야기해보겠습니다.&lt;/p&gt;
&lt;p&gt;먼저 재귀란 뭘까요?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ko.dict.naver.com/#/entry/koko/dd0aa403963a4afdbdbac90862c3f06e&quot;&gt;네이버 사전&lt;/a&gt;에 검색해보니, 정보 통신 분야에서 재귀란 &lt;code class=&quot;language-text&quot;&gt;주어진 문제를 해결하기 위하여 하나의 함수에서 자신을 다시 호출하여 작업을 수행하는 방식&lt;/code&gt;을 의미합니다.&lt;/p&gt;
&lt;p&gt;자기 자신을 반복적으로 호출한다는 개념이 처음에는 꽤 낯설기 때문에, 이걸 굳이 배워야하냐는 생각이 들기도 하는데요.&lt;/p&gt;
&lt;p&gt;재귀는 훗날 학습할 자료구조(특히, 트리나 그래프)를 작성할 때도 많이 사용되기 때문에 이해하고 가는 것이 중요합니다.&lt;/p&gt;
&lt;h3&gt;재귀 함수의 형태&lt;/h3&gt;
&lt;p&gt;재귀 함수에서 반드시 포함되어야 할 요소는 세 가지가 있습니다.&lt;/p&gt;
&lt;p&gt;바로 &lt;code class=&quot;language-text&quot;&gt;종료 조건&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;다른 입력값&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;자신을 다시 호출하는 것&lt;/code&gt; 입니다.&lt;/p&gt;
&lt;p&gt;만약 종료 조건이 없다면, 재귀 함수는 무한히 호출될 것입니다.&lt;/p&gt;
&lt;p&gt;만약 다른 입력값 없이 동일한 입력값으로 재귀 함수를 호출한다면, 그저 여러번 호출한다는 것뿐이니 이점이 없습니다.&lt;/p&gt;
&lt;p&gt;만약 자신을 다시 호출하는 코드가 없다면, 그 함수는 재귀 함수라고 정의할 수 없습니다.&lt;/p&gt;
&lt;p&gt;재귀 함수에서 반드시 포함되어야 할 세 가지 요소를 코드로 작성하면 아래와 같은 형태가 나옵니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;recursion1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 종료 조건&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;// 다른 입력값&lt;/span&gt;
    input&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;// 자신을 다시 호출&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;recursion1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;recursion2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 종료 조건&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;token comment&quot;&gt;// 다른 입력값으로 자신을 다시 호출&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; input &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;recursion2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 재귀함수를 하나의 함수로 작성하는 방법도 있지만, 다른 함수 안의 헬퍼 함수로 작성하는 방법도 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; outerScopedVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;helperInput&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;helperInput&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token function&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; outerScopedVariable&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;헬퍼 함수를 사용하면 &lt;code class=&quot;language-text&quot;&gt;outerScopedVariable&lt;/code&gt;와 같은 외부 변수를 사용하게 되는데,&lt;/p&gt;
&lt;p&gt;외부 변수의 사용을 원하지 않는다면, 순수 재귀 함수로 구현하는 방법도 있습니다.&lt;/p&gt;
&lt;p&gt;순수 재귀 함수는 필요한 모든 코드가 함수 자체에 포함되어있습니다.&lt;/p&gt;
&lt;p&gt;아래 코드는 순수 재귀 함수를 사용해서 배열에서 홀수를 찾는 예제입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;collectOddValues&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; newArr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; newArr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        newArr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        
    newArr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newArr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collectOddValues&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; newArr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;collectOddValues&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;재귀 함수의 적용&lt;/h3&gt;
&lt;p&gt;재귀 함수를 배웠으니 실전에 적용해보려고 합니다.&lt;/p&gt;
&lt;p&gt;이번에도 프로그래머스에서 문제를 하나 가져왔습니다.&lt;/p&gt;
&lt;p&gt;이번에 준비한 문제는, 프로그래머스 코딩테스트 연습 Lv.1 문제 &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/12932&quot;&gt;자연수 뒤집어 배열로 만들기&lt;/a&gt;입니다.&lt;/p&gt;
&lt;p&gt;이번에도 역시 &lt;a href=&quot;https://ha-il.github.io/algorithm-study/2-week/&quot;&gt;지난 포스팅&lt;/a&gt;에서 배웠던 것처럼 문제 해결 접근법을 적용해서 풀어봤습니다.&lt;/p&gt;
&lt;p&gt;먼저 문제를 잠깐 보실까요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;자연수 n을 뒤집어 각 자리 숫자를 원소로 가지는 배열 형태로 리턴해주세요. 
예를들어 n이 12345이면 [5,4,3,2,1]을 리턴합니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저는 이 문제를 보고 재귀 함수를 사용해서 풀 수 있을 것 같다는 생각이 들었습니다.&lt;/p&gt;
&lt;p&gt;n을 문자열로 변환하고, 문자열의 마지막 요소를 배열에 할당하는 것을 재귀 방식으로 반복하면 풀 수 있을 것 같았습니다.&lt;/p&gt;
&lt;p&gt;상세한 풀이는 아래 코드에서 설명드리겠습니다.&lt;/p&gt;
&lt;h4&gt;&apos;자연수 뒤집어 배열로 만들기&apos;의 문제 해결 접근법 적용&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* 문제 이해하기
  - 이해
    - 주어진 자연수의 1의 자리 숫자부터 순서대로 배열에 삽입해서 반환하기.
  - 인풋: 10,000,000,000이하인 자연수 
  - 아웃풋: 자연수 n을 뒤집어 각 자리 숫자를 원소로 가지는 배열
  - 네이밍
    - result: 최종 반환할 배열
    - str: 자연수 n을 문자열로 바꾼 값을 할당할 변수
    - helper: 재귀 함수로 사용될 헬퍼 함수 
*/&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* 예시
  n: 12345 =&gt; [5,4,3,2,1] 
*/&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 최종 반환할 배열 result를 선언하고 빈 배열을 할당합니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 변수 str을 선언하고 n을 문자열로 바꾼 값을 할당합니다.&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 재귀함수로 사용할 helper 함수를 정의합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 재귀 함수의 종료 조건을 작성합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// result에 str의 마지막 문자를 push합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// helper 자기 자신을 호출합니다.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 이 때 마지막 문자를 제거한 str을 인수로 전달합니다.&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// helper 함수를 호출합니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// result를 반환합니다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&apos;자연수 뒤집어 배열로 만들기&apos;의 재귀 함수(헬퍼 함수 패턴) 적용&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;
    result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 제출했더니 무사히 통과할 수 있었습니다.&lt;/p&gt;
&lt;h3&gt;회고&lt;/h3&gt;
&lt;p&gt;재귀 함수는 처음에 이해하기는 어렵지만, 여태 배웠던 다른 방식들에 비해서 더 재미있는 것 같습니다.&lt;/p&gt;
&lt;p&gt;반복한다는 점은 여태 사용해왔던 반복문이나 매서드와 큰 차이는 없지만,&lt;/p&gt;
&lt;p&gt;정의한 함수를 스스로 호출해서 반복한다는 점이 신박한 것 같습니다.&lt;/p&gt;
&lt;p&gt;뭔가 다른 반복문은 컵을 뒤집어서 높이 쌓아올리는 느낌이라면, 재귀함수는 컵을 착착착 겹쳐서 정리하는 느낌인 것 같습니다.&lt;/p&gt;
&lt;p&gt;오늘 배운 재귀 함수를 활용해서 자료구조를 구현할 날이 어서 오기를 바라는 마음으로 글을 마치겠습니다.&lt;/p&gt;
&lt;h3&gt;참고자료&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로그래머스 코딩 테스트 연습 - 자연수 뒤집어 배열로 만들기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;문제 링크: &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120956&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120956&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best JavaScript Data Structures &amp;#x26; Algorithms Course by Udemy, last updated January 2022, accessed April 5, 2023&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;강의 링크: &lt;a href=&quot;https://www.udemy.com/course/best-javascript-data-structures/&quot;&gt;https://www.udemy.com/course/best-javascript-data-structures/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[슬라이딩 윈도우(Sliding Window)패턴과 분할과 정복]]></title><description><![CDATA[문제 해결 패턴 - 슬라이딩 윈도우(Sliding Window…]]></description><link>https://ha-il.github.io/algorithm-study/5-week/</link><guid isPermaLink="false">https://ha-il.github.io/algorithm-study/5-week/</guid><pubDate>Fri, 28 Apr 2023 16:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;문제 해결 패턴 - 슬라이딩 윈도우(Sliding Window)&lt;/h2&gt;
&lt;p&gt;이번에는 &lt;a href=&quot;https://ha-il.github.io/algorithm-study/4-week/&quot;&gt;지난 포스팅&lt;/a&gt;에 이어서 또다른 문제 해결 패턴을 소개하겠습니다.&lt;/p&gt;
&lt;p&gt;이번에 소개할 패턴은 슬라이딩 윈도우 패턴입니다.&lt;/p&gt;
&lt;p&gt;여태까지 소개했던 &lt;a href=&quot;https://ha-il.github.io/algorithm-study/3-week/&quot;&gt;&apos;빈도수 세기&apos;&lt;/a&gt; 패턴과 &lt;a href=&quot;https://ha-il.github.io/algorithm-study/4-week/&quot;&gt;&apos;다중 포인터&apos;&lt;/a&gt; 패턴에 비해서는 꽤 재미있는 이름입니다.&lt;/p&gt;
&lt;p&gt;왜 슬라이딩 윈도우라는 이름이 붙었는지는 예시를 통해 보여드리는게 이해가 빠를 것 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;예시: 슬라이딩 윈도우의 원리&lt;/p&gt;
&lt;p&gt;1회차: [&lt;code class=&quot;language-text&quot;&gt;1, 2&lt;/code&gt;, 3, 4, 5]&lt;/p&gt;
&lt;p&gt;2회차: [1, &lt;code class=&quot;language-text&quot;&gt;2, 3&lt;/code&gt;, 4, 5]&lt;/p&gt;
&lt;p&gt;3회차: [1, 2, &lt;code class=&quot;language-text&quot;&gt;3, 4&lt;/code&gt;, 5]&lt;/p&gt;
&lt;p&gt;4회차: [1, 2, 3, &lt;code class=&quot;language-text&quot;&gt;4, 5&lt;/code&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위의 예시를 보면 정말 미닫이 창문이 움직이는 것처럼 배열을 탐색하고 있는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이처럼 슬라이딩 윈도우 패턴은, 배열이나 문자열 같은 데이터의 하위 집합을 찾는 경우에 유용합니다.&lt;/p&gt;
&lt;p&gt;슬라이딩 윈도우 패턴에서 중요한 것은 &lt;code class=&quot;language-text&quot;&gt;창문의 길이&lt;/code&gt;입니다.&lt;/p&gt;
&lt;p&gt;(참고: 창문의 크기, 너비, 가로 폭 등 다양한 용어가 있지만, 슬라이딩 윈도우 패턴은 &lt;code class=&quot;language-text&quot;&gt;배열이나 문자열의 길이&lt;/code&gt;와 연관이 있기 때문에, 이번 글에서는 &lt;code class=&quot;language-text&quot;&gt;창문의 길이&lt;/code&gt;라는 표현을 사용하도록 하겠습니다.)&lt;/p&gt;
&lt;p&gt;창문의 길이는 주어진 문제에 따라서 달라질 수 있습니다.&lt;/p&gt;
&lt;p&gt;매개변수로 주어진 수를 창문의 길이로 활용할 수 있다면, 해당 문제에서는 고정된 길이를 가진 슬라이딩 윈도우 패턴을 활용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;위에서 보여드렸던 &apos;예시: 슬라이딩 윈도우의 원리&apos;를 보시면 고정된 길이의 창문이 움직이고 있는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;고정된 길이가 주어지지 않거나, 오히려 길이가 변해야만 하는 경우도 슬라이딩 윈도우 패턴을 사용할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;예시: 슬라이딩 윈도우의 원리(창문의 길이가 변하는 경우)&lt;/p&gt;
&lt;p&gt;1회차: [&lt;code class=&quot;language-text&quot;&gt;1, 2&lt;/code&gt;, 3, 4, 5]&lt;/p&gt;
&lt;p&gt;2회차: [&lt;code class=&quot;language-text&quot;&gt;1, 2, 3&lt;/code&gt;, 4, 5]&lt;/p&gt;
&lt;p&gt;3회차: [&lt;code class=&quot;language-text&quot;&gt;1, 2, 3, 4&lt;/code&gt;, 5]&lt;/p&gt;
&lt;p&gt;4회차: [&lt;code class=&quot;language-text&quot;&gt;1, 2, 3, 4, 5&lt;/code&gt;]&lt;/p&gt;
&lt;p&gt;5회차: [1, &lt;code class=&quot;language-text&quot;&gt;2, 3, 4, 5&lt;/code&gt;]&lt;/p&gt;
&lt;p&gt;6회차: [1, 2, &lt;code class=&quot;language-text&quot;&gt;3, 4, 5&lt;/code&gt;]&lt;/p&gt;
&lt;p&gt;n회차 : ...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;창문의 길이가 변하는 경우는 창문을 늘리거나 줄일 수 있기 때문에, 조건에 따라서 다양한 경우의 수가 나올 수 있습니다.&lt;/p&gt;
&lt;p&gt;슬라이딩 윈도우 패턴은 문제에 따라서 정말 다양하게 구현할 수 있지만, 대표적인 경우로 &lt;code class=&quot;language-text&quot;&gt;&apos;창문의 고정적인 길이가 주어진 경우&apos;&lt;/code&gt; 그리고 &lt;code class=&quot;language-text&quot;&gt;&apos;창문의 길이가 변하는 경우&apos;&lt;/code&gt; 이렇게 두 가지 경우를 뽑을 수 있을 것 같습니다.&lt;/p&gt;
&lt;p&gt;따라서 이번 글에서는 위의 두 가지 경우를 기반으로 슬라이딩 윈도우 패턴의 일반적인 형태를 알아보고, 패턴을 적용해서 실제 코딩테스트 문제를 하나 풀어보도록 하겠습니다.&lt;/p&gt;
&lt;h3&gt;슬라이딩 윈도우 패턴의 일반적인 형태&lt;/h3&gt;
&lt;p&gt;위에서 살펴본 두 가지 경우의 일반적인 형태를 알아보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;대부분의 문제에 적용할 수 있도록 최대한 추상적으로 작성했으나, 적용하고자 하는 문제에 따라서 코드 작성 방법은 얼마든지 달라질 수 있습니다.&lt;/p&gt;
&lt;p&gt;슬라이딩 윈도우 패턴을 코드로 작성하면 대략 이런 형태를 가지는구나 정도로 봐주시면 될 것 같습니다.&lt;/p&gt;
&lt;h4&gt;창문의 고정적인 길이가 주어진 경우&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;slidingWindow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;// 1. 최종적으로 반환할 값을 할당할 변수 result를 선언합니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//    비교에 사용할 임시 변수 temp도 선언합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 2. 주어진 배열 arr의 길이가 창문의 길이 num보다 작을 경우를 처리할 코드를 작성합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 반드시 null을 반환해야하는 것은 아닙니다.&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 3. arr의 첫번째 요소부터 창문의 길이(num)에 포함되는 요소까지 연산을 진행합니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//    연산 결과를 result에 저장합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    result &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 4. 반복문의 연산 결과를 임시 변수 temp에 저장합니다.&lt;/span&gt;
  temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 5. 창문의 앞 부분은 잘라내고, 뒷 부분은 붙여서 창문을 이동시키면서 결과값을 찾습니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//    앞 부분을 잘라낸다 === temp - arr[i - num]&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//    뒷 부분을 붙인다 === + arr[i];&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; temp &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 상황에 따라 result 또는 temp를 저장합니다.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 6. 최종값 result를 반환합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;창문의 길이가 변하는 경우&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;slidingWindow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 1. 최종적으로 반환해야 할 값과, 임시로 저장할 값을 선언합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 2. 창문의 길이가 변하기 때문에, 창문의 시작과 끝에 해당하는 변수도 선언합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
  &lt;span class=&quot;token comment&quot;&gt;// 3. 반복문을 작성합니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//    반복문 종료 조건은 보통 start 인덱스가 배열의 끝에 도달하는 경우가 됩니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;반복문 종료 조건&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;// 4. 조건문을 작성합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//    문제에 따라 조건은 다양해지지만, 포함되어야 하는 연산은 아래와 같습니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;조건&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// end 인덱스에 해당하는 요소를 추가하고 end 인덱스를 증가시킵니다. (창문의 크기를 늘리는 연산)&lt;/span&gt;
      temp &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;end&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			end&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// start 인덱스에 해당하는 요소를 제거하고 start 인덱스를 증가시킵니다. (창문의 크기를 줄이는 연산)&lt;/span&gt;
			temp &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
			start&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;token comment&quot;&gt;// 이런 식으로 창문의 길이를 늘리고 줄여가며, start 인덱스가 배열의 끝에 도달했을 때 조건문은 종료됩니다.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
  &lt;span class=&quot;token comment&quot;&gt;// 4. 최종값을 반환합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;패턴의 적용&lt;/h3&gt;
&lt;p&gt;패턴을 배웠으니 실전에 적용해보려고 합니다.&lt;/p&gt;
&lt;p&gt;이번에도 프로그래머스에서 문제를 하나 가져왔습니다.&lt;/p&gt;
&lt;p&gt;이번에 준비한 문제는, 프로그래머스 코딩테스트 연습 Lv.0 문제 &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120956&quot;&gt;옹알이 (1)&lt;/a&gt;입니다.&lt;/p&gt;
&lt;p&gt;이번에도 역시 &lt;a href=&quot;https://ha-il.github.io/algorithm-study/2-week/&quot;&gt;저번 포스팅&lt;/a&gt;에서 배웠던 것처럼 문제 해결 접근법을 적용해서 풀어봤습니다.&lt;/p&gt;
&lt;p&gt;먼저 문제를 잠깐 보실까요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;머쓱이는 태어난 지 6개월 된 조카를 돌보고 있습니다. 
조카는 아직 &quot;aya&quot;, &quot;ye&quot;, &quot;woo&quot;, &quot;ma&quot; 
네 가지 발음을 최대 한 번씩 사용해 조합한(이어 붙인) 발음밖에 하지 못합니다. 
문자열 배열 babbling이 매개변수로 주어질 때, 
머쓱이의 조카가 발음할 수 있는 단어의 개수를 return하도록 solution 함수를 완성해주세요.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 문제를 조금 더 간결하게 설명하면, 주어진 문자열이 &quot;aya&quot;, &quot;ye&quot;, &quot;woo&quot;, &quot;ma&quot;로만 이뤄져 있는지를 판별하는 함수를 작성하라는 것입니다.&lt;/p&gt;
&lt;p&gt;저는 이 문제를 보자마자 슬라이딩 윈도우 패턴을 적용하면 풀 수 있을 것 같다는 생각이 들었습니다.&lt;/p&gt;
&lt;p&gt;예를 들어 &quot;yemawoo&quot;라는 문자열이 있다고 가정했을 때, 저는 아래와 같은 방식으로 문자열을 순회하면 문제를 풀 수 있을 것 같다고 생각했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1회차: &lt;code class=&quot;language-text&quot;&gt;y&lt;/code&gt;emawoo / 단어의 개수: 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2회차: &lt;code class=&quot;language-text&quot;&gt;ye&lt;/code&gt;mawoo / 단어의 개수: 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3회차: ye&lt;code class=&quot;language-text&quot;&gt;m&lt;/code&gt;awoo / 단어의 개수: 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4회차: ye&lt;code class=&quot;language-text&quot;&gt;ma&lt;/code&gt;woo / 단어의 개수: 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5회차: yema&lt;code class=&quot;language-text&quot;&gt;w&lt;/code&gt;oo / 단어의 개수: 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6회차: yema&lt;code class=&quot;language-text&quot;&gt;wo&lt;/code&gt;o / 단어의 개수: 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;7회차: yema&lt;code class=&quot;language-text&quot;&gt;woo&lt;/code&gt; / 단어의 개수: 3&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;슬라이딩 윈도우 패턴 중에서도 창문의 길이 변하는 경우를 활용하면 이 문제를 풀 수 있을 것 같았습니다.&lt;/p&gt;
&lt;p&gt;상세한 풀이는 아래 코드에서 설명드리겠습니다.&lt;/p&gt;
&lt;h4&gt;&apos;옹알이 (1)&apos;의 문제 해결 접근법 적용&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*
머쓱이는 태어난 지 6개월 된 조카를 돌보고 있습니다. 
조카는 아직 &quot;aya&quot;, &quot;ye&quot;, &quot;woo&quot;, &quot;ma&quot; 네 가지 발음을 최대 한 번씩 사용해 조합한(이어 붙인) 발음밖에 하지 못합니다. 
문자열 배열 babbling이 매개변수로 주어질 때, 머쓱이의 조카가 발음할 수 있는 단어의 개수를 return하도록 solution 함수를 완성해주세요.
*/&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* 문제 이해하기
- 이해
  - 배열 babbling의 요소인 문자열이 &quot;aya&quot;, &quot;ye&quot;, &quot;woo&quot;, &quot;ma&quot;의 조합으로만 이루어져 있는지 확인하기
  - 해당 문자열을 확인할 때 슬라이딩 윈도우 패턴을 사용하기.
- 인풋
  - babbling: 길이가 1~100인 배열
  - babbling[i]: 길이가 1~15인 문자열, 알파벳 소문자로만 이뤄져 있다.
- 아웃풋
  - answer: &quot;aya&quot;, &quot;ye&quot;, &quot;woo&quot;, &quot;ma&quot;의 조합으로만 이루어져 있는 문자열의 개수
- 네이밍
  - babbling: 인풋 배열
  - babbles: 조합 가능한 문자열의 배열
  - start: 배열의 첫 인덱스
  - answer: babbling 배열에서 babbles의 조합으로 이뤄져있는 요소의 개수
  - str: babbling에서 현재 탐색 중인 문자열
  - seen: str에서 탐색이 완료된 문자들을 문자열로 저장하는 변수
*/&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* 예시
조합 가능 문자열 &quot;aya&quot;, &quot;ye&quot;, &quot;woo&quot;, &quot;ma&quot;

[&quot;ayaye&quot;, &quot;uuuma&quot;, &quot;ye&quot;, &quot;yemawoo&quot;, &quot;ayaa&quot;] // 3
[&quot;aya&quot;, &quot;yee&quot;, &quot;u&quot;, &quot;maa&quot;, &quot;wyeoo&quot;] // 1
*/&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;babbling&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// &quot;aya&quot;, &quot;ye&quot;, &quot;woo&quot;, &quot;ma&quot;를 배열로 저장할 변수 babbles를 선언합니다.&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 최종적으로 반환해야할 값 answer를 선언하고 0을 할당합니다.&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// babbling을 순회하는 반복문을 작성하고, babbling의 요소는 str로 선언합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 창문의 시작에 해당하는 변수 start를 선언하고 0을 할당합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// str을 순회하는 반복문을 작성합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 반복문에 사용할 변수는 창문의 끝에 해당하는 end를 선언하고 0을 할당합니다.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// start와 end 범위의 문자열을 할당할 변수 seen을 선언합니다.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 조건문을 작성합니다.&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 만약 seen이 babbles에 해당되고 end가 str의 마지막 인덱스와 같은 값을 가진다면,&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;// str이 babbles의 조합으로 이뤄졌고 순회도 끝났다는 의미이므로&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;// answer에 값을 1 더해줍니다.&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 만약 seen이 babbles에 해당되지만 아직 str의 순회가 완료되지 않았다면&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;// start에 end + 1을 더해서 str을 마저 순회합니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// answer를 반환합니다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&apos;옹알이 (1)&apos;의 슬라이딩 윈도우 패턴 적용&lt;/h4&gt;
&lt;p&gt;패턴을 적용해서 코드를 작성했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;babbling&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; babbles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;aya&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ye&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;woo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ma&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; answer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; babbling&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; end&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; seen &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;babbles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;seen&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        answer &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;babbles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;seen&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; answer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ayaye&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;uuuma&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ye&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;yemawoo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ayaa&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;aya&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;yee&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;u&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;maa&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;wyeoo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 제출했더니 무사히 통과할 수 있었습니다.&lt;/p&gt;
&lt;h3&gt;추가: 분할과 정복 패턴&lt;/h3&gt;
&lt;p&gt;분할과 정복 패턴은 중요한 문제 해결 패턴이고, 앞으로 배울 탐색이나 정렬 알고리즘에도 많이 사용되는 패턴입니다.&lt;/p&gt;
&lt;p&gt;본격적으로 탐색과 정렬 알고리즘을 배우기 전에, 해당 알고리즘에 자주 사용되는 분할과 정복 패턴을 가볍게 훑어보고자 추가적으로 작성했습니다.&lt;/p&gt;
&lt;h4&gt;분할과 정복 패턴이란?&lt;/h4&gt;
&lt;p&gt;아래와 같이 오름차순으로 정렬된 배열이 있다고 가정해보겠습니다.&lt;/p&gt;
&lt;p&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/p&gt;
&lt;p&gt;이 배열에서 숫자 8을 찾을 수 있는 방법은 뭐가 있을까요?&lt;/p&gt;
&lt;p&gt;아마 가장 먼저 떠오르는 것은 이런 방법일지도 모르겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1회차: [&lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt;, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/li&gt;
&lt;li&gt;2회차: [1, &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt;, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/li&gt;
&lt;li&gt;3회차: [1, 2, &lt;code class=&quot;language-text&quot;&gt;3&lt;/code&gt;, 4, 5, 6, 7, 8, 9, 10]&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;li&gt;8회차: [1, 2, 3, 4, 5, 6, 7, &lt;code class=&quot;language-text&quot;&gt;8&lt;/code&gt;, 9, 10]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;배열의 처음부터 끝까지 순회하여 값을 찾는 방법도 지금은 괜찮아 보이지만,&lt;/p&gt;
&lt;p&gt;이 배열이 굉장히 길고, 내가 찾고자하는 값이 배열의 맨 뒤에 있다면 어떨까요?&lt;/p&gt;
&lt;p&gt;그렇다면 이 방법이 효율적이라고 보기는 좀 어려울 수 있습니다.&lt;/p&gt;
&lt;p&gt;이때 분할과 정복 패턴이 효율적인 문제 해결 방법으로 사용될 수 있습니다.&lt;/p&gt;
&lt;p&gt;분할과 정복 패턴은 아래와 같은 방식으로 배열을 순회하여 목표로 하는 값(8)을 찾아냅니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1회차: [1, 2, 3, 4, 5, &lt;code class=&quot;language-text&quot;&gt;6, 7, 8, 9, 10&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;2회차: [1, 2, 3, 4, 5, 6, 7, &lt;code class=&quot;language-text&quot;&gt;8, 9, 10&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;3회차: [1, 2, 3, 4, 5, 6, 7, &lt;code class=&quot;language-text&quot;&gt;8, 9&lt;/code&gt;, 10]&lt;/li&gt;
&lt;li&gt;4회차: [1, 2, 3, 4, 5, 6, 7, &lt;code class=&quot;language-text&quot;&gt;8&lt;/code&gt;, 9, 10]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;똑같이 8을 찾고 있지만, 연산 횟수가 줄어든 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이처럼 분할과 정복 패턴은 &lt;code class=&quot;language-text&quot;&gt;중간값&lt;/code&gt;을 가지고 데이터를 두 영역으로 분할합니다.&lt;/p&gt;
&lt;p&gt;그리고 원하는 값을 찾을 때까지 이 과정을 반복합니다.&lt;/p&gt;
&lt;h4&gt;분할과 정복 패턴의 형태&lt;/h4&gt;
&lt;p&gt;이런 분할과 정복 패턴에서 중요한 요소는 어떤 것이 있을까요?&lt;/p&gt;
&lt;p&gt;당연히 &lt;code class=&quot;language-text&quot;&gt;중간값&lt;/code&gt;이 중요한 요소일 것입니다.&lt;/p&gt;
&lt;p&gt;그러면 이런 중간값을 구하기 위해서는 또 어떤 요소가 필요할까요?&lt;/p&gt;
&lt;p&gt;중간이라는 것은 시작과 끝의 중간이라는 의미이기 때문에,&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;시작값&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;끝값&lt;/code&gt;이 필요할 것입니다.&lt;/p&gt;
&lt;p&gt;이 세 가지 값을 가지고 어떻게 분할과 정복 패턴을 코드로 작성할 수 있는지 소개하겠습니다.&lt;/p&gt;
&lt;p&gt;위에서 예시로 소개했던, 배열(arr)에서 원하는 숫자(val)를 찾아 그 숫자의 인덱스를 반환하는 search라는 함수를 작성해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; val&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 1. 시작값 start와 끝값 end를 선언하고, &lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//    배열의 시작 인덱스 0과 끝 인덱스 arr.length - 1을 각각 할당합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 2. 반복문을 작성합니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//    반복문은 start값이 end값보다 커지기 전까지는 계속 반복합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 3. 중간 값을 할당할 변수 middle을 선언하고, 중간값을 할당합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; middle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 4. arr[middle]과 val을 비교하여 세 가지 조건문을 작성합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;middle&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; val&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; middle &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;middle&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; val&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; middle &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 5. arr[middle]과 val가 같다면 middle값(val의 인덱스 값)을 반환합니다.&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; middle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 5. 반복문이 종료되었음에도 middle 값이 반환되지 않았다면&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//    해당 배열(arr)에 val이 없다는 의미이므로 -1을 반환합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;회고&lt;/h3&gt;
&lt;p&gt;프로그래머스의 옹알이1 문제는 제가 해당 사이트에서 가장 처음 접했던 코딩 테스트 문제였습니다.&lt;/p&gt;
&lt;p&gt;이 문제를 처음 접했을 때는 어떻게 접근해야할지 감도 안 잡혔고, 중첩 반복문은 커녕 중첩에 중첩에 중첩을 시켜서 문제를 풀려고 했었고 결국 포기했던 기억도 납니다.&lt;/p&gt;
&lt;p&gt;문제 해결 패턴에 대해서 공부를 하고 문제를 다시 풀어보니, 예전과는 확실히 달라진 저를 느낄 수 있었습니다.&lt;/p&gt;
&lt;p&gt;아직 알고리즘이나 자료구조를 많이 배운 것도 아니지만, 어렵게 보이던 문제들이 하나 둘씩 풀려나가는 것을 보면 신기하다는 느낌이 듭니다.&lt;/p&gt;
&lt;p&gt;앞으로 배워야 할 것들이 많은데, 이런 것들을 배우면 더 어려운 문제도 풀 수 있을 것 같다는 기대가 되면서 설레는 마음도 조금은 드는 것 같습니다.&lt;/p&gt;
&lt;p&gt;오늘 글은 여기서 마치겠습니다.&lt;/p&gt;
&lt;p&gt;감사합니다.&lt;/p&gt;
&lt;h3&gt;참고자료&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로그래머스 코딩 테스트 연습 - 옹알이 (1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;문제 링크: &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120956&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120956&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best JavaScript Data Structures &amp;#x26; Algorithms Course by Udemy, last updated January 2022, accessed April 5, 2023&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;강의 링크: &lt;a href=&quot;https://www.udemy.com/course/best-javascript-data-structures/&quot;&gt;https://www.udemy.com/course/best-javascript-data-structures/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[다중 포인터(Multiple pointers) 패턴]]></title><description><![CDATA[문제 해결 패턴 - 다중 포인터(Multiple pointers…]]></description><link>https://ha-il.github.io/algorithm-study/4-week/</link><guid isPermaLink="false">https://ha-il.github.io/algorithm-study/4-week/</guid><pubDate>Mon, 24 Apr 2023 17:06:00 GMT</pubDate><content:encoded>&lt;h2&gt;문제 해결 패턴 - 다중 포인터(Multiple pointers)&lt;/h2&gt;
&lt;p&gt;이번에는 &lt;a href=&quot;https://ha-il.github.io/algorithm-study/3-week/&quot;&gt;지난 포스팅&lt;/a&gt;에 이어서 또다른 문제 해결 패턴을 소개하겠습니다.&lt;/p&gt;
&lt;p&gt;이번에 소개할 패턴은 다중 포인터 패턴입니다.&lt;/p&gt;
&lt;p&gt;인덱스나 위치에 해당하는 포인터를 여러 개 만들어서 조건에 따라 포인터를 이동하여 문제를 해결하는 패턴입니다.&lt;/p&gt;
&lt;p&gt;배열을 예로 들면, 배열 인덱스의 시작과 끝을 포인터로 설정하고 서로를 향해 이동하는 방식으로 포인터를 이동하는 것입니다.&lt;/p&gt;
&lt;p&gt;또는 배열의 첫번째와 두번째 인덱스를 포인터로 설정할 수도 있습니다.&lt;/p&gt;
&lt;p&gt;이처럼 포인터의 개수나 이동 방향은 조건에 따라 달라질 수 있기 때문에 다중 포인터 패턴은 다양하게 작성될 수 있지만,&lt;/p&gt;
&lt;p&gt;다중포인터 패턴을 적용할 수 있는 대표적인 상황 두 가지를 아래에 예시와 함께 소개해볼까 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;예시&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;서로 더하면 0이 되는 쌍을 찾는 경우&lt;/p&gt;
&lt;p&gt;배열 인덱스의 시작과 끝을 포인터로 설정하여 문제를 해결할 수 있습니다.&lt;/p&gt;
&lt;p&gt;[ &lt;code class=&quot;language-text&quot;&gt;-3&lt;/code&gt;, -2, -1, 0, 1, 2, &lt;code class=&quot;language-text&quot;&gt;3&lt;/code&gt; ]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;고유한 숫자의 개수를 찾는 경우&lt;/p&gt;
&lt;p&gt;배열의 첫번째와 두번째 인덱스를 포인터로 설정하여 문제를 해결할 수 있습니다.&lt;/p&gt;
&lt;p&gt;(이 경우는 &lt;a href=&quot;https://ha-il.github.io/algorithm-study/3-week/&quot;&gt;지난 포스팅&lt;/a&gt;에서 다뤘던 빈도수 세기 패턴을 사용할 수도 있습니다.)&lt;/p&gt;
&lt;p&gt;[ &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt;, 2, 3, 3, 3 ]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 예시들을 기반으로 다중 포인터 패턴의 일반적인 형태를 알아봅시다.&lt;/p&gt;
&lt;h3&gt;다중 포인터 패턴의 일반적인 형태&lt;/h3&gt;
&lt;p&gt;위에서 예시로 살펴본 두 가지 경우를 다중 포인터 패턴으로 어떻게 풀어내는지 소개하겠습니다.&lt;/p&gt;
&lt;p&gt;아래 소개하는 형태는 어디까지나 뼈대일 뿐, 주어진 상황에 따라 달라질 수 있습니다.&lt;/p&gt;
&lt;p&gt;참고로, 다중 포인터 패턴은 패턴을 사용할 배열이나 문자열이 어떤 규칙으로 &lt;code class=&quot;language-text&quot;&gt;정렬&lt;/code&gt;되어있는 상태일 때 유효합니다.&lt;/p&gt;
&lt;p&gt;정렬되어 있지 않다면 포인터의 이동이 큰 의미를 가지지 못하기 때문입니다.&lt;/p&gt;
&lt;h4&gt;배열 인덱스의 시작과 끝을 포인터로 설정하는 경우&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;multiplePointer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 1. 배열 인덱스의 시작과 끝을 값으로 갖는 변수 start와 end를 선언하고 값을 할당합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 2. 반복문을 작성합니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//    반복문 종료 조건은 보통 start 인덱스와 end 인덱스가 만나는 경우가 됩니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;반복문 종료 조건&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 3. 조건문을 작성합니다. 보통 3가지 조건이 포함됩니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//    - 조건 1: 값 또는 true를 반환&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//    - 조건 2: start값 증가&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//    - 조건 3: end값 감소&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 4. 반복문을 시행했음에도 값이 반환되지 않은 경우 최종적으로 false를 반환합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;배열의 첫번째와 두번째 인덱스를 포인터로 설정하는 경우&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;countUniqueValues&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 1. 배열 첫번째 요소와 두번째 요소의 인덱스 값을 갖는 변수 start와 next를 선언하고 값을 할당합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; next &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 2. 반복문을 작성합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//    반복문의 종료 조건은 보통 두번째 요소가 배열의 끝에 도달하는 경우가 됩니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;반복문 종료 조건&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 3. 조건문을 작성합니다. 보통 3가지 조건이 포함됩니다.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//    - 조건 1: 값 또는 true를 반환&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//    - 조건 2: next값 증가&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//    - 조건 3: start값 증가&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 4. 반복문을 시행했음에도 값이 반환되지 않은 경우 최종적으로 false를 반환합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;다중 포인터 패턴의 적용&lt;/h3&gt;
&lt;p&gt;패턴을 배웠으니 실전에 적용해보려고 합니다.&lt;/p&gt;
&lt;p&gt;이번에도 프로그래머스에서 문제를 하나 가져왔습니다.&lt;/p&gt;
&lt;p&gt;이번에 준비한 문제는, 프로그래머스 코딩테스트 연습 Lv.1 문제 &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/12935&quot;&gt;&apos;제일 작은 수 제거하기&apos;&lt;/a&gt;입니다.&lt;/p&gt;
&lt;p&gt;이번에도 역시 &lt;a href=&quot;https://ha-il.github.io/algorithm-study/2-week/&quot;&gt;저번 포스팅&lt;/a&gt;에서 배웠던 것처럼 문제 해결 접근법을 적용해서 풀어봤습니다.&lt;/p&gt;
&lt;p&gt;참고로, 이 문제는 다중 포인터 패턴을 사용하는 것이 최적의 풀이는 아닌 것으로 판단됩니다.&lt;/p&gt;
&lt;p&gt;이번에 학습한 패턴을 코딩테스트에 적용해보는 것에 의의를 두고 풀이를 작성해봤습니다.&lt;/p&gt;
&lt;p&gt;상세한 풀이는 아래 코드에서 설명드리겠습니다.&lt;/p&gt;
&lt;h4&gt;&apos;제일 작은 수 제거하기&apos;의 문제 해결 접근법 적용&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*
정수를 저장한 배열, arr 에서 가장 작은 수를 제거한 배열을 리턴하는 함수, solution을 완성해주세요. 
단, 리턴하려는 배열이 빈 배열인 경우엔 배열에 -1을 채워 리턴하세요. 
예를들어 arr이 [4,3,2,1]인 경우는 [4,3,2]를 리턴 하고, [10]면 [-1]을 리턴 합니다.
*/&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* 문제 이해하기
- 이해
  - 주어진 배열에서 가장 작은 수를 먼저 찾는다.
  - 작은 수를 찾을 때 다중 포인터 패턴을 사용한다.
  - 찾아서 배열에서 제거후 해당 배열을 다시 반환한다.
- 인풋: 길이 1 이상인 배열 
- 아웃풋: 최솟값인 원소를 제외한 배열 또는 [-1]
- 예외 상황
  - 빈 배열 일때는 [-1]을 반환한다.
  - 만약에 최솟값을 갖는 요소가 여러개면 로직이 바뀔까?
- 네이밍
  - arr: 인풋 배열
  - sortedArr: 인풋 배열을 정렬한 배열
  - start: 배열의 첫 인덱스
  - end: 배열의 마지막 인덱스 
  - minValue: 배열의 최솟값
  - minValueIndex: 최솟값의 인덱스로 배열 복사본에서 최솟값의 인덱스를 저장하기 위해 사용한다.
*/&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* 예시
[4,3,2,1] // [4,3,2] (프로그래머스 예시)
[10] // [-1] (프로그래머스 예시)
*/&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 배열의 길이가 1이라면 최솟값을 구할 필요가 없으므로 [-1]을 리턴한다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 원본 배열을 복사한다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 다중 포인터 패턴을 사용할 것이기 때문에 배열을 정렬한다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 배열의 처음과 마지막 인덱스 값을 할당할 변수 start와 end를 선언한다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 값의 최솟값을 저장할 변수 minValue를 선언하고 0을 할당한다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 반복문을 작성한다.&lt;/span&gt;
  
    &lt;span class=&quot;token comment&quot;&gt;// 반복문은 start값과 end값이 같아지면 중단한다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// start와 end의 값을 비교한다.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 조건 1: start 값과 end 값이 같다면&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// minValue에 arr[start] 값을 대입한다.&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 반복문을 종료하기 위해 start 값을 1 증가시킨다.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 조건 2: start값이 end값보다 더 작다.&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// end 값을 1 감소시킨다.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 조건 3: end값이 start값보다 더 작다.&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// start 값을 1 증가시킨다.&lt;/span&gt;
      
  &lt;span class=&quot;token comment&quot;&gt;// 원본 배열의 복사본에서 minValue의 인덱스를 구해서 minValueIndex 변수에 초기화한다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// minValueIndex를 이용해서 원본 배열 복사본에서 최소값을 삭제한다. &lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&apos;제일 작은 수 제거하기&apos;의 다중 포인터 패턴 적용&lt;/h4&gt;
&lt;p&gt;다중 포인터 패턴을 적용해서 코드를 작성했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; originalArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; minValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      minValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      start&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;end&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      end&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      start&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; minValueIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; originalArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  originalArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minValueIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; originalArray&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 제출했더니 무사히 통과할 수 있었습니다.&lt;/p&gt;
&lt;h3&gt;회고&lt;/h3&gt;
&lt;p&gt;이번 다중 포인터 패턴의 경우 생각보다 해당 패턴을 적용할만한 코딩테스트 문제를 찾는데에 애를 많이 먹었습니다.&lt;/p&gt;
&lt;p&gt;다중 포인터 패턴 하나만으로 풀 수 있는 문제보다는, 다중 포인터 패턴이 다른 문제 해결 패턴의 구성요소가 되는 경우가 많았던 것 같습니다.&lt;/p&gt;
&lt;p&gt;다중 포인터 패턴을 사용하면서 한 가지 고민이 있다면, 다중 포인터 패턴으로 코드를 작성하는 경우 명령형으로 코딩이 되기 쉬워서,&lt;/p&gt;
&lt;p&gt;조금 더 선언형으로 코딩을 할 수 있게 방법을 강구해봐야할 것 같습니다.&lt;/p&gt;
&lt;h3&gt;참고자료&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로그래머스 코딩 테스트 연습 - 제일 작은 수 제거하기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;문제 링크: &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/12935&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/12935&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best JavaScript Data Structures &amp;#x26; Algorithms Course by Udemy, last updated January 2022, accessed April 5, 2023&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;강의 링크: &lt;a href=&quot;https://www.udemy.com/course/best-javascript-data-structures/&quot;&gt;https://www.udemy.com/course/best-javascript-data-structures/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[빈도수 세기(Frequency counters) 패턴]]></title><description><![CDATA[문제 해결 패턴 - 빈도수 세기(Frequency counters…]]></description><link>https://ha-il.github.io/algorithm-study/3-week/</link><guid isPermaLink="false">https://ha-il.github.io/algorithm-study/3-week/</guid><pubDate>Thu, 20 Apr 2023 12:53:00 GMT</pubDate><content:encoded>&lt;h2&gt;문제 해결 패턴 - 빈도수 세기(Frequency counters)&lt;/h2&gt;
&lt;p&gt;이번 글부터는 문제 해결 패턴을 차례대로 소개해볼까 합니다.&lt;/p&gt;
&lt;p&gt;먼저 오늘은 &apos;빈도수 세기&apos;라는 문제 해결 패턴에 대해서 글을 작성해보겠습니다.&lt;/p&gt;
&lt;h3&gt;빈도수 세기 패턴은 무엇인가?&lt;/h3&gt;
&lt;p&gt;빈도수 세기 패턴은 자바스크립트의 객체를 이용하여 다양한 값과 빈도를 수집해서 문제를 해결하는 패턴입니다.&lt;/p&gt;
&lt;p&gt;이 패턴을 언제 어떻게 사용할 수 있을까요?&lt;/p&gt;
&lt;p&gt;아래와 같이 두개의 배열이 있다고 생각해봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arr1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arr2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저 두 배열이 서로 같은 요소를 가지고 있는지 확인하려면 어떻게 해야할까요?&lt;/p&gt;
&lt;p&gt;가장 단순한 방법은 각 배열의 요소를 순회하는 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;arr1&lt;/code&gt;의 요소 &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt;이 &lt;code class=&quot;language-text&quot;&gt;arr2&lt;/code&gt;에도 있는지 확인하는 것이지요.&lt;/p&gt;
&lt;p&gt;하지만 그렇게 문제를 해결할 경우, 그 문제 해결 방법은 중첩된 반복문 사용하게 될 가능성이 높습니다.&lt;/p&gt;
&lt;p&gt;중첩된 반복문은 시간 복잡도가 n²이기 때문에 성능이 좋지 않습니다.&lt;/p&gt;
&lt;p&gt;중첩된 반복문을 사용하지 않고, 아래와 같이 요소의 종류와 빈도를 셀 수 있다면 어떨까요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arr1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arr2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/*
arr1 = {    arr2 = {
  &apos;1&apos;: 1      &apos;1&apos;: 1
  &apos;2&apos;: 1      &apos;2&apos;: 1
  &apos;3&apos;: 1      &apos;4&apos;: 1
}           }
*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;각 배열에 반복문을 시행해서 요소의 종류와 빈도를 센다면, 중첩된 반복문을 피할 수 있을 것입니다.&lt;/p&gt;
&lt;p&gt;똑같이 2개의 반복문을 사용하지만, 중첩시키지 않고 독립적으로 사용하면 시간 복잡도를 줄일 수 있습니다.&lt;/p&gt;
&lt;h3&gt;빈도수 세기 패턴의 일반적인 형태&lt;/h3&gt;
&lt;p&gt;빈도수 세기 패턴은 어떻게 작성할 수 있을까요?&lt;/p&gt;
&lt;p&gt;해결해야하는 문제에 따라 다르겠지만, 일반적으로 아래와 같은 형태를 가집니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;frequencyCounter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 두 배열의 길이가 다를 경우 빈도수도 다르기 때문에 빠르게 false를 반환합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; arr2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;// 각 배열 요소의 빈도수를 저장할 객체를 생성합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; frequencyCounter1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; frequencyCounter2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token comment&quot;&gt;// 각 배열 요소를 프로퍼티의 키로 저장하고, 빈도수를 값으로 저장합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; val &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; arr1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      frequencyCounter1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;val&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frequencyCounter1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;val&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; val &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; arr2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      frequencyCounter2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;val&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frequencyCounter2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;val&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;        
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 객체의 프로퍼티를 비교합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; key &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; frequencyCounter1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;// 먼저 프로퍼티의 키를 비교하여, 서로의 객체에 같은 키가 있는지 확인합니다. &lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; frequencyCounter2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 각 프로퍼티의 값을 비교하여, 빈도수가 같은지 확인합니다.&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frequencyCounter2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; frequencyCounter1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 두 배열의 요소들은 그 종류와 빈도수가 같다는 것이 증명되었기 때문에 true를 반환합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;특히, 객체의 프로퍼티를 비교하는 부분은, 해결해야하는 문제에 따라 if문의 조건을 다르게 설정할 수 있습니다.&lt;/p&gt;
&lt;p&gt;적지 않은 반복문을 사용하지만, 반복문을 중첩하지 않았기 때문에, 시간 복잡도는 n이므로 n²에 비하여 성능이 좋습니다.&lt;/p&gt;
&lt;h3&gt;빈도수 세기 패턴의 적용&lt;/h3&gt;
&lt;p&gt;패턴을 배웠는데 적용하지 못하면 의미가 없겠죠?&lt;/p&gt;
&lt;p&gt;이번에도 프로그래머스에서 문제를 하나 가져왔습니다.&lt;/p&gt;
&lt;p&gt;이번에 준비한 문제는, 프로그래머스 코딩테스트 연습 Lv.1 문제 &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/12916&quot;&gt;&apos;문자열 내 p와 y의 개수&apos;&lt;/a&gt;입니다.&lt;/p&gt;
&lt;p&gt;이번에도 역시 &lt;a href=&quot;https://ha-il.github.io/algorithm-study/2-week/&quot;&gt;저번 포스팅&lt;/a&gt;에서 배웠던 것처럼 문제 해결 접근법을 적용해서 풀어봤습니다.&lt;/p&gt;
&lt;p&gt;상세한 풀이는 아래 코드에서 설명드리겠습니다.&lt;/p&gt;
&lt;h4&gt;&apos;문자열 내 p와 y의 개수&apos;의 문제 해결 접근법 적용&lt;/h4&gt;
&lt;p&gt;문제를 풀기 전에, 먼저 문제 해결 접근법을 적용해봤습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* 문제
대문자와 소문자가 섞여있는 문자열 s가 주어집니다. 
s에 &apos;p&apos;의 개수와 &apos;y&apos;의 개수를 비교해 같으면 True, 다르면 False를 return 하는 solution를 완성하세요. 
&apos;p&apos;, &apos;y&apos; 모두 하나도 없는 경우는 항상 True를 리턴합니다. 
단, 개수를 비교할 때 대문자와 소문자는 구별하지 않습니다.
*/&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* 문제 이해하기
- 이해
  - 받은 문자열을 알파벳 소문자로 바꾸고, 
  - p와 y의 개수를 세고,
  - 개수를 비교한 다음 결과를 불리언으로 반환하면 되겠다.
- 인풋: 알파벳으로만 이루어진, 50 이하의 자연수 길이를 가진 문자열
- 아웃풋: 불리언
- 네이밍
  - string 인풋 문자열
  - lowercaseString 인풋 문자열을 소문자로 변환한 값
  - charCounter 문자열의 문자의 개수를 저장할 객체
*/&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* 예시
solution(&quot;pPoooyY&quot;) // true
solution(&quot;Pyy&quot;) // false
*/&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// string의 알파벳을 모두 소문자로 바꿉니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// charCounter를 선언하고 빈 객체를 할당합니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 객체 charCounter에 string의 각 문자인 char에 대해 반복문을 실행합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// charCounter[char]가 존재하지 않으면 charCounter[char]에 0을, 존재하면 +1 값을 할당합니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// charCounter[&apos;p&apos;]와  charCounter[&apos;y&apos;]의 값을 비교합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 거짓이면 false를 반환합니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 위의 과정을 모두 통과했다면 true를 반환합니다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&apos;문자열 내 p와 y의 개수&apos;의 빈도수 세기 패턴 적용&lt;/h4&gt;
&lt;p&gt;빈도수 세기 패턴을 적용해서 코드를 작성했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; lowercaseString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; charCounter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; char &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; lowercaseString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    charCounter&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;char&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;charCounter&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;char&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;charCounter&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; charCounter&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 제출했더니 무사히 통과할 수 있었습니다.&lt;/p&gt;
&lt;h3&gt;회고&lt;/h3&gt;
&lt;p&gt;빈도수 세기 패턴을 배우기 전에 나라면 이 문제를 어떻게 풀었을지 생각해봤습니다.&lt;/p&gt;
&lt;p&gt;한번의 순회로 끝나면 될 것을 p의 개수를 찾기 위해 한 번, y의 개수를 찾기 위해 한 번, 이렇게 두 번씩이나 순회하는 코드를 짜지 않았을까 싶습니다.&lt;/p&gt;
&lt;p&gt;그리고 각각의 값을 할당하기 위해 임시 변수를 또 선언했을지도 모르겠습니다.&lt;/p&gt;
&lt;p&gt;그렇게 문제를 풀 수도 있고, 또 그렇게 나쁘지 않을 방법일지도 모르겠습니다만,&lt;/p&gt;
&lt;p&gt;그런 코드는 정말 p와 y의 개수만을 구할 수 있는 확장성이 떨어지는 코드일 것입니다.&lt;/p&gt;
&lt;p&gt;빈도수 세기 패턴은 대체로 모든 요소의 빈도수를 세기 때문에, p와 y 이외의 문자의 개수도 구할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이렇게 구한 값들을 단순 비교할 수도 있고, 조건을 부여해서 비교할 수도 있는 등, 빈도수 세기 패턴은 다양한 상황에서 유용하게 쓰일 수 있을 것 같습니다.&lt;/p&gt;
&lt;p&gt;공부한 패턴으로 문제를 풀 수 있게 되니 얼른 다른 문제를 풀어보고 싶기도 하고, 다른 문제 해결 패턴을 공부해보고 싶다는 생각도 들었습니다.&lt;/p&gt;
&lt;h3&gt;참고자료&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로그래머스 코딩 테스트 연습 - 문자열 내 p와 y의 개수&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;문제 링크: &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/12916&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/12916&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best JavaScript Data Structures &amp;#x26; Algorithms Course by Udemy, last updated January 2022, accessed April 5, 2023&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;강의 링크: &lt;a href=&quot;https://www.udemy.com/course/best-javascript-data-structures/&quot;&gt;https://www.udemy.com/course/best-javascript-data-structures/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[문제 해결 접근법]]></title><description><![CDATA[…]]></description><link>https://ha-il.github.io/algorithm-study/2-week/</link><guid isPermaLink="false">https://ha-il.github.io/algorithm-study/2-week/</guid><pubDate>Wed, 12 Apr 2023 17:20:00 GMT</pubDate><content:encoded>&lt;h2&gt;문제 해결 접근법&lt;/h2&gt;
&lt;p&gt;이번 글에서는 문제 해결 접근법에 대해서 다뤄보겠습니다.&lt;/p&gt;
&lt;p&gt;문제 해결 접근법이란 무엇일까요?&lt;/p&gt;
&lt;p&gt;코딩 테스트 문제가 하나 있다고 가정해봅시다.&lt;/p&gt;
&lt;p&gt;문제를 읽자마자 바로 풀이에 들어갈 수도 있겠지만,&lt;/p&gt;
&lt;p&gt;이 문제를 해결해기 위해서 문제에 어떻게 접근할 것인지 나름의 계획이나 전략을 세워볼 수도 있을 것입니다.&lt;/p&gt;
&lt;p&gt;이번 글에서는 이러한 행위를 &apos;문제 해결 접근법&apos;이라 정의하고, 실제 코딩테스트 문제를 풀어보면서 문제 해결 접근법을 적용해보겠습니다.&lt;/p&gt;
&lt;h3&gt;문제 해결 접근법의 5단계&lt;/h3&gt;
&lt;p&gt;코딩테스트 문제를 살펴보기 전에, 문제 해결 접근법과 각 단계를 간단히 소개하고 가겠습니다.&lt;/p&gt;
&lt;p&gt;문제 해결 접근법은 총 5단계로 이뤄져 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1. Understand the Problem: 문제 이해

2. Explore Examples: 예시 탐구

3. Break It Down: 분석

4. Solve or Simplify: 해결/단순화

5. Look Back &amp;amp; Refactor: 회고와 리팩터링&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;각 단계의 세부사항을 알아보겠습니다.&lt;/p&gt;
&lt;h4&gt;1. Understand the Problem: 문제 이해&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;내 방식으로 이해하기&lt;/code&gt;: 그 문제를 내 방식대로 다시 생각할 수 있는가?&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;입력값 파악하기&lt;/code&gt;: 문제에 들어있는 입력 정보는 무엇인가?&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;출력값 파악하기&lt;/code&gt;: 문제 해결에서 도출해야 할 결과는 무엇인가?&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;예외상황 파악하기&lt;/code&gt;: 입력값이 출력값을 결정할 수 있는가? 즉, 문제를 해결할 수 있는 충분한 정보를 가지고 있는가?&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;네이밍 파악하기&lt;/code&gt;: 문제의 일부인 중요한 데이터에 어떻게 레이블(이름)을 지정해야 하는가?&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;2. Explore Examples: 예시 탐구&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;간단한 예시 만들기&lt;/code&gt;: 입력값과 출력값의 순서대로 예시를 작성해보기&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;더 복잡한 예시 만들기&lt;/code&gt;: (예: 문자열을 입력받는 상황이라면, 공백이나 기호는 어떻게 처리할 것인가?)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;예외 상황을 고려한 예시 만들기&lt;/code&gt; : (예: 빈 입력값, 유효하지 않은 입력값은 어떻게 처리할 것인가?)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;3. Break It Down: 문제 세분화하기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;문제를 세분화하고, 문제 해결의 뼈대를 잡는 과정.&lt;/li&gt;
&lt;li&gt;문제 해결에 필요한 요소와 과정을 적어본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4. Solve or Simplify: 해결하거나 단순화하기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;문제 세분화 단계에서 적었던 문제 해결 과정대로 문제를 해결한다.&lt;/li&gt;
&lt;li&gt;어려운 부분에 막혀서 문제가 해결되지 않는다면?
&lt;ul&gt;
&lt;li&gt;일단 그 부분을 무시하고, 풀 수 있는 단순한 부분을 먼저 작성한다.&lt;/li&gt;
&lt;li&gt;그런 다음 어려운 부분을 다시 해결해보고, 해결됐다면 기존 코드와 통합한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5. Look Back &amp;#x26; Refactor: 회고와 리팩터링&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;문제 해결 후, 다음과 같은 질문을 해본다.
&lt;ul&gt;
&lt;li&gt;결과를 다르게 도출할 수 있는가?&lt;/li&gt;
&lt;li&gt;해결책이 직관적인가?&lt;/li&gt;
&lt;li&gt;결과나 방법을 다른 문제에 사용할 수 있는가?&lt;/li&gt;
&lt;li&gt;해결책의 성능을 개선할 수 있는가?&lt;/li&gt;
&lt;li&gt;다른 리팩터링 방법을 생각해 낼 수 있는가?&lt;/li&gt;
&lt;li&gt;다른 사람들은 이 문제를 어떻게 해결했는가?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;문제 해결 접근법으로 코딩 테스트 문제를 풀어보자&lt;/h3&gt;
&lt;p&gt;이제 본격적으로 문제 해결 접근법을 적용하여 코딩 테스트 문제를 풀어보겠습니다.&lt;/p&gt;
&lt;p&gt;문제 해결보다도 문제 해결 접근법을 적용하는 것에 목적이 있기 때문에, 쉬운 난이도의 문제를 준비했습니다.&lt;/p&gt;
&lt;p&gt;이번에 준비한 문제는, 프로그래머스 코딩테스트 연습 Lv.0 문제 &apos;연속된 수의 합&apos;입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;문제:

연속된 세 개의 정수를 더해 12가 되는 경우는 3, 4, 5입니다. 
두 정수 num과 total이 주어집니다. 
연속된 수 num개를 더한 값이 total이 될 때, 
정수 배열을 오름차순으로 담아 return하도록 solution함수를 완성해보세요.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;문제 이해&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*
1. 문제 이해
    - 내 방식으로 이해하기
      - 합한 값이 total과 같은 연속된 정수 num개를 오름차순으로 정렬하여 배열로 반환하라.
      - 중간 값을 구한 다음에 중간 값 앞 뒤로 +1, -1을 값을 추가하면 되지 않을까?
    - 입력값 파악하기:
        - 1 ≤ num ≤ 100
        - 0 ≤ total ≤ 1000
    - 출력값 파악하기
        - result: [Number:정수]
    - 예외상황 파악하기
        - 입력값인 num과 total의 타입과 범위가 한정되어있기 때문에 다른 타입에 대해서는 고려하지 않음.
    - 네이밍 파악하기
        - num: 연속된 정수의 갯수
        - total: 연속된 정수의 num개를 더한 값
        - middleValue: total을 num으로 나눈 값으로 소숫점 밑 부분은 버린다.
        - result: 연속된 정수 num개를 오름차순 정렬한 배열
*/&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; total&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; answer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; answer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;예시 탐구&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*
2. 예시 탐구
    - 간단한 예시 만들기
        - 입력값과 출력값의 배열 요소가 전부 양수인 경우
            - solution(3, 12) // [3, 4, 5]
    - 복잡한 예시 만들기
        - 출력 값의 배열 요소에 음수가 포함되는 경우
            - solution(5, 5) // [-1, 0, 1, 2, 3]
*/&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; total&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;문제 세분화 하기&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; total&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// result를 빈 배열로 초기화합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 변수 middleValue를 선언합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// middleValue에 다음 값을 할당합니다&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// total을 num으로 나누고, 소숫점 밑 부분은 버림&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// result에 middleValue를 push합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// result의 length가 num과 같아질 때까지 아래 코드를 반복합니다.&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 홀수 번째: middleValue + i을 push 합니다.&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// 짝수 번째: middleValue - i을 unshift 합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// result를 반환합니다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;해결 or 단순화&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; total&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// result를 빈 배열로 초기화합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 변수 middleValue를 선언합니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// middleValue에 다음 값을 할당합니다&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// total을 num으로 나누고 소숫점 밑 부분은 버림&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; middleValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;total &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// result에 middleValue를 push합니다.&lt;/span&gt;
  result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;middleValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// result의 length가 num과 같아질 때까지 아래 코드를 반복합니다&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 홀수 번째: middleValue + i을 push 합니다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      middleValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; middleValue &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;middleValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 짝수 번째: middleValue - i을 unshift 합니다.&lt;/span&gt;
      middleValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; middleValue &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;middleValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// result를 반환합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;제출후 채점까지 통과했으나, 여전히 아쉬운 점이 많은 코드입니다.&lt;/p&gt;
&lt;h4&gt;회고&lt;/h4&gt;
&lt;p&gt;제출 후 아쉬웠던 점 세 가지를 꼽아봤습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;내 풀이에서 아쉬웠던 점

1. 등차수열과 관련된 문제라서, 이 문제에 적용할 수 있는 수학 공식이 있을 것이다. 검색해서 찾아보자.
  - 공식을 적용하면 코드를 더 단순화시킬 수 있을 것 같다.

2. result와 middleValue라는 임시변수 없이 작성해보자.
  - 임시 변수가 많으면 명령형 프로그래밍이 될 가능성이 높고, 
    임시 변수의 조작으로 부수효과가 발생해 함수 동작의 예측이 어려워진다.

3. 명령형으로 작성이 되었는데, 선언형으로 다시 작성해보자.
  - 명령형으로 작성된 코드는 값을 예측하기가 어렵다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;리팩터링&lt;/h4&gt;
&lt;p&gt;제가 꼽았던 세 가지 아쉬웠던 점을 바탕으로 코드를 리팩터링 해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*
1. 등차수열과 관련된 문제라서, 이 문제에 적용할 수 있는 수학 공식이 있을 것이다. 검색해서 찾아보자.
  - 등차수열의 합을 구하는 공식이 있다.
  - 초항부터 n번째 항까지의 합을 S𝗇이라고 할 때.
  - S𝗇 = n(a₁ + a𝗇) / 2
       = n{2a₁ + (n-1)d} / 2 
*/&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; total&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// result를 빈 배열로 초기화합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 반환될 배열의 첫번째 숫자를 구합니다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 첫 번째 숫자(x) 구하는 방법&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// x + (x + 1) + ... + (x + num - 1) = total&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// (num * x) + (1 + 2 + ... + (num - 1)) = total&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// (num * x) + {(num - 1) * num} / 2 = total&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// x = (2 * total / num - num + 1) / 2&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 첫 번째 숫자를 firstNumber에 위 공식을 넣어서 초기화합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; firstNumber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; total&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 첫 번째 숫자부터 num - 1 번째 숫자까지 배열에 추가합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;firstNumber &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// result를 반환합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;등차수열의 합을 구하는 공식을 이용해 코드가 조금 더 단순해졌습니다.&lt;/p&gt;
&lt;p&gt;다음은 임시변수를 최대한 없애고 선언형에 가깝게 작성해보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*
2. result와 middleValue라는 임시변수 없이 작성해보자.
3. 명령형으로 작성이 되었는데, 선언형으로 다시 작성해보자.
*/&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; total&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; firstNumber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; total&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;firstNumber&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; firstNumber &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;result 임시변수를 없애고, 반환해야할 값을 바로 반환하도록 작성했습니다.&lt;/p&gt;
&lt;p&gt;배열 고차함수를 활용하여 선언형에 조금 더 가깝게 작성해봤습니다.&lt;/p&gt;
&lt;h3&gt;문제 해결 접근법 적용 회고&lt;/h3&gt;
&lt;p&gt;예전에는 이렇게 계획을 세우기보다는, 문제를 해결할 수 있는 핵심 로직이 떠오르면 일단 그것부터 작성했었습니다.&lt;/p&gt;
&lt;p&gt;제가 이번에 풀었던 문제를 예로 들면, 바로 middleValue를 구하는 로직을 작성하고, 나머지 코드를 붙여가는 식으로 작성했다는 뜻입니다.&lt;/p&gt;
&lt;p&gt;그렇게 문제가 풀리면 다행이지만, 그 로직으로 문제가 풀리지 않을 때는 어디서부터 손을 대야할지 모른 채 로직을 갈아엎으면서 시간을 허비했던 것 같습니다.&lt;/p&gt;
&lt;p&gt;하지만, 이렇게 문제 해결 접근법을 적용해보니, 내가 정확히 절차를 밟아가면서 문제를 해결하고 있다는 느낌도 들었고,&lt;/p&gt;
&lt;p&gt;계획과 절차가 있기 때문에 내가 막히는 부분이 정확히 어디인지, 내가 작성하고 있는 코드가 이 해결책의 어떤 절차에 속하는지를 알 수 있어서, 전반적으로 시간 낭비가 많이 줄었다는 느낌을 받았습니다.&lt;/p&gt;
&lt;p&gt;문제에 접근하고 해결하는 과정이 정돈되어가는 느낌을 받아서 기뻤습니다.&lt;/p&gt;
&lt;h3&gt;참고자료&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로그래머스 코딩 테스트 연습 - 연속된 수의 합&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;문제 링크: &lt;a href=&quot;https://school.programmers.co.kr/learn/courses/30/lessons/120923&quot;&gt;https://school.programmers.co.kr/learn/courses/30/lessons/120923&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best JavaScript Data Structures &amp;#x26; Algorithms Course by Udemy, last updated January 2022, accessed April 5, 2023&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;강의 링크: &lt;a href=&quot;https://www.udemy.com/course/best-javascript-data-structures/&quot;&gt;https://www.udemy.com/course/best-javascript-data-structures/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Big O notation(빅 오 표기법)]]></title><description><![CDATA[Big O notation…]]></description><link>https://ha-il.github.io/algorithm-study/1-week/</link><guid isPermaLink="false">https://ha-il.github.io/algorithm-study/1-week/</guid><pubDate>Tue, 04 Apr 2023 22:15:00 GMT</pubDate><content:encoded>&lt;h2&gt;Big O notation(빅 오 표기법)&lt;/h2&gt;
&lt;h3&gt;빅 오 표기법은 왜 배우는 거죠?&lt;/h3&gt;
&lt;p&gt;알고리즘을 배우기 전에 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%A0%90%EA%B7%BC_%ED%91%9C%EA%B8%B0%EB%B2%95&quot;&gt;빅 오 표기법&lt;/a&gt;을 알아둬야 하는 이유가 뭘까요?&lt;/p&gt;
&lt;p&gt;그것은 바로, 빅 오 표기법이 알고리즘의 성능을 구할 수 있는 하나의 지표가 되기 때문입니다.&lt;/p&gt;
&lt;p&gt;어떤 문제를 해결하기 위한 알고리즘이라는 것은 사실 굉장히 다양합니다.&lt;/p&gt;
&lt;p&gt;그런 다양한 알고리즘 중에서는 분명 성능이 좋은 것도 있고, 나쁜 것도 있을 것입니다.&lt;/p&gt;
&lt;p&gt;우리는 그런 다양한 알고리즘 중에서 성능이 좋은 알고리즘을 구별할 수 있어야 합니다.&lt;/p&gt;
&lt;p&gt;빅 오 표기법은, 알고리즘의 복잡도를 나타내어 알고리즘의 성능을 분석하고 비교할 수 있게 해줍니다.&lt;/p&gt;
&lt;p&gt;내가 작성한 알고리즘의 성능을 빅 오 표기법으로 나타낼 수 없다면, 내 알고리즘이 다른 알고리즘에 비해 좋은 성능을 가지고 있는지 아닌지 알 수가 없습니다.&lt;/p&gt;
&lt;p&gt;따라서, 알고리즘을 배우기 전에 빅 오 표기법에 대해서 알아두는 것은 중요합니다.&lt;/p&gt;
&lt;h3&gt;빅 오 표기법은 뭔가요?&lt;/h3&gt;
&lt;p&gt;빅 오 표기법은 알고리즘의 성능을 분석하기 위해서 사용한다고 했습니다.&lt;/p&gt;
&lt;p&gt;그러면 좋은 성능을 가졌다는 것은 무슨 의미일까요?&lt;/p&gt;
&lt;p&gt;일반적으로는 빠른 알고리즘이 좋은 알고리즘이라고 할 수 있을 것입니다.&lt;/p&gt;
&lt;p&gt;그리고, 그 빠름이라는 것은 알고리즘이 실행되고 완료되기까지의 시간을 통해서 알 수 있을 것입니다.&lt;/p&gt;
&lt;p&gt;하지만, 시간은 알고리즘 측정의 기준이 되기 어렵습니다.&lt;/p&gt;
&lt;p&gt;왜 그럴까요?&lt;/p&gt;
&lt;p&gt;알고리즘의 수행 시간이라는 것은 사실 환경에 영향을 많이 받습니다.&lt;/p&gt;
&lt;p&gt;동일한 알고리즘이라고 해도, 알고리즘이 실행되는 환경(컴퓨터의 사양 등)에 따라서 수행 시간이 달라진다는 의미입니다.&lt;/p&gt;
&lt;p&gt;그리고 알고리즘의 수행시간이 측정이 어려울 정도로 짧은 경우, 정확한 시간을 측정하기가 어렵습니다.&lt;/p&gt;
&lt;p&gt;이런 이유로 시간이라는 기준은 알고리즘의 성능을 분석하기에는 적합하지 않습니다.&lt;/p&gt;
&lt;p&gt;그래서, 알고리즘의 성능을 분석할 때는 &lt;strong&gt;연산의 갯수&lt;/strong&gt; 가 기준이 됩니다.&lt;/p&gt;
&lt;p&gt;그리고 빅 오 표기법은 연산의 갯수를 &lt;strong&gt;대략적&lt;/strong&gt;으로 파악하여 공식화한 것입니다.&lt;/p&gt;
&lt;p&gt;아니, 성능을 분석한다면서 왜 &lt;strong&gt;연산의 갯수&lt;/strong&gt;로, 심지어 &lt;strong&gt;대략적&lt;/strong&gt;으로 파악해서 알고리즘의 성능을 표기하는 것일까요?&lt;/p&gt;
&lt;p&gt;성능을 제대로 분석할 수나 있는 걸까요?&lt;/p&gt;
&lt;p&gt;그 이유에 대해서는 빅 오 표기법이 어떻게 표기되는지 설명한 다음 말씀드리겠습니다.&lt;/p&gt;
&lt;h3&gt;빅 오 표기법은 어떻게 표기하나요?&lt;/h3&gt;
&lt;p&gt;빅 오 표기법을 알아보기 전에, 먼저 예시를 보고 &lt;strong&gt;연산의 갯수&lt;/strong&gt;를 &lt;strong&gt;대략적&lt;/strong&gt;으로 구해봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// getAverage의 연산 갯수는 더하기 한 번, 나눗셈 한 번으로 총 2 개 입니다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// a, b로 어떤 숫자가 들어와도 연산 갯수는 늘 2개로 일정할 것입니다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 대략적으로 연산의 갯수 * 1 이라고 볼 수 있겠습니다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getAverage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// addUpTo의 연산 갯수는 얼마일까요?&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 연산 갯수가 얼마든 n이 5라면 addUpTo의 연산 갯수는 5배입니다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 반복문이 n만큼 반복되기 떄문입니다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 대략적으로 연산의 갯수 * n 이라고 볼 수 있겠습니다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;addUpTo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; total &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    total &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; i
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; total
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// printAllPairs의 연산 갯수는 얼마일까요?&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 연산 갯수가 얼마든 n이 3라면 printAllPairs의 연산 갯수는 9배입니다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// n만큼 반복되는 반복문이 중첩되어 있기 때문입니다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 대략적으로 연산의 갯수 * n² 이라고 볼 수 있겠습니다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;printAllPairs&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 예시의 경우 비교적 단순한 코드임에도, 정확한 연산 갯수를 세는 것은 쉽지 않은 일이었습니다.&lt;/p&gt;
&lt;p&gt;하물며 복잡한 코드라면 더욱 어렵겠지요?&lt;/p&gt;
&lt;p&gt;예시의 주석을 통해서 이미 보셨듯이, 빅 오 표기법에서 연산의 갯수를 구할 때는 정확한 갯수가 중요하지 않습니다.&lt;/p&gt;
&lt;p&gt;빅 오 표기법에서는 해당 코드가 매우 여러번 반복한다는 것을 가정하고, 연산 갯수의 추세를 구하는 것이 중요합니다.&lt;/p&gt;
&lt;p&gt;그래서 빅 오 표기법이 &lt;strong&gt;연산의 갯수&lt;/strong&gt;를 &lt;strong&gt;대략적으로&lt;/strong&gt; 파악하여 공식화한 것이라고 말씀드린 것입니다.&lt;/p&gt;
&lt;p&gt;위에서 살펴본 예시를 각각 빅오 표기법으로 표기하면 아래와 같이 표기할 수 있습니다.&lt;/p&gt;
&lt;p&gt;getAverage : &lt;code class=&quot;language-text&quot;&gt;O(1)&lt;/code&gt; (여기서 숫자 1은, 연산의 갯수가 1개라는 의미가 아니라 연산의 갯수가 변함없이 일정함을 의미합니다.)&lt;/p&gt;
&lt;p&gt;addUpTo : &lt;code class=&quot;language-text&quot;&gt;O(n)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;printAllPairs : &lt;code class=&quot;language-text&quot;&gt;O(n²)&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;빅오 표기법은 어떻게 해석하나요?&lt;/h3&gt;
&lt;p&gt;빅오 표기법을 &lt;strong&gt;시간 복잡도&lt;/strong&gt; 관점에서 해석하면 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;O(1)&lt;/code&gt; : n이 어떤 값을 가져도 연산 갯수는 일정함
&lt;ul&gt;
&lt;li&gt;연산의 갯수가 2 개, 10 개, 100 개 상관없이 갯수가 일정하다면 &lt;code class=&quot;language-text&quot;&gt;O(1)&lt;/code&gt;으로 표기합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;O(n)&lt;/code&gt; : n의 값이 커질수록 연산의 갯수가 n에 비례해서 늘어난다.
&lt;ul&gt;
&lt;li&gt;연산의 갯수가 2n 개, 5n 개, 10n+50 개 상관없이, 전반적인 추세가 n 개라면 &lt;code class=&quot;language-text&quot;&gt;O(n)&lt;/code&gt;으로 표기합니다.&lt;/li&gt;
&lt;li&gt;무한히 반복하면 결국 n개 로 수렴하기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;O(n²)&lt;/code&gt; : n의 값이 커질 수록 연산의 갯수가 n제곱의 값으로 늘어난다.
&lt;ul&gt;
&lt;li&gt;연산의 갯수가 2n² 개, 5n²+10 개, 10n²+5n+8 개 상관없이, 전반적인 추세가 n² 개라면 &lt;code class=&quot;language-text&quot;&gt;O(n²)&lt;/code&gt;로 표기합니다.&lt;/li&gt;
&lt;li&gt;무한히 반복하면 결국 n² 개로 수렴하기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 외에도 &lt;code class=&quot;language-text&quot;&gt;O(log n)&lt;/code&gt; 과 &lt;code class=&quot;language-text&quot;&gt;O(nlog n)&lt;/code&gt;이 있습니다.&lt;/p&gt;
&lt;p&gt;(참고: 빅 오 표기법에서 log는 보통 log₂를 의미합니다.)&lt;/p&gt;
&lt;p&gt;앞서 언급한 빅 오 표기법을 성능에 따라 나열 아래와 같습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;O(1), O(log n), O(n), O(nlog n), O(n²) 순으로 성능이 좋습니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;빅오 표기법을 정리하면&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;빅 오 표기법은 연산의 갯수를 대략적으로 파악하여 공식화한 것입니다.&lt;/li&gt;
&lt;li&gt;연산 갯수의 세부 사항보다는 전반적인 추세에 주목합니다.&lt;/li&gt;
&lt;li&gt;빅 오 표기법은 실행시간이 가질 수 있는 최대치를 표기합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;우리가 쓰는 자바스크립트 객체와 배열 메서드의 성능은 어떨까?&lt;/h3&gt;
&lt;p&gt;빅 오 표기법이 무엇인지 알아봤으니, 우리에게 익숙한 자바스크립트 객체와 배열 메서드의 성능을 빅 오 표기법으로 표현해봅시다.&lt;/p&gt;
&lt;h4&gt;객체 메서드의 빅 오 표기법과 이유&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&quot;&gt;Object.keys&lt;/a&gt; : &lt;code class=&quot;language-text&quot;&gt;O(N)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;key의 갯수에 비례해서 연산이 증가하기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/values&quot;&gt;Object.values&lt;/a&gt; : &lt;code class=&quot;language-text&quot;&gt;O(N)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;value의 갯수에 비례해서 연산이 증가하기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/entries&quot;&gt;Object.entries&lt;/a&gt; : &lt;code class=&quot;language-text&quot;&gt;O(N)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;[key, value] 쌍의 배열의 갯수에 비례해서 연산이 증가하기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty&quot;&gt;hasOwnProperty&lt;/a&gt; : &lt;code class=&quot;language-text&quot;&gt;O(1)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;객체에서 프로퍼티에 접근할 때는 O(1)이므로, hasOwnProperty도 같은 이유로 O(1)입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;배열 메서드의 빅 오 표기법과 이유&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/push&quot;&gt;Array.push&lt;/a&gt; - &lt;code class=&quot;language-text&quot;&gt;O(1)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;요소의 갯수에 상관없이 배열의 끝에 요소를 추가하기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift&quot;&gt;Array.unshift&lt;/a&gt; - &lt;code class=&quot;language-text&quot;&gt;O(N)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;기존 요소들의 인덱스를 증가시킨 다음 맨 앞에 요소를 추가하기 때문에, 기존 요소 갯수에 비례해서 연산의 갯수가 증가합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/pop&quot;&gt;Array.pop&lt;/a&gt; - &lt;code class=&quot;language-text&quot;&gt;O(1)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;요소의 갯수에 상관없이 배열의 마지막 요소를 삭제하기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/shift&quot;&gt;Array.shift&lt;/a&gt; - &lt;code class=&quot;language-text&quot;&gt;O(N)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;첫 번째 요소를 제거하면 나머지 요소들의 인덱스가 전부 변하기 때문에, 요소의 갯수에 비례해서 연산이 증가합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/concat&quot;&gt;Array.concat&lt;/a&gt; - &lt;code class=&quot;language-text&quot;&gt;O(N)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;뒤에 추가되는 배열의 요소가 많아질수록 연산의 갯수도 증가하기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot;&gt;Array.slice&lt;/a&gt; - &lt;code class=&quot;language-text&quot;&gt;O(N)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;복사하는 요소의 개수에 따라 연산의 갯수도 증가하기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;Array.splice&lt;/a&gt; - &lt;code class=&quot;language-text&quot;&gt;O(N)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;배열의 위치에 따라 다르지만, 배열의 중간에 사용할 경우 기존 요소들의 인덱스가 바뀌기 때문에, 기존 요소의 갯수에 따라 연산의 갯수가 증가합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/sort&quot;&gt;Array.sort&lt;/a&gt; - &lt;code class=&quot;language-text&quot;&gt;O(N*log N)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;추후 정렬 알고리즘 포스팅에서 더 자세히 알아보겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Array.forEach/map/filter/reduce&lt;/a&gt; - &lt;code class=&quot;language-text&quot;&gt;O(N)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;배열 요소 갯수만큼 연산의 갯수가 늘어나기 때문입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;회고&lt;/h2&gt;
&lt;p&gt;빅 오 표기법은 앞으로 배울 알고리즘들의 성능을 분석하고 비교하기 위해서 반드시 알아둬야 할 개념임에는 분명하지만, 제가 빅 오 표기법을 알고 있다고 해서 저의 알고리즘 작성 능력이 비약적으로 상승하는 일은 없을 것입니다.&lt;/p&gt;
&lt;p&gt;하지만 앞으로 코드를 작성하거나 코딩 테스트를 풀 때, 내가 작성하고 있는 코드의 성능을 염두해두면서 코드를 작성할 수 있지 않을까 싶습니다.&lt;/p&gt;
&lt;p&gt;예를 들어, 중첩된 반복문을 최대한 피해서 코드를 작성하거나, 늘 배열로 해결하던 문제를 객체로 접근해서 복잡도를 낮춰본다거나, 빌트인 메서드를 사용할 때도 해당 메서드의 성능을 고민해보거나 하는 식으로 말이죠.&lt;/p&gt;
&lt;p&gt;무작정 빅 오 표기법이라는 지식만 습득한 것이 아니라, 내가 이것을 배워서 어디다 써먹을 수 있을지 고민하며 학습하는 것은 재미도 있고 기억에도 오래 남는 것 같습니다.&lt;/p&gt;
&lt;h2&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Best JavaScript Data Structures &amp;#x26; Algorithms Course by Udemy, last updated January 2022, accessed April 5, 2023&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;강의 링크: &lt;a href=&quot;https://www.udemy.com/course/best-javascript-data-structures/&quot;&gt;https://www.udemy.com/course/best-javascript-data-structures/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[This 바인딩은 함수 호출 방식에 따라 결정된다]]></title><description><![CDATA[…]]></description><link>https://ha-il.github.io/troubleshooting/js-this/</link><guid isPermaLink="false">https://ha-il.github.io/troubleshooting/js-this/</guid><pubDate>Tue, 28 Mar 2023 20:47:00 GMT</pubDate><content:encoded>&lt;h2&gt;1. 문제 발생&lt;/h2&gt;
&lt;p&gt;바닐라 자바스크립트로 간단한 메뉴 보드를 만들고 있었습니다.&lt;/p&gt;
&lt;p&gt;여기서 메뉴 보드란, 각 메뉴의 카테고리가 있고 해당 카테고리에 속한 메뉴를 사용자에게 보여주는 앱입니다.&lt;/p&gt;
&lt;p&gt;카테고리마다 버튼이 존재하고, 사용자가 그 버튼을 누르면 카테고리에 속한 메뉴를 보여주는 것입니다.&lt;/p&gt;
&lt;p&gt;예를 들어 &apos;커피&apos;라고 적힌 버튼을 누르면 &apos;커피&apos; 카테고리에 속한 메뉴(아메리카노, 카페라떼 등)가 사용자에게 보여지는 것입니다.&lt;/p&gt;
&lt;p&gt;아래에 보이는 코드는, 그 메뉴보드 앱의 뼈대입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentCategory &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;coffee&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;initEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 오늘의 주인공&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;changeCategory&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// ... &lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nav&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; changeCategory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 코드는 정상적으로 작동했지만  &lt;code class=&quot;language-text&quot;&gt;changeCategory&lt;/code&gt; 라는 함수를 &lt;code class=&quot;language-text&quot;&gt;initEventListener&lt;/code&gt; 라는 메서드 밖으로 꺼내고 싶었습니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;changeCategory&lt;/code&gt;는 이벤트리스너로 사용될 함수니까, &lt;code class=&quot;language-text&quot;&gt;initEventListener&lt;/code&gt; 라는 메서드에 속해있어도 문제는 없지만, 레이어를 분리해서 함수는 함수끼리, 이벤트리스너는 이벤트리스너끼리 모으고 싶었습니다.&lt;/p&gt;
&lt;p&gt;그래서 처음에는 아래와 같이 리팩터링했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentCategory &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;coffee&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// changeCategory를 initEventListener에서 분리하여 App 클래스의 매서드로 정의했다.&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;changeCategory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;initEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token comment&quot;&gt;// changeCategory를 App 클래스의 매서드로 선언했기 때문에, this를 붙여줬다.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nav&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;changeCategory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그러나 다음과 같은 에러가 발생했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;🚫 Uncaught TypeError: this.render is not a function
 at HTMLElement.changeCategory&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;this.render&lt;/code&gt;가 함수가 아니라는 의미입니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;this.render&lt;/code&gt;가 함수가 아니라면 실행될 수 없기 때문에,&lt;/p&gt;
&lt;p&gt;카테고리 버튼을 눌렀음에도 해당 카테고리에 속한 아이템들을 화면에 렌더링하지 못 했습니다.&lt;/p&gt;
&lt;h2&gt;2. 원인 분석&lt;/h2&gt;
&lt;p&gt;저는 정말 의아했습니다.&lt;/p&gt;
&lt;p&gt;위의 코드에서 &lt;code class=&quot;language-text&quot;&gt;init&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;changeCategory&lt;/code&gt;는 모두 &lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt;이라는 클래스 레벨의 스코프에 속해있는 메서드입니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;init&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;this.render&lt;/code&gt;를 실행했을 때는 문제가 없는데,&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;init&lt;/code&gt;과 같은 스코프에 속한 &lt;code class=&quot;language-text&quot;&gt;changeCategory&lt;/code&gt;에서는 왜 &lt;code class=&quot;language-text&quot;&gt;this.render&lt;/code&gt;를 실행할 수 없는 것일까요?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 이건 되고&lt;/span&gt;
		&lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;changeCategory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 이건 안 된다고??&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이때 생각했던 원인은 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; 바인딩이었습니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;init&lt;/code&gt; 안에서 실행한 &lt;code class=&quot;language-text&quot;&gt;this.render&lt;/code&gt;는 문제가 없었습니다.&lt;/p&gt;
&lt;p&gt;그러면 &lt;code class=&quot;language-text&quot;&gt;changeCategory&lt;/code&gt; 안에서 실행한 &lt;code class=&quot;language-text&quot;&gt;this.render&lt;/code&gt;가 문제라는 것입니다.&lt;/p&gt;
&lt;p&gt;철자 하나 틀린 것 없이 똑같은 &lt;code class=&quot;language-text&quot;&gt;this.render&lt;/code&gt;에서 유일하게 차이를 찾는다면,&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;this.render&lt;/code&gt;에 바인딩된 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;가 서로 다르다는 것밖에 없었습니다.&lt;/p&gt;
&lt;p&gt;하지만 여전히 의아했습니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;init&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;changeCategory&lt;/code&gt;는 모두 &lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt;이라는 클래스 레벨의 스코프에 정의되어있는 메서드입니다.&lt;/p&gt;
&lt;p&gt;그리고 &lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt;이라는 클래스 내부의 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;는 앞으로 생성될 인스턴스를 가리킨다는 사실도 저는 알고 있었습니다.&lt;/p&gt;
&lt;p&gt;그러면 &lt;code class=&quot;language-text&quot;&gt;init&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;changeCategory&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;가 가리키는 대상은 클래스 &lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt;이 생성할 인스턴스로 동일해야할 터인데,&lt;/p&gt;
&lt;p&gt;어째서 차이가 발생한 것일까요?&lt;/p&gt;
&lt;p&gt;이를 확인하기 위해, 먼저 &lt;code class=&quot;language-text&quot;&gt;init&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;changeCategory&lt;/code&gt;가 가리키는  &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;가 무엇인지 알아보기 위해 콘솔을 찍어봤습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;init의 this&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// init의 this: App {menu: {…}, currentCategory: &apos;coffee&apos;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;changeCategory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;changeCategory의 this&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// changeCategory의 this: &amp;lt;nav clss=&quot;...&quot;&gt;...&amp;lt;/nav&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;콘솔을 찍어보니 원인은 분명 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; 바인딩의 차이였습니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;init&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt; 클래스의 인스턴스를 가리키고 있었고,&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;changeCategory&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;nav&lt;/code&gt; 태그를 가리키고 있었습니다.&lt;/p&gt;
&lt;p&gt;(&lt;code class=&quot;language-text&quot;&gt;nav&lt;/code&gt; 태그는 각 카테고리의 버튼을 모아둔 내비게이션입니다.)&lt;/p&gt;
&lt;h2&gt;3. 왜 이런 현상이 발생했을까?&lt;/h2&gt;
&lt;p&gt;이 현상을 이해하기 위해서는 이 사실을 인지하고 가는 것이 중요합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;this가 가리키는 값은 함수가 어떻게 호출되었는지에 따라 동적으로 결정된다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;함수 호출 방식에 따른 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; 바인딩은 아래와 같은 차이가 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1. 일반 함수 호출 
   - this에 전역 객체가 바인딩된다.

2. 메서드 호출 
   - 메서드를 호출할 때는 메서드 이름 앞의 마침표(.) 연산자 앞에 기술한 객체가 바인딩된다.

3. 생성자 함수 or 클래스 호출 
   - 생성자 함수 or 클래스 내부의 this에는 (미래에) 생성할 인스턴스가 바인딩된다. 

4. Function.prototype.apply/call/bind 메서드에 의한 간접 호출 
   - this에 인수로 전달한 객체가 바인딩된다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 사실을 인지한 상태에서, 에러가 발생했던 코드를 다시 확인해봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentCategory &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;coffee&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// ① init()이 호출될 곳은 클래스 App의 인스턴스 내부이다.&lt;/span&gt;
		&lt;span class=&quot;token comment&quot;&gt;//    따라서 init()의 this에는 App의 인스턴스가 바인딩 된다.&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// ② init()의 this에는 App의 인스턴스가 바인딩 되어있다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//    따라서 App의 메서드인 this.render()가 정상 작동한다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	
  &lt;span class=&quot;token function&quot;&gt;changeCategory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;initEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// ③ 그런데 이건 함수호출하는게 아니라 이벤트 핸들러로 전달할 뿐인데...?&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//    이건 무슨 경우지...?&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nav&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;changeCategory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;함수 호출 방식에 따라 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; 바인딩이 어떻게 이뤄지는 지는 위에서 확인했습니다.&lt;/p&gt;
&lt;p&gt;하지만 함수를 호출하는 것이 아니라 &lt;code class=&quot;language-text&quot;&gt;addEvnetListener&lt;/code&gt;에 인자로 전달할 뿐인 경우는 어떻게 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; 바인딩이 이뤄지는 지는 걸까요?&lt;/p&gt;
&lt;p&gt;MDN의 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#other_notes&quot;&gt;EventTarget.addEventListener()&lt;/a&gt; 문서에서 그 이유를 알 수 있었습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;When attaching a handler function to an element using `addEventListener()`,
the value of this inside the handler will be a reference to the element.

`addEventListener()`를 사용해 요소에 핸들러를 부착하게 되면 핸들러 내부의 `this`
 값은 대상 요소를 가리키게 됩니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 사실을 인지한 상태에서, 에러가 발생했던 코드를 다시 확인해봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentCategory &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;coffee&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token comment&quot;&gt;// ① init()이 호출될 곳은 클래스 App의 인스턴스 내부이다.&lt;/span&gt;
		&lt;span class=&quot;token comment&quot;&gt;//    따라서 init()의 this에는 App의 인스턴스가 바인딩 된다.&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// ② init()의 this에는 App의 인스턴스가 바인딩 되어있다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//    따라서 App의 메서드인 this.render()가 정상 작동한다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	
  &lt;span class=&quot;token function&quot;&gt;changeCategory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;// ④ changeCategory()의 this에는 nav요소가 바인딩되어 있다.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//    nav요소에는 render라는 함수가 정의되어있지 않다.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//    따라서 this.render()는 작동하지 않는다.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//    Uncaught TypeError: &lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//    this.render is not a function at HTMLElement.changeCategory &lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;initEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// ③ addEventListener()를 사용해 nav 요소에 핸들러를 부착하게 되면&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//    핸들러 내부의 this는 nav 요소를 가리키게 된다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//    따라서 this.changeCategory의 this에는 nav 요소가 바인딩 된다.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nav&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;changeCategory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;제가 헷갈렸던 이유가 명확해졌습니다.&lt;/p&gt;
&lt;p&gt;저는 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; 바인딩을 함수 호출 방식이 아니라, 함수를 정의한 스코프에 따라 달라지는 것으로 착각하고 있었습니다.&lt;/p&gt;
&lt;p&gt;그래서, &quot; &lt;code class=&quot;language-text&quot;&gt;init&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;changeCategory&lt;/code&gt;는 둘 다 &lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt;이라는 클래스 레벨의 스코프에 정의되어 있으니까, 두 메서드의 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt;의 인스턴스를 가리켜야 하는 거 아니야?&quot;라는 생각을 가지고 있었습니다.&lt;/p&gt;
&lt;p&gt;하지만, &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;가 함수 호출 방식에 따라 달라지거나, &lt;code class=&quot;language-text&quot;&gt;addEventListener&lt;/code&gt;의 핸들러로 사용될 경우 달라진다는 것을 알게 되고, 제가 어느 부분을 착각했는지 명확히 할 수 있었습니다.&lt;/p&gt;
&lt;h2&gt;해결 과정&lt;/h2&gt;
&lt;p&gt;이 문제를 해결하기 위해서는 결국,&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;changeCategory&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;가 가리키는 대상을 &lt;code class=&quot;language-text&quot;&gt;nav&lt;/code&gt; 요소가 아닌, 클래스 &lt;code class=&quot;language-text&quot;&gt;App&lt;/code&gt;의 인스턴스로 바꿔주면 됩니다.&lt;/p&gt;
&lt;p&gt;이럴 때 사용할 수 있는 메서드를 아래에 소개합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Function.prototype.apply 
- 함수를 호출하면서 첫 번째 인수로 전달한 특정 객체를, 호출한 함수의 this에 바인딩한다. 
- 호출할 함수의 인수를 배열로 묶어 전달한다.
- 예시: func.apply(arg, [1, 2, 3])

Function.prototype.call
- 함수를 호출하면서 첫 번째 인수로 전달한 특정 객체를, 호출한 함수의 this에 바인딩한다. 
- 호출할 함수의 인수를 쉼표로 구분한 리스트 형식으로 전달한다.
- 예시: func.call(arg, 1, 2, 3)

Function.prototype.bind
- 함수를 호출하지 않고 첫 번째 인수로 전달한 값으로 this 바인딩이 교체된 함수를 새롭게 생성해 반환한다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;저의 경우 이벤트핸들러로 전달할 함수의 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; 바인딩을 변경해야 하기 때문에, 함수를 호출할 필요는 없었습니다.&lt;/p&gt;
&lt;p&gt;따라서 &lt;code class=&quot;language-text&quot;&gt;bind&lt;/code&gt; 메서드를 사용해서 에러를 해결했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentCategory &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;coffee&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// ① initEventListener()가 호출될 곳은 클래스 App의 인스턴스 내부이다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//    따라서 initEventListener()의 this에는 App의 인스턴스가 바인딩 된다.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	
  &lt;span class=&quot;token function&quot;&gt;changeCategory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;// ④ 이제 changeCategory()의 this에는 App의 인스턴스가 바인딩 되어있다.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//    따라서 App의 메서드인 this.render()가 정상 작동한다.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//    에러 해결 완료!&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;initEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;// ② initEventListener()의 this에는 App의 인스턴스가 바인딩 되어있다.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//    addEventListener() 때문에 this.changeCategory에는 nav 요소가 바인딩 된다.&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;//    this.changeCategory.bind(this), 이렇게 작성해주면&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//    this.changeCategory의 this가 nav가 아닌 App의 인스턴스를 가리키게 된다.&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//    .bind(this)에서 this는, initEventListener()의 this이고,&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;//    initEventListener()의 this는, App의 인스턴스를 가리키고 있기 때문이다.&lt;/span&gt;
	    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nav&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;changeCategory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;마치며&lt;/h2&gt;
&lt;p&gt;“모던 자바스크립트 딥 다이브”를 나름 여러번 읽어왔기 때문에, 누군가 this에 대해 묻는다면 그럭저럭 대답할 수 있다고 생각했습니다.&lt;/p&gt;
&lt;p&gt;하지만, 실제로 코드를 구현하면서 this를 다루기 시작하니, 제가 정말 애매하게 알고 있었다는 생각이 들었습니다.&lt;/p&gt;
&lt;p&gt;책으로 공부했던 경험보다는, 이렇게 뭔가를 구현하면서 발생한 에러를 해결하며 공부한 경험이 더 강하게 머릿속에 남는 것 같습니다.&lt;/p&gt;
&lt;p&gt;또 새로운 글로 찾아뵙겠습니다.&lt;/p&gt;
&lt;h2&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 by 이웅모 (출처: 위키북스, 2020), p. 342-358 “22장 this”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;도서 구매 링크: &lt;a href=&quot;https://product.kyobobook.co.kr/detail/S000001766445&quot;&gt;https://product.kyobobook.co.kr/detail/S000001766445&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EventTarget.addEventListener() by MDN Web Docs, accessed March 28, 2023&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;문서 링크: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#other_notes&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#other_notes&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>