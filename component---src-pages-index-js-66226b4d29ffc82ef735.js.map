{"version":3,"file":"component---src-pages-index-js-66226b4d29ffc82ef735.js","mappings":"wOA6DA,MAlDY,KAAO,IAAD,EAChB,MAkBMA,EAA+B,QAAzB,GAlBCC,EAAAA,EAAAA,gBAAe,cAkBRC,KAAKC,oBAAY,aAAtB,EAAwBH,OAGvC,OACE,uBAAKI,UAAU,OACb,gBAAC,EAAAC,EAAW,CACVD,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,4BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBAAiB,sBAEtBZ,aAAM,EAANA,EAAQa,OACP,yBAAG,aACS,8BAASb,EAAOa,MAAc,QAAK,2BAC7C,8BAASb,EAAOc,UAAkB,sBAClC,4BACCd,aAAM,EAANA,EAAQe,UAAW,KAAI,KAOxB,E,oBC0GV,MArJkB,IAAwB,UAAvB,KAAEC,EAAI,SAAEC,GAAU,EACnC,MAAM,EAACC,EAAe,EAAEC,IAAsBC,EAAAA,EAAAA,UAAS,MACjDC,GAAkC,QAAtB,EAAAL,EAAKd,KAAKC,oBAAY,aAAtB,EAAwBmB,QAAK,QACzCC,EAAaP,EAAKQ,kBAAkBC,SACpCC,EAAcC,IAClBC,QAAQC,MACR,MACMC,EADOH,EAAEI,OAAOC,QAAQ,MACRC,QAAQH,SAE9B,OAAOX,EAAmBW,EAAS,EAE/BI,EACgB,OAApBhB,EACIF,EAAKQ,kBAAkBW,MACvBnB,EAAKQ,kBAAkBW,MAAMC,QAC3BC,GAAQA,EAAKC,YAAYR,WAAaZ,IAG9C,OAAqB,IAAjBgB,EAAMK,OAEN,gBAAC,IAAM,CAACtB,SAAUA,EAAUK,MAAOD,GACjC,gBAAC,EAAG,MACJ,yBAAG,8JAUP,gBAAC,IAAM,CAACJ,SAAUA,EAAUK,MAAOD,GACjC,uBAAKjB,UAAU,UACb,uBAAKA,UAAU,kBACb,uBAAKA,UAAU,uBACb,uBAAKA,UAAU,6BAA4B,wBAG3C,yBAAG,UACM,8BAAQ,MAAW,oBAAkB,IAC5C,2BAAM,IAAC,0BAAI,OACX,8BAAQ,QAAa,QAAK,6BAG9B,uBAAKA,UAAU,sBACb,gBAAC,EAAAC,EAAW,CAACG,IAAI,2BAA2BI,IAAI,iBAAgB,yBAItE,sBAAIR,UAAU,oBAAmB,QACjC,sBAAIA,UAAU,uBAAuBoC,MAAO,CAAEC,UAAW,SACvD,sBACErC,UAAU,qBACVsC,IAAI,YACJC,QAASjB,EACT,gBAAc,MAEd,gBAAC,EAAArB,EAAW,CACVG,IAAI,kCACJI,IAAI,iBAAgB,sBAEtB,4BAAM,QAEPW,EAAWqB,KAAId,GAEZ,sBACE1B,UAAU,qBACVsC,IAAKZ,EACLa,QAASjB,EACT,gBAAeI,GAED,cAAbA,EACC,gBAAC,EAAAzB,EAAW,CACVG,IAAI,mCACJI,IAAI,iBAAgB,sBAEpB,KACU,eAAbkB,EACC,gBAAC,EAAAzB,EAAW,CACVG,IAAI,oCACJI,IAAI,iBAAgB,sBAEpB,KACU,aAAbkB,EACC,gBAAC,EAAAzB,EAAW,CACVG,IAAI,kCACJI,IAAI,iBAAgB,sBAEpB,KACJ,4BAAOkB,OAKf,sBAAI1B,UAAU,YAAYoC,MAAO,CAAEC,UAAW,SAC3CP,EAAMU,KAAIP,IAAQ,YACjB,MAAMf,EAAQe,EAAKC,YAAYhB,OAASe,EAAKQ,OAAOC,KAC9CC,GAASC,EAAAA,EAAAA,IACbC,EAAAA,EAAAA,GACgC,QADxB,EACNZ,EAAKC,YAAYY,qBAAa,OAAiB,QAAjB,EAA9B,EAAgCC,uBAAe,WAAjB,EAA9B,EAAiDC,iBAEnD,CACE,CACEC,MAAO,qBACPC,OAAOL,EAAAA,EAAAA,GACuB,QADf,EACbZ,EAAKC,YAAYiB,mBAAW,OAAiB,QAAjB,EAA5B,EAA8BJ,uBAAe,WAAjB,EAA5B,EAA+CC,oBAMvD,OACE,sBAAIV,IAAKL,EAAKQ,OAAOC,MACnB,gBAAC,EAAAU,KAAI,CAACC,GAAIpB,EAAKQ,OAAOC,KAAMY,SAAS,OACnC,gBAAC,EAAAC,EAAW,CACVvD,UAAU,eACVkD,MAAOP,EACPnC,IAAI,uBAEN,2BACER,UAAU,iBACVwD,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,wBAAMH,SAAS,YAAYpC,IAE7B,6BAAQe,EAAKC,YAAYwB,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQ3B,EAAKC,YAAY2B,aAAe5B,EAAK6B,SAE/CR,SAAS,mBAKd,KAIJ,EAWN,MAAMS,EAAO,IAAM,gBAAC,IAAG,CAAC7C,MAAM,a","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            nickname\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  //const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          안녕하세요 개발자 <strong>{author.name}</strong>입니다. <br />\n          <strong>{author.nickname}</strong>이라는 닉네임을 사용하고 있습니다.\n          <br />\n          {author?.summary || null}\n          {` `}\n          {/* <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a> */}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport {\n  GatsbyImage,\n  getImage,\n  StaticImage,\n  withArtDirection,\n} from \"gatsby-plugin-image\"\nimport { useState } from \"react\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const [currentCategory, setCurrentCategory] = useState(\"전체\")\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const categories = data.allMarkdownRemark.distinct\n  const renderPosts = e => {\n    console.log()\n    const list = e.target.closest(\"li\")\n    const category = list.dataset.category\n\n    return setCurrentCategory(category)\n  }\n  const posts =\n    currentCategory === \"전체\"\n      ? data.allMarkdownRemark.nodes\n      : data.allMarkdownRemark.nodes.filter(\n          post => post.frontmatter.category === currentCategory\n        )\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <div className=\"slider\">\n        <div className=\"slider-content\">\n          <div className=\"slider-content-text\">\n            <div className=\"slider-content-text-title\">\n              하일의 작업실에 오신 걸 환영합니다!\n            </div>\n            <p>\n              안녕하세요, <strong>하일</strong>이라는 닉네임으로 활동하고 있는{\" \"}\n              <br /> <em>개발자</em>\n              <strong> 김형우</strong>입니다. <br />\n            </p>\n          </div>\n          <div className=\"slider-content-img\">\n            <StaticImage src=\"../images/js-256x256.png\" alt=\"Slider picture\" />\n          </div>\n        </div>\n      </div>\n      <h2 className=\"categories-title\">카테고리</h2>\n      <ol className=\"categories-container\" style={{ listStyle: `none` }}>\n        <li\n          className=\"category-container\"\n          key=\"all-posts\"\n          onClick={renderPosts}\n          data-category=\"전체\"\n        >\n          <StaticImage\n            src=\"../images/category/all-post.png\"\n            alt=\"category-image\"\n          />\n          <span>all</span>\n        </li>\n        {categories.map(category => {\n          return (\n            <li\n              className=\"category-container\"\n              key={category}\n              onClick={renderPosts}\n              data-category={category}\n            >\n              {category === \"Algorithm\" ? (\n                <StaticImage\n                  src=\"../images/category/Algorithm.png\"\n                  alt=\"category-image\"\n                ></StaticImage>\n              ) : null}\n              {category === \"JavaScript\" ? (\n                <StaticImage\n                  src=\"../images/category/JavaScript.png\"\n                  alt=\"category-image\"\n                />\n              ) : null}\n              {category === \"MarkDown\" ? (\n                <StaticImage\n                  src=\"../images/category/MarkDown.png\"\n                  alt=\"category-image\"\n                />\n              ) : null}\n              <span>{category}</span>\n            </li>\n          )\n        })}\n      </ol>\n      <ol className=\"post-list\" style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n          const images = withArtDirection(\n            getImage(\n              post.frontmatter.featuredImage?.childImageSharp?.gatsbyImageData\n            ),\n            [\n              {\n                media: \"(max-width: 558px)\",\n                image: getImage(\n                  post.frontmatter.mobileImage?.childImageSharp?.gatsbyImageData\n                ),\n              },\n            ]\n          )\n\n          return (\n            <li key={post.fields.slug}>\n              <Link to={post.fields.slug} itemProp=\"url\">\n                <GatsbyImage\n                  className=\"art-directed\"\n                  image={images}\n                  alt=\"Art directed image\"\n                />\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                >\n                  <header>\n                    <h2>\n                      <span itemProp=\"headline\">{title}</span>\n                    </h2>\n                    <small>{post.frontmatter.date}</small>\n                  </header>\n                  <section>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: post.frontmatter.description || post.excerpt,\n                      }}\n                      itemProp=\"description\"\n                    />\n                  </section>\n                </article>\n              </Link>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          category\n          featuredImage {\n            childImageSharp {\n              gatsbyImageData(width: 128, height: 128, layout: CONSTRAINED)\n            }\n          }\n          mobileImage {\n            childImageSharp {\n              gatsbyImageData(width: 512, height: 256, layout: CONSTRAINED)\n            }\n          }\n        }\n      }\n      distinct(field: { frontmatter: { category: SELECT } })\n    }\n  }\n`\n"],"names":["author","useStaticQuery","site","siteMetadata","className","S","layout","formats","src","width","height","quality","alt","name","nickname","summary","data","location","currentCategory","setCurrentCategory","useState","siteTitle","title","categories","allMarkdownRemark","distinct","renderPosts","e","console","log","category","target","closest","dataset","posts","nodes","filter","post","frontmatter","length","style","listStyle","key","onClick","map","fields","slug","images","withArtDirection","getImage","featuredImage","childImageSharp","gatsbyImageData","media","image","mobileImage","Link","to","itemProp","G","itemScope","itemType","date","dangerouslySetInnerHTML","__html","description","excerpt","Head"],"sourceRoot":""}